
Communicate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2d8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bb4  0800a484  0800a484  0001a484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c038  0800c038  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  0800c038  0800c038  0001c038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c040  0800c040  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c040  0800c040  0001c040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c044  0800c044  0001c044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000144  20000000  0800c048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020144  2**0
                  CONTENTS
 10 .bss          00001e94  20000144  20000144  00020144  2**2
                  ALLOC
 11 ._user_heap_stack 00002400  20001fd8  20001fd8  00020144  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019bf4  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000415f  00000000  00000000  00039d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f0  00000000  00000000  0003dec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001408  00000000  00000000  0003f4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028919  00000000  00000000  000408c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cd53  00000000  00000000  000691d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1908  00000000  00000000  00085f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00167834  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a98  00000000  00000000  00167884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000144 	.word	0x20000144
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800a46c 	.word	0x0800a46c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000148 	.word	0x20000148
 80001e8:	0800a46c 	.word	0x0800a46c

080001ec <strcmp>:
 80001ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f4:	2a01      	cmp	r2, #1
 80001f6:	bf28      	it	cs
 80001f8:	429a      	cmpcs	r2, r3
 80001fa:	d0f7      	beq.n	80001ec <strcmp>
 80001fc:	1ad0      	subs	r0, r2, r3
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b974 	b.w	8000500 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468e      	mov	lr, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14d      	bne.n	80002da <__udivmoddi4+0xaa>
 800023e:	428a      	cmp	r2, r1
 8000240:	4694      	mov	ip, r2
 8000242:	d969      	bls.n	8000318 <__udivmoddi4+0xe8>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b152      	cbz	r2, 8000260 <__udivmoddi4+0x30>
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	f1c2 0120 	rsb	r1, r2, #32
 8000252:	fa20 f101 	lsr.w	r1, r0, r1
 8000256:	fa0c fc02 	lsl.w	ip, ip, r2
 800025a:	ea41 0e03 	orr.w	lr, r1, r3
 800025e:	4094      	lsls	r4, r2
 8000260:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000264:	0c21      	lsrs	r1, r4, #16
 8000266:	fbbe f6f8 	udiv	r6, lr, r8
 800026a:	fa1f f78c 	uxth.w	r7, ip
 800026e:	fb08 e316 	mls	r3, r8, r6, lr
 8000272:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000276:	fb06 f107 	mul.w	r1, r6, r7
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 811f 	bcs.w	80004c8 <__udivmoddi4+0x298>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 811c 	bls.w	80004c8 <__udivmoddi4+0x298>
 8000290:	3e02      	subs	r6, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 f707 	mul.w	r7, r0, r7
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x92>
 80002ac:	eb1c 0404 	adds.w	r4, ip, r4
 80002b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b4:	f080 810a 	bcs.w	80004cc <__udivmoddi4+0x29c>
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	f240 8107 	bls.w	80004cc <__udivmoddi4+0x29c>
 80002be:	4464      	add	r4, ip
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c6:	1be4      	subs	r4, r4, r7
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa4>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xc2>
 80002de:	2d00      	cmp	r5, #0
 80002e0:	f000 80ef 	beq.w	80004c2 <__udivmoddi4+0x292>
 80002e4:	2600      	movs	r6, #0
 80002e6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ea:	4630      	mov	r0, r6
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f683 	clz	r6, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d14a      	bne.n	8000390 <__udivmoddi4+0x160>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd4>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80f9 	bhi.w	80004f6 <__udivmoddi4+0x2c6>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	469e      	mov	lr, r3
 800030e:	2d00      	cmp	r5, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa4>
 8000312:	e9c5 4e00 	strd	r4, lr, [r5]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa4>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xec>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 8092 	bne.w	800044a <__udivmoddi4+0x21a>
 8000326:	eba1 010c 	sub.w	r1, r1, ip
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2601      	movs	r6, #1
 8000334:	0c20      	lsrs	r0, r4, #16
 8000336:	fbb1 f3f7 	udiv	r3, r1, r7
 800033a:	fb07 1113 	mls	r1, r7, r3, r1
 800033e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000342:	fb0e f003 	mul.w	r0, lr, r3
 8000346:	4288      	cmp	r0, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x12c>
 800034a:	eb1c 0101 	adds.w	r1, ip, r1
 800034e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x12a>
 8000354:	4288      	cmp	r0, r1
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2c0>
 800035a:	4643      	mov	r3, r8
 800035c:	1a09      	subs	r1, r1, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb1 f0f7 	udiv	r0, r1, r7
 8000364:	fb07 1110 	mls	r1, r7, r0, r1
 8000368:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x156>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 31ff 	add.w	r1, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x154>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 8000384:	4608      	mov	r0, r1
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038e:	e79c      	b.n	80002ca <__udivmoddi4+0x9a>
 8000390:	f1c6 0720 	rsb	r7, r6, #32
 8000394:	40b3      	lsls	r3, r6
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa20 f407 	lsr.w	r4, r0, r7
 80003a2:	fa01 f306 	lsl.w	r3, r1, r6
 80003a6:	431c      	orrs	r4, r3
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ae:	fa00 f306 	lsl.w	r3, r0, r6
 80003b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b6:	0c20      	lsrs	r0, r4, #16
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	fb09 1118 	mls	r1, r9, r8, r1
 80003c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c4:	fb08 f00e 	mul.w	r0, r8, lr
 80003c8:	4288      	cmp	r0, r1
 80003ca:	fa02 f206 	lsl.w	r2, r2, r6
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b8>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2bc>
 80003dc:	4288      	cmp	r0, r1
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2bc>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4461      	add	r1, ip
 80003e8:	1a09      	subs	r1, r1, r0
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f0:	fb09 1110 	mls	r1, r9, r0, r1
 80003f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003fc:	458e      	cmp	lr, r1
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1e2>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f100 34ff 	add.w	r4, r0, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2b4>
 800040a:	458e      	cmp	lr, r1
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2b4>
 800040e:	3802      	subs	r0, #2
 8000410:	4461      	add	r1, ip
 8000412:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000416:	fba0 9402 	umull	r9, r4, r0, r2
 800041a:	eba1 010e 	sub.w	r1, r1, lr
 800041e:	42a1      	cmp	r1, r4
 8000420:	46c8      	mov	r8, r9
 8000422:	46a6      	mov	lr, r4
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x2a4>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x2a0>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x212>
 800042a:	ebb3 0208 	subs.w	r2, r3, r8
 800042e:	eb61 010e 	sbc.w	r1, r1, lr
 8000432:	fa01 f707 	lsl.w	r7, r1, r7
 8000436:	fa22 f306 	lsr.w	r3, r2, r6
 800043a:	40f1      	lsrs	r1, r6
 800043c:	431f      	orrs	r7, r3
 800043e:	e9c5 7100 	strd	r7, r1, [r5]
 8000442:	2600      	movs	r6, #0
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	f1c2 0320 	rsb	r3, r2, #32
 800044e:	40d8      	lsrs	r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa21 f303 	lsr.w	r3, r1, r3
 8000458:	4091      	lsls	r1, r2
 800045a:	4301      	orrs	r1, r0
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb3 f0f7 	udiv	r0, r3, r7
 8000468:	fb07 3610 	mls	r6, r7, r0, r3
 800046c:	0c0b      	lsrs	r3, r1, #16
 800046e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000472:	fb00 f60e 	mul.w	r6, r0, lr
 8000476:	429e      	cmp	r6, r3
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x260>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b8>
 8000488:	429e      	cmp	r6, r3
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b8>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1b9b      	subs	r3, r3, r6
 8000492:	b289      	uxth	r1, r1
 8000494:	fbb3 f6f7 	udiv	r6, r3, r7
 8000498:	fb07 3316 	mls	r3, r7, r6, r3
 800049c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a0:	fb06 f30e 	mul.w	r3, r6, lr
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x28a>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 80004b6:	3e02      	subs	r6, #2
 80004b8:	4461      	add	r1, ip
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0x104>
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e705      	b.n	80002d4 <__udivmoddi4+0xa4>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e3      	b.n	8000294 <__udivmoddi4+0x64>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6f8      	b.n	80002c2 <__udivmoddi4+0x92>
 80004d0:	454b      	cmp	r3, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f8>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004dc:	3801      	subs	r0, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f8>
 80004e0:	4646      	mov	r6, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x28a>
 80004e4:	4620      	mov	r0, r4
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1e2>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x260>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b8>
 80004f0:	3b02      	subs	r3, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x12c>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e709      	b.n	800030e <__udivmoddi4+0xde>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x156>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f001 fbaa 	bl	8001c60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f892 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 f8fa 	bl	8000708 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000514:	f009 fa64 	bl	80099e0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();//init LCD
 8000518:	f000 fd40 	bl	8000f9c <BSP_LCD_Init>
  //set the layer buffer address into SDRAM
  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 800051c:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000520:	2001      	movs	r0, #1
 8000522:	f000 fdbd 	bl	80010a0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);//select on which layer we write
 8000526:	2001      	movs	r0, #1
 8000528:	f000 fe1e 	bl	8001168 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();//turn on LCD
 800052c:	f000 ffd0 	bl	80014d0 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLUE);//clear the LCD on blue color
 8000530:	4833      	ldr	r0, [pc, #204]	; (8000600 <main+0xfc>)
 8000532:	f000 fe8b 	bl	800124c <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 8000536:	4832      	ldr	r0, [pc, #200]	; (8000600 <main+0xfc>)
 8000538:	f000 fe3e 	bl	80011b8 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 800053c:	f04f 30ff 	mov.w	r0, #4294967295
 8000540:	f000 fe22 	bl	8001188 <BSP_LCD_SetTextColor>
  //write text
  BSP_LCD_DisplayStringAtLine(1,"Good evening");
 8000544:	492f      	ldr	r1, [pc, #188]	; (8000604 <main+0x100>)
 8000546:	2001      	movs	r0, #1
 8000548:	f000 ffaa 	bl	80014a0 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(2,"it's too dark here");
 800054c:	492e      	ldr	r1, [pc, #184]	; (8000608 <main+0x104>)
 800054e:	2002      	movs	r0, #2
 8000550:	f000 ffa6 	bl	80014a0 <BSP_LCD_DisplayStringAtLine>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (strcmp(data,"Hello STM") == 0){
 8000554:	492d      	ldr	r1, [pc, #180]	; (800060c <main+0x108>)
 8000556:	482e      	ldr	r0, [pc, #184]	; (8000610 <main+0x10c>)
 8000558:	f7ff fe48 	bl	80001ec <strcmp>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d108      	bne.n	8000574 <main+0x70>
		  BSP_LCD_DisplayStringAtLine(3,"Do you want to");
 8000562:	492c      	ldr	r1, [pc, #176]	; (8000614 <main+0x110>)
 8000564:	2003      	movs	r0, #3
 8000566:	f000 ff9b 	bl	80014a0 <BSP_LCD_DisplayStringAtLine>
	  	  BSP_LCD_DisplayStringAtLine(4,"turn on light");}
 800056a:	492b      	ldr	r1, [pc, #172]	; (8000618 <main+0x114>)
 800056c:	2004      	movs	r0, #4
 800056e:	f000 ff97 	bl	80014a0 <BSP_LCD_DisplayStringAtLine>
 8000572:	e7ef      	b.n	8000554 <main+0x50>
	  else if (strcmp(data,"Turn on LED 3") == 0)
 8000574:	4929      	ldr	r1, [pc, #164]	; (800061c <main+0x118>)
 8000576:	4826      	ldr	r0, [pc, #152]	; (8000610 <main+0x10c>)
 8000578:	f7ff fe38 	bl	80001ec <strcmp>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d106      	bne.n	8000590 <main+0x8c>
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 8000582:	2201      	movs	r2, #1
 8000584:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000588:	4825      	ldr	r0, [pc, #148]	; (8000620 <main+0x11c>)
 800058a:	f002 fb11 	bl	8002bb0 <HAL_GPIO_WritePin>
 800058e:	e7e1      	b.n	8000554 <main+0x50>
	  else if (strcmp(data,"Turn on LED 4") == 0)
 8000590:	4924      	ldr	r1, [pc, #144]	; (8000624 <main+0x120>)
 8000592:	481f      	ldr	r0, [pc, #124]	; (8000610 <main+0x10c>)
 8000594:	f7ff fe2a 	bl	80001ec <strcmp>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d106      	bne.n	80005ac <main+0xa8>
	  		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 800059e:	2201      	movs	r2, #1
 80005a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a4:	481e      	ldr	r0, [pc, #120]	; (8000620 <main+0x11c>)
 80005a6:	f002 fb03 	bl	8002bb0 <HAL_GPIO_WritePin>
 80005aa:	e7d3      	b.n	8000554 <main+0x50>
	  else if (strcmp(data,"Turn off LED 3") == 0)
 80005ac:	491e      	ldr	r1, [pc, #120]	; (8000628 <main+0x124>)
 80005ae:	4818      	ldr	r0, [pc, #96]	; (8000610 <main+0x10c>)
 80005b0:	f7ff fe1c 	bl	80001ec <strcmp>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d106      	bne.n	80005c8 <main+0xc4>
	  		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c0:	4817      	ldr	r0, [pc, #92]	; (8000620 <main+0x11c>)
 80005c2:	f002 faf5 	bl	8002bb0 <HAL_GPIO_WritePin>
 80005c6:	e7c5      	b.n	8000554 <main+0x50>
	  else if (strcmp(data,"Turn off LED 4") == 0)
 80005c8:	4918      	ldr	r1, [pc, #96]	; (800062c <main+0x128>)
 80005ca:	4811      	ldr	r0, [pc, #68]	; (8000610 <main+0x10c>)
 80005cc:	f7ff fe0e 	bl	80001ec <strcmp>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d106      	bne.n	80005e4 <main+0xe0>
	  		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005dc:	4810      	ldr	r0, [pc, #64]	; (8000620 <main+0x11c>)
 80005de:	f002 fae7 	bl	8002bb0 <HAL_GPIO_WritePin>
 80005e2:	e7b7      	b.n	8000554 <main+0x50>
	  else if (strcmp(data,"Good night") == 0)
 80005e4:	4912      	ldr	r1, [pc, #72]	; (8000630 <main+0x12c>)
 80005e6:	480a      	ldr	r0, [pc, #40]	; (8000610 <main+0x10c>)
 80005e8:	f7ff fe00 	bl	80001ec <strcmp>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d1b0      	bne.n	8000554 <main+0x50>
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80005f8:	4809      	ldr	r0, [pc, #36]	; (8000620 <main+0x11c>)
 80005fa:	f002 fad9 	bl	8002bb0 <HAL_GPIO_WritePin>
	  if (strcmp(data,"Hello STM") == 0){
 80005fe:	e7a9      	b.n	8000554 <main+0x50>
 8000600:	ff0000ff 	.word	0xff0000ff
 8000604:	0800a484 	.word	0x0800a484
 8000608:	0800a494 	.word	0x0800a494
 800060c:	0800a4a8 	.word	0x0800a4a8
 8000610:	20000160 	.word	0x20000160
 8000614:	0800a4b4 	.word	0x0800a4b4
 8000618:	0800a4c4 	.word	0x0800a4c4
 800061c:	0800a4d4 	.word	0x0800a4d4
 8000620:	40021800 	.word	0x40021800
 8000624:	0800a4e4 	.word	0x0800a4e4
 8000628:	0800a4f4 	.word	0x0800a4f4
 800062c:	0800a504 	.word	0x0800a504
 8000630:	0800a514 	.word	0x0800a514

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	; 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	; 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f009 ff0a 	bl	800a45c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	4b28      	ldr	r3, [pc, #160]	; (8000700 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	4a27      	ldr	r2, [pc, #156]	; (8000700 <SystemClock_Config+0xcc>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	; 0x40
 8000668:	4b25      	ldr	r3, [pc, #148]	; (8000700 <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b22      	ldr	r3, [pc, #136]	; (8000704 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a21      	ldr	r2, [pc, #132]	; (8000704 <SystemClock_Config+0xd0>)
 800067e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000690:	2301      	movs	r3, #1
 8000692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000694:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069a:	2302      	movs	r3, #2
 800069c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a4:	2308      	movs	r3, #8
 80006a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b2:	2307      	movs	r3, #7
 80006b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b6:	f107 0320 	add.w	r3, r7, #32
 80006ba:	4618      	mov	r0, r3
 80006bc:	f003 ffe8 	bl	8004690 <HAL_RCC_OscConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006c6:	f000 f871 	bl	80007ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ca:	230f      	movs	r3, #15
 80006cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ce:	2302      	movs	r3, #2
 80006d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80006dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2105      	movs	r1, #5
 80006e8:	4618      	mov	r0, r3
 80006ea:	f004 fa49 	bl	8004b80 <HAL_RCC_ClockConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006f4:	f000 f85a 	bl	80007ac <Error_Handler>
  }
}
 80006f8:	bf00      	nop
 80006fa:	3750      	adds	r7, #80	; 0x50
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <MX_GPIO_Init+0x9c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <MX_GPIO_Init+0x9c>)
 8000728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <MX_GPIO_Init+0x9c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_GPIO_Init+0x9c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a18      	ldr	r2, [pc, #96]	; (80007a4 <MX_GPIO_Init+0x9c>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_GPIO_Init+0x9c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_GPIO_Init+0x9c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a11      	ldr	r2, [pc, #68]	; (80007a4 <MX_GPIO_Init+0x9c>)
 8000760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_GPIO_Init+0x9c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000778:	480b      	ldr	r0, [pc, #44]	; (80007a8 <MX_GPIO_Init+0xa0>)
 800077a:	f002 fa19 	bl	8002bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800077e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000782:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800078c:	2302      	movs	r3, #2
 800078e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	4619      	mov	r1, r3
 8000796:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_GPIO_Init+0xa0>)
 8000798:	f002 f85e 	bl	8002858 <HAL_GPIO_Init>

}
 800079c:	bf00      	nop
 800079e:	3720      	adds	r7, #32
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40021800 	.word	0x40021800

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <Error_Handler+0x8>
	...

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <HAL_MspInit+0x4c>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c6:	4a0f      	ldr	r2, [pc, #60]	; (8000804 <HAL_MspInit+0x4c>)
 80007c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007cc:	6453      	str	r3, [r2, #68]	; 0x44
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <HAL_MspInit+0x4c>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <HAL_MspInit+0x4c>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e2:	4a08      	ldr	r2, [pc, #32]	; (8000804 <HAL_MspInit+0x4c>)
 80007e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_MspInit+0x4c>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800080c:	e7fe      	b.n	800080c <NMI_Handler+0x4>

0800080e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <HardFault_Handler+0x4>

08000814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <MemManage_Handler+0x4>

0800081a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <BusFault_Handler+0x4>

08000820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <UsageFault_Handler+0x4>

08000826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000854:	f001 fa56 	bl	8001d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}

0800085c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000860:	4802      	ldr	r0, [pc, #8]	; (800086c <OTG_HS_IRQHandler+0x10>)
 8000862:	f002 fde8 	bl	8003436 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200018ac 	.word	0x200018ac

08000870 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <SystemInit+0x20>)
 8000876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800087a:	4a05      	ldr	r2, [pc, #20]	; (8000890 <SystemInit+0x20>)
 800087c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000880:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000894:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008cc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000898:	480d      	ldr	r0, [pc, #52]	; (80008d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800089a:	490e      	ldr	r1, [pc, #56]	; (80008d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800089c:	4a0e      	ldr	r2, [pc, #56]	; (80008d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a0:	e002      	b.n	80008a8 <LoopCopyDataInit>

080008a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008a6:	3304      	adds	r3, #4

080008a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ac:	d3f9      	bcc.n	80008a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ae:	4a0b      	ldr	r2, [pc, #44]	; (80008dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008b0:	4c0b      	ldr	r4, [pc, #44]	; (80008e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b4:	e001      	b.n	80008ba <LoopFillZerobss>

080008b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b8:	3204      	adds	r2, #4

080008ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008bc:	d3fb      	bcc.n	80008b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008be:	f7ff ffd7 	bl	8000870 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008c2:	f009 fd99 	bl	800a3f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008c6:	f7ff fe1d 	bl	8000504 <main>
  bx  lr    
 80008ca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80008cc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80008d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d4:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 80008d8:	0800c048 	.word	0x0800c048
  ldr r2, =_sbss
 80008dc:	20000144 	.word	0x20000144
  ldr r4, =_ebss
 80008e0:	20001fd8 	.word	0x20001fd8

080008e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008e4:	e7fe      	b.n	80008e4 <ADC_IRQHandler>

080008e6 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80008ea:	f000 fa5d 	bl	8000da8 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80008ee:	20ca      	movs	r0, #202	; 0xca
 80008f0:	f000 f95d 	bl	8000bae <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80008f4:	20c3      	movs	r0, #195	; 0xc3
 80008f6:	f000 f967 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80008fa:	2008      	movs	r0, #8
 80008fc:	f000 f964 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8000900:	2050      	movs	r0, #80	; 0x50
 8000902:	f000 f961 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8000906:	20cf      	movs	r0, #207	; 0xcf
 8000908:	f000 f951 	bl	8000bae <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800090c:	2000      	movs	r0, #0
 800090e:	f000 f95b 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8000912:	20c1      	movs	r0, #193	; 0xc1
 8000914:	f000 f958 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8000918:	2030      	movs	r0, #48	; 0x30
 800091a:	f000 f955 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800091e:	20ed      	movs	r0, #237	; 0xed
 8000920:	f000 f945 	bl	8000bae <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8000924:	2064      	movs	r0, #100	; 0x64
 8000926:	f000 f94f 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800092a:	2003      	movs	r0, #3
 800092c:	f000 f94c 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8000930:	2012      	movs	r0, #18
 8000932:	f000 f949 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8000936:	2081      	movs	r0, #129	; 0x81
 8000938:	f000 f946 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 800093c:	20e8      	movs	r0, #232	; 0xe8
 800093e:	f000 f936 	bl	8000bae <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8000942:	2085      	movs	r0, #133	; 0x85
 8000944:	f000 f940 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000948:	2000      	movs	r0, #0
 800094a:	f000 f93d 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800094e:	2078      	movs	r0, #120	; 0x78
 8000950:	f000 f93a 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8000954:	20cb      	movs	r0, #203	; 0xcb
 8000956:	f000 f92a 	bl	8000bae <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800095a:	2039      	movs	r0, #57	; 0x39
 800095c:	f000 f934 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8000960:	202c      	movs	r0, #44	; 0x2c
 8000962:	f000 f931 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000966:	2000      	movs	r0, #0
 8000968:	f000 f92e 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800096c:	2034      	movs	r0, #52	; 0x34
 800096e:	f000 f92b 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8000972:	2002      	movs	r0, #2
 8000974:	f000 f928 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8000978:	20f7      	movs	r0, #247	; 0xf7
 800097a:	f000 f918 	bl	8000bae <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800097e:	2020      	movs	r0, #32
 8000980:	f000 f922 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8000984:	20ea      	movs	r0, #234	; 0xea
 8000986:	f000 f912 	bl	8000bae <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800098a:	2000      	movs	r0, #0
 800098c:	f000 f91c 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000990:	2000      	movs	r0, #0
 8000992:	f000 f919 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8000996:	20b1      	movs	r0, #177	; 0xb1
 8000998:	f000 f909 	bl	8000bae <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800099c:	2000      	movs	r0, #0
 800099e:	f000 f913 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80009a2:	201b      	movs	r0, #27
 80009a4:	f000 f910 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80009a8:	20b6      	movs	r0, #182	; 0xb6
 80009aa:	f000 f900 	bl	8000bae <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80009ae:	200a      	movs	r0, #10
 80009b0:	f000 f90a 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80009b4:	20a2      	movs	r0, #162	; 0xa2
 80009b6:	f000 f907 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80009ba:	20c0      	movs	r0, #192	; 0xc0
 80009bc:	f000 f8f7 	bl	8000bae <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80009c0:	2010      	movs	r0, #16
 80009c2:	f000 f901 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80009c6:	20c1      	movs	r0, #193	; 0xc1
 80009c8:	f000 f8f1 	bl	8000bae <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80009cc:	2010      	movs	r0, #16
 80009ce:	f000 f8fb 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80009d2:	20c5      	movs	r0, #197	; 0xc5
 80009d4:	f000 f8eb 	bl	8000bae <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80009d8:	2045      	movs	r0, #69	; 0x45
 80009da:	f000 f8f5 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80009de:	2015      	movs	r0, #21
 80009e0:	f000 f8f2 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80009e4:	20c7      	movs	r0, #199	; 0xc7
 80009e6:	f000 f8e2 	bl	8000bae <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80009ea:	2090      	movs	r0, #144	; 0x90
 80009ec:	f000 f8ec 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80009f0:	2036      	movs	r0, #54	; 0x36
 80009f2:	f000 f8dc 	bl	8000bae <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80009f6:	20c8      	movs	r0, #200	; 0xc8
 80009f8:	f000 f8e6 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80009fc:	20f2      	movs	r0, #242	; 0xf2
 80009fe:	f000 f8d6 	bl	8000bae <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000a02:	2000      	movs	r0, #0
 8000a04:	f000 f8e0 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8000a08:	20b0      	movs	r0, #176	; 0xb0
 8000a0a:	f000 f8d0 	bl	8000bae <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8000a0e:	20c2      	movs	r0, #194	; 0xc2
 8000a10:	f000 f8da 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000a14:	20b6      	movs	r0, #182	; 0xb6
 8000a16:	f000 f8ca 	bl	8000bae <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000a1a:	200a      	movs	r0, #10
 8000a1c:	f000 f8d4 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8000a20:	20a7      	movs	r0, #167	; 0xa7
 8000a22:	f000 f8d1 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8000a26:	2027      	movs	r0, #39	; 0x27
 8000a28:	f000 f8ce 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000a2c:	2004      	movs	r0, #4
 8000a2e:	f000 f8cb 	bl	8000bc8 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8000a32:	202a      	movs	r0, #42	; 0x2a
 8000a34:	f000 f8bb 	bl	8000bae <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f000 f8c5 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f000 f8c2 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000a44:	2000      	movs	r0, #0
 8000a46:	f000 f8bf 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8000a4a:	20ef      	movs	r0, #239	; 0xef
 8000a4c:	f000 f8bc 	bl	8000bc8 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8000a50:	202b      	movs	r0, #43	; 0x2b
 8000a52:	f000 f8ac 	bl	8000bae <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000a56:	2000      	movs	r0, #0
 8000a58:	f000 f8b6 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f000 f8b3 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8000a62:	2001      	movs	r0, #1
 8000a64:	f000 f8b0 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8000a68:	203f      	movs	r0, #63	; 0x3f
 8000a6a:	f000 f8ad 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8000a6e:	20f6      	movs	r0, #246	; 0xf6
 8000a70:	f000 f89d 	bl	8000bae <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000a74:	2001      	movs	r0, #1
 8000a76:	f000 f8a7 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f000 f8a4 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8000a80:	2006      	movs	r0, #6
 8000a82:	f000 f8a1 	bl	8000bc8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8000a86:	202c      	movs	r0, #44	; 0x2c
 8000a88:	f000 f891 	bl	8000bae <ili9341_WriteReg>
  LCD_Delay(200);
 8000a8c:	20c8      	movs	r0, #200	; 0xc8
 8000a8e:	f000 fa79 	bl	8000f84 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8000a92:	2026      	movs	r0, #38	; 0x26
 8000a94:	f000 f88b 	bl	8000bae <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000a98:	2001      	movs	r0, #1
 8000a9a:	f000 f895 	bl	8000bc8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8000a9e:	20e0      	movs	r0, #224	; 0xe0
 8000aa0:	f000 f885 	bl	8000bae <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8000aa4:	200f      	movs	r0, #15
 8000aa6:	f000 f88f 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8000aaa:	2029      	movs	r0, #41	; 0x29
 8000aac:	f000 f88c 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8000ab0:	2024      	movs	r0, #36	; 0x24
 8000ab2:	f000 f889 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000ab6:	200c      	movs	r0, #12
 8000ab8:	f000 f886 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8000abc:	200e      	movs	r0, #14
 8000abe:	f000 f883 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000ac2:	2009      	movs	r0, #9
 8000ac4:	f000 f880 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8000ac8:	204e      	movs	r0, #78	; 0x4e
 8000aca:	f000 f87d 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000ace:	2078      	movs	r0, #120	; 0x78
 8000ad0:	f000 f87a 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8000ad4:	203c      	movs	r0, #60	; 0x3c
 8000ad6:	f000 f877 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000ada:	2009      	movs	r0, #9
 8000adc:	f000 f874 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8000ae0:	2013      	movs	r0, #19
 8000ae2:	f000 f871 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000ae6:	2005      	movs	r0, #5
 8000ae8:	f000 f86e 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8000aec:	2017      	movs	r0, #23
 8000aee:	f000 f86b 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000af2:	2011      	movs	r0, #17
 8000af4:	f000 f868 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000af8:	2000      	movs	r0, #0
 8000afa:	f000 f865 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8000afe:	20e1      	movs	r0, #225	; 0xe1
 8000b00:	f000 f855 	bl	8000bae <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000b04:	2000      	movs	r0, #0
 8000b06:	f000 f85f 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8000b0a:	2016      	movs	r0, #22
 8000b0c:	f000 f85c 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000b10:	201b      	movs	r0, #27
 8000b12:	f000 f859 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000b16:	2004      	movs	r0, #4
 8000b18:	f000 f856 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000b1c:	2011      	movs	r0, #17
 8000b1e:	f000 f853 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8000b22:	2007      	movs	r0, #7
 8000b24:	f000 f850 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8000b28:	2031      	movs	r0, #49	; 0x31
 8000b2a:	f000 f84d 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8000b2e:	2033      	movs	r0, #51	; 0x33
 8000b30:	f000 f84a 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8000b34:	2042      	movs	r0, #66	; 0x42
 8000b36:	f000 f847 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000b3a:	2005      	movs	r0, #5
 8000b3c:	f000 f844 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000b40:	200c      	movs	r0, #12
 8000b42:	f000 f841 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8000b46:	200a      	movs	r0, #10
 8000b48:	f000 f83e 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8000b4c:	2028      	movs	r0, #40	; 0x28
 8000b4e:	f000 f83b 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8000b52:	202f      	movs	r0, #47	; 0x2f
 8000b54:	f000 f838 	bl	8000bc8 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8000b58:	200f      	movs	r0, #15
 8000b5a:	f000 f835 	bl	8000bc8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8000b5e:	2011      	movs	r0, #17
 8000b60:	f000 f825 	bl	8000bae <ili9341_WriteReg>
  LCD_Delay(200);
 8000b64:	20c8      	movs	r0, #200	; 0xc8
 8000b66:	f000 fa0d 	bl	8000f84 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000b6a:	2029      	movs	r0, #41	; 0x29
 8000b6c:	f000 f81f 	bl	8000bae <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8000b70:	202c      	movs	r0, #44	; 0x2c
 8000b72:	f000 f81c 	bl	8000bae <ili9341_WriteReg>
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8000b7e:	f000 f913 	bl	8000da8 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8000b82:	2103      	movs	r1, #3
 8000b84:	20d3      	movs	r0, #211	; 0xd3
 8000b86:	f000 f82c 	bl	8000be2 <ili9341_ReadData>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	b29b      	uxth	r3, r3
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000b96:	2029      	movs	r0, #41	; 0x29
 8000b98:	f000 f809 	bl	8000bae <ili9341_WriteReg>
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8000ba4:	2028      	movs	r0, #40	; 0x28
 8000ba6:	f000 f802 	bl	8000bae <ili9341_WriteReg>
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}

08000bae <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 f98e 	bl	8000edc <LCD_IO_WriteReg>
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8000bd2:	88fb      	ldrh	r3, [r7, #6]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 f95f 	bl	8000e98 <LCD_IO_WriteData>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	4603      	mov	r3, r0
 8000bea:	460a      	mov	r2, r1
 8000bec:	80fb      	strh	r3, [r7, #6]
 8000bee:	4613      	mov	r3, r2
 8000bf0:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8000bf2:	797a      	ldrb	r2, [r7, #5]
 8000bf4:	88fb      	ldrh	r3, [r7, #6]
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f000 f991 	bl	8000f20 <LCD_IO_ReadData>
 8000bfe:	4603      	mov	r3, r0
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8000c0c:	23f0      	movs	r3, #240	; 0xf0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8000c1c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000c30:	4819      	ldr	r0, [pc, #100]	; (8000c98 <SPIx_Init+0x6c>)
 8000c32:	f005 f8ac 	bl	8005d8e <HAL_SPI_GetState>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d12b      	bne.n	8000c94 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8000c3c:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <SPIx_Init+0x6c>)
 8000c3e:	4a17      	ldr	r2, [pc, #92]	; (8000c9c <SPIx_Init+0x70>)
 8000c40:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <SPIx_Init+0x6c>)
 8000c44:	2218      	movs	r2, #24
 8000c46:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8000c48:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <SPIx_Init+0x6c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8000c4e:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <SPIx_Init+0x6c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8000c54:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <SPIx_Init+0x6c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <SPIx_Init+0x6c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000c60:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <SPIx_Init+0x6c>)
 8000c62:	2207      	movs	r2, #7
 8000c64:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8000c66:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <SPIx_Init+0x6c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <SPIx_Init+0x6c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <SPIx_Init+0x6c>)
 8000c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c78:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000c7a:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <SPIx_Init+0x6c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000c80:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <SPIx_Init+0x6c>)
 8000c82:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c86:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8000c88:	4803      	ldr	r0, [pc, #12]	; (8000c98 <SPIx_Init+0x6c>)
 8000c8a:	f000 f853 	bl	8000d34 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000c8e:	4802      	ldr	r0, [pc, #8]	; (8000c98 <SPIx_Init+0x6c>)
 8000c90:	f004 fbc9 	bl	8005426 <HAL_SPI_Init>
  } 
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000174 	.word	0x20000174
 8000c9c:	40015000 	.word	0x40015000

08000ca0 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8000caa:	2300      	movs	r3, #0
 8000cac:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	b29a      	uxth	r2, r3
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <SPIx_Read+0x38>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f107 0108 	add.w	r1, r7, #8
 8000cba:	4808      	ldr	r0, [pc, #32]	; (8000cdc <SPIx_Read+0x3c>)
 8000cbc:	f004 fdb4 	bl	8005828 <HAL_SPI_Receive>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8000cca:	f000 f827 	bl	8000d1c <SPIx_Error>
  }
  
  return readvalue;
 8000cce:	68bb      	ldr	r3, [r7, #8]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	2000003c 	.word	0x2000003c
 8000cdc:	20000174 	.word	0x20000174

08000ce0 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000cea:	2300      	movs	r3, #0
 8000cec:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <SPIx_Write+0x34>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	1db9      	adds	r1, r7, #6
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	4808      	ldr	r0, [pc, #32]	; (8000d18 <SPIx_Write+0x38>)
 8000cf8:	f004 fc5a 	bl	80055b0 <HAL_SPI_Transmit>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8000d06:	f000 f809 	bl	8000d1c <SPIx_Error>
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	2000003c 	.word	0x2000003c
 8000d18:	20000174 	.word	0x20000174

08000d1c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8000d20:	4803      	ldr	r0, [pc, #12]	; (8000d30 <SPIx_Error+0x14>)
 8000d22:	f004 fc09 	bl	8005538 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8000d26:	f7ff ff81 	bl	8000c2c <SPIx_Init>
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000174 	.word	0x20000174

08000d34 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <SPIx_MspInit+0x6c>)
 8000d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d44:	4a16      	ldr	r2, [pc, #88]	; (8000da0 <SPIx_MspInit+0x6c>)
 8000d46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d4a:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4c:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <SPIx_MspInit+0x6c>)
 8000d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <SPIx_MspInit+0x6c>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d60:	4a0f      	ldr	r2, [pc, #60]	; (8000da0 <SPIx_MspInit+0x6c>)
 8000d62:	f043 0320 	orr.w	r3, r3, #32
 8000d66:	6313      	str	r3, [r2, #48]	; 0x30
 8000d68:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <SPIx_MspInit+0x6c>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6c:	f003 0320 	and.w	r3, r3, #32
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8000d74:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8000d82:	2301      	movs	r3, #1
 8000d84:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8000d86:	2305      	movs	r3, #5
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4804      	ldr	r0, [pc, #16]	; (8000da4 <SPIx_MspInit+0x70>)
 8000d92:	f001 fd61 	bl	8002858 <HAL_GPIO_Init>
}
 8000d96:	bf00      	nop
 8000d98:	3728      	adds	r7, #40	; 0x28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40021400 	.word	0x40021400

08000da8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8000dae:	4b36      	ldr	r3, [pc, #216]	; (8000e88 <LCD_IO_Init+0xe0>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d164      	bne.n	8000e80 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8000db6:	4b34      	ldr	r3, [pc, #208]	; (8000e88 <LCD_IO_Init+0xe0>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	4b32      	ldr	r3, [pc, #200]	; (8000e8c <LCD_IO_Init+0xe4>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc4:	4a31      	ldr	r2, [pc, #196]	; (8000e8c <LCD_IO_Init+0xe4>)
 8000dc6:	f043 0308 	orr.w	r3, r3, #8
 8000dca:	6313      	str	r3, [r2, #48]	; 0x30
 8000dcc:	4b2f      	ldr	r3, [pc, #188]	; (8000e8c <LCD_IO_Init+0xe4>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd0:	f003 0308 	and.w	r3, r3, #8
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8000dd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ddc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000de6:	2302      	movs	r3, #2
 8000de8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	4619      	mov	r1, r3
 8000df0:	4827      	ldr	r0, [pc, #156]	; (8000e90 <LCD_IO_Init+0xe8>)
 8000df2:	f001 fd31 	bl	8002858 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	4b24      	ldr	r3, [pc, #144]	; (8000e8c <LCD_IO_Init+0xe4>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a23      	ldr	r2, [pc, #140]	; (8000e8c <LCD_IO_Init+0xe4>)
 8000e00:	f043 0308 	orr.w	r3, r3, #8
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <LCD_IO_Init+0xe4>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0308 	and.w	r3, r3, #8
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8000e12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000e20:	2302      	movs	r3, #2
 8000e22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4819      	ldr	r0, [pc, #100]	; (8000e90 <LCD_IO_Init+0xe8>)
 8000e2c:	f001 fd14 	bl	8002858 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	603b      	str	r3, [r7, #0]
 8000e34:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <LCD_IO_Init+0xe4>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	4a14      	ldr	r2, [pc, #80]	; (8000e8c <LCD_IO_Init+0xe4>)
 8000e3a:	f043 0304 	orr.w	r3, r3, #4
 8000e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <LCD_IO_Init+0xe4>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	603b      	str	r3, [r7, #0]
 8000e4a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	4619      	mov	r1, r3
 8000e62:	480c      	ldr	r0, [pc, #48]	; (8000e94 <LCD_IO_Init+0xec>)
 8000e64:	f001 fcf8 	bl	8002858 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	4809      	ldr	r0, [pc, #36]	; (8000e94 <LCD_IO_Init+0xec>)
 8000e6e:	f001 fe9f 	bl	8002bb0 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8000e72:	2201      	movs	r2, #1
 8000e74:	2104      	movs	r1, #4
 8000e76:	4807      	ldr	r0, [pc, #28]	; (8000e94 <LCD_IO_Init+0xec>)
 8000e78:	f001 fe9a 	bl	8002bb0 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8000e7c:	f7ff fed6 	bl	8000c2c <SPIx_Init>
  }
}
 8000e80:	bf00      	nop
 8000e82:	3720      	adds	r7, #32
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	200001cc 	.word	0x200001cc
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020c00 	.word	0x40020c00
 8000e94:	40020800 	.word	0x40020800

08000e98 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ea8:	480a      	ldr	r0, [pc, #40]	; (8000ed4 <LCD_IO_WriteData+0x3c>)
 8000eaa:	f001 fe81 	bl	8002bb0 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2104      	movs	r1, #4
 8000eb2:	4809      	ldr	r0, [pc, #36]	; (8000ed8 <LCD_IO_WriteData+0x40>)
 8000eb4:	f001 fe7c 	bl	8002bb0 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff ff10 	bl	8000ce0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	4804      	ldr	r0, [pc, #16]	; (8000ed8 <LCD_IO_WriteData+0x40>)
 8000ec6:	f001 fe73 	bl	8002bb0 <HAL_GPIO_WritePin>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40020c00 	.word	0x40020c00
 8000ed8:	40020800 	.word	0x40020800

08000edc <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eec:	480a      	ldr	r0, [pc, #40]	; (8000f18 <LCD_IO_WriteReg+0x3c>)
 8000eee:	f001 fe5f 	bl	8002bb0 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2104      	movs	r1, #4
 8000ef6:	4809      	ldr	r0, [pc, #36]	; (8000f1c <LCD_IO_WriteReg+0x40>)
 8000ef8:	f001 fe5a 	bl	8002bb0 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff feed 	bl	8000ce0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000f06:	2201      	movs	r2, #1
 8000f08:	2104      	movs	r1, #4
 8000f0a:	4804      	ldr	r0, [pc, #16]	; (8000f1c <LCD_IO_WriteReg+0x40>)
 8000f0c:	f001 fe50 	bl	8002bb0 <HAL_GPIO_WritePin>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40020c00 	.word	0x40020c00
 8000f1c:	40020800 	.word	0x40020800

08000f20 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	460a      	mov	r2, r1
 8000f2a:	80fb      	strh	r3, [r7, #6]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8000f34:	2200      	movs	r2, #0
 8000f36:	2104      	movs	r1, #4
 8000f38:	4810      	ldr	r0, [pc, #64]	; (8000f7c <LCD_IO_ReadData+0x5c>)
 8000f3a:	f001 fe39 	bl	8002bb0 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f44:	480e      	ldr	r0, [pc, #56]	; (8000f80 <LCD_IO_ReadData+0x60>)
 8000f46:	f001 fe33 	bl	8002bb0 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fec7 	bl	8000ce0 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8000f52:	797b      	ldrb	r3, [r7, #5]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fea3 	bl	8000ca0 <SPIx_Read>
 8000f5a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f62:	4807      	ldr	r0, [pc, #28]	; (8000f80 <LCD_IO_ReadData+0x60>)
 8000f64:	f001 fe24 	bl	8002bb0 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2104      	movs	r1, #4
 8000f6c:	4803      	ldr	r0, [pc, #12]	; (8000f7c <LCD_IO_ReadData+0x5c>)
 8000f6e:	f001 fe1f 	bl	8002bb0 <HAL_GPIO_WritePin>
  
  return readvalue;
 8000f72:	68fb      	ldr	r3, [r7, #12]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40020800 	.word	0x40020800
 8000f80:	40020c00 	.word	0x40020c00

08000f84 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f000 fed9 	bl	8001d44 <HAL_Delay>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8000fa0:	4b2d      	ldr	r3, [pc, #180]	; (8001058 <BSP_LCD_Init+0xbc>)
 8000fa2:	4a2e      	ldr	r2, [pc, #184]	; (800105c <BSP_LCD_Init+0xc0>)
 8000fa4:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8000fa6:	4b2c      	ldr	r3, [pc, #176]	; (8001058 <BSP_LCD_Init+0xbc>)
 8000fa8:	2209      	movs	r2, #9
 8000faa:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8000fac:	4b2a      	ldr	r3, [pc, #168]	; (8001058 <BSP_LCD_Init+0xbc>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8000fb2:	4b29      	ldr	r3, [pc, #164]	; (8001058 <BSP_LCD_Init+0xbc>)
 8000fb4:	221d      	movs	r2, #29
 8000fb6:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8000fb8:	4b27      	ldr	r3, [pc, #156]	; (8001058 <BSP_LCD_Init+0xbc>)
 8000fba:	2203      	movs	r2, #3
 8000fbc:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8000fbe:	4b26      	ldr	r3, [pc, #152]	; (8001058 <BSP_LCD_Init+0xbc>)
 8000fc0:	f240 120d 	movw	r2, #269	; 0x10d
 8000fc4:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8000fc6:	4b24      	ldr	r3, [pc, #144]	; (8001058 <BSP_LCD_Init+0xbc>)
 8000fc8:	f240 1243 	movw	r2, #323	; 0x143
 8000fcc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8000fce:	4b22      	ldr	r3, [pc, #136]	; (8001058 <BSP_LCD_Init+0xbc>)
 8000fd0:	f240 1217 	movw	r2, #279	; 0x117
 8000fd4:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8000fd6:	4b20      	ldr	r3, [pc, #128]	; (8001058 <BSP_LCD_Init+0xbc>)
 8000fd8:	f240 1247 	movw	r2, #327	; 0x147
 8000fdc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8000fde:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <BSP_LCD_Init+0xbc>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <BSP_LCD_Init+0xbc>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8000fee:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <BSP_LCD_Init+0xbc>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <BSP_LCD_Init+0xc4>)
 8000ff8:	2208      	movs	r2, #8
 8000ffa:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000ffc:	4b18      	ldr	r3, [pc, #96]	; (8001060 <BSP_LCD_Init+0xc4>)
 8000ffe:	22c0      	movs	r2, #192	; 0xc0
 8001000:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001002:	4b17      	ldr	r3, [pc, #92]	; (8001060 <BSP_LCD_Init+0xc4>)
 8001004:	2204      	movs	r2, #4
 8001006:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001008:	4b15      	ldr	r3, [pc, #84]	; (8001060 <BSP_LCD_Init+0xc4>)
 800100a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800100e:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8001010:	4813      	ldr	r0, [pc, #76]	; (8001060 <BSP_LCD_Init+0xc4>)
 8001012:	f003 ffad 	bl	8004f70 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <BSP_LCD_Init+0xbc>)
 8001018:	2200      	movs	r2, #0
 800101a:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <BSP_LCD_Init+0xbc>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <BSP_LCD_Init+0xbc>)
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <BSP_LCD_Init+0xbc>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 800102e:	f000 fa5f 	bl	80014f0 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8001032:	4809      	ldr	r0, [pc, #36]	; (8001058 <BSP_LCD_Init+0xbc>)
 8001034:	f001 fdd6 	bl	8002be4 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8001038:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <BSP_LCD_Init+0xc8>)
 800103a:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <BSP_LCD_Init+0xcc>)
 800103c:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <BSP_LCD_Init+0xc8>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8001046:	f000 fc41 	bl	80018cc <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800104a:	4808      	ldr	r0, [pc, #32]	; (800106c <BSP_LCD_Init+0xd0>)
 800104c:	f000 f8ce 	bl	80011ec <BSP_LCD_SetFont>

  return LCD_OK;
 8001050:	2300      	movs	r3, #0
}  
 8001052:	4618      	mov	r0, r3
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200001d0 	.word	0x200001d0
 800105c:	40016800 	.word	0x40016800
 8001060:	200002b8 	.word	0x200002b8
 8001064:	20000304 	.word	0x20000304
 8001068:	20000004 	.word	0x20000004
 800106c:	20000040 	.word	0x20000040

08001070 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <BSP_LCD_GetXSize+0x14>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800107a:	4798      	blx	r3
 800107c:	4603      	mov	r3, r0
}
 800107e:	4618      	mov	r0, r3
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000304 	.word	0x20000304

08001088 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <BSP_LCD_GetYSize+0x14>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001092:	4798      	blx	r3
 8001094:	4603      	mov	r3, r0
}
 8001096:	4618      	mov	r0, r3
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000304 	.word	0x20000304

080010a0 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b090      	sub	sp, #64	; 0x40
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80010b0:	f7ff ffde 	bl	8001070 <BSP_LCD_GetXSize>
 80010b4:	4603      	mov	r3, r0
 80010b6:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80010bc:	f7ff ffe4 	bl	8001088 <BSP_LCD_GetYSize>
 80010c0:	4603      	mov	r3, r0
 80010c2:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80010cc:	23ff      	movs	r3, #255	; 0xff
 80010ce:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80010e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80010ec:	2307      	movs	r3, #7
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80010f0:	f7ff ffbe 	bl	8001070 <BSP_LCD_GetXSize>
 80010f4:	4603      	mov	r3, r0
 80010f6:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80010f8:	f7ff ffc6 	bl	8001088 <BSP_LCD_GetYSize>
 80010fc:	4603      	mov	r3, r0
 80010fe:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8001100:	88fa      	ldrh	r2, [r7, #6]
 8001102:	f107 030c 	add.w	r3, r7, #12
 8001106:	4619      	mov	r1, r3
 8001108:	4814      	ldr	r0, [pc, #80]	; (800115c <BSP_LCD_LayerDefaultInit+0xbc>)
 800110a:	f001 fe45 	bl	8002d98 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800110e:	88fa      	ldrh	r2, [r7, #6]
 8001110:	4913      	ldr	r1, [pc, #76]	; (8001160 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001112:	4613      	mov	r3, r2
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	4413      	add	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	440b      	add	r3, r1
 800111c:	3304      	adds	r3, #4
 800111e:	f04f 32ff 	mov.w	r2, #4294967295
 8001122:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001124:	88fa      	ldrh	r2, [r7, #6]
 8001126:	490e      	ldr	r1, [pc, #56]	; (8001160 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001128:	4613      	mov	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	440b      	add	r3, r1
 8001132:	3308      	adds	r3, #8
 8001134:	4a0b      	ldr	r2, [pc, #44]	; (8001164 <BSP_LCD_LayerDefaultInit+0xc4>)
 8001136:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001138:	88fa      	ldrh	r2, [r7, #6]
 800113a:	4909      	ldr	r1, [pc, #36]	; (8001160 <BSP_LCD_LayerDefaultInit+0xc0>)
 800113c:	4613      	mov	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4413      	add	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	440b      	add	r3, r1
 8001146:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800114a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 800114c:	4803      	ldr	r0, [pc, #12]	; (800115c <BSP_LCD_LayerDefaultInit+0xbc>)
 800114e:	f001 fe61 	bl	8002e14 <HAL_LTDC_EnableDither>
}
 8001152:	bf00      	nop
 8001154:	3740      	adds	r7, #64	; 0x40
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200001d0 	.word	0x200001d0
 8001160:	200002ec 	.word	0x200002ec
 8001164:	20000040 	.word	0x20000040

08001168 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <BSP_LCD_SelectLayer+0x1c>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6013      	str	r3, [r2, #0]
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	200002e8 	.word	0x200002e8

08001188 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <BSP_LCD_SetTextColor+0x28>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4907      	ldr	r1, [pc, #28]	; (80011b4 <BSP_LCD_SetTextColor+0x2c>)
 8001196:	4613      	mov	r3, r2
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	4413      	add	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	440b      	add	r3, r1
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	601a      	str	r2, [r3, #0]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	200002e8 	.word	0x200002e8
 80011b4:	200002ec 	.word	0x200002ec

080011b8 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <BSP_LCD_SetBackColor+0x2c>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4908      	ldr	r1, [pc, #32]	; (80011e8 <BSP_LCD_SetBackColor+0x30>)
 80011c6:	4613      	mov	r3, r2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	4413      	add	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	440b      	add	r3, r1
 80011d0:	3304      	adds	r3, #4
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	601a      	str	r2, [r3, #0]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	200002e8 	.word	0x200002e8
 80011e8:	200002ec 	.word	0x200002ec

080011ec <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <BSP_LCD_SetFont+0x2c>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4908      	ldr	r1, [pc, #32]	; (800121c <BSP_LCD_SetFont+0x30>)
 80011fa:	4613      	mov	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4413      	add	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	440b      	add	r3, r1
 8001204:	3308      	adds	r3, #8
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	601a      	str	r2, [r3, #0]
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	200002e8 	.word	0x200002e8
 800121c:	200002ec 	.word	0x200002ec

08001220 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8001224:	4b07      	ldr	r3, [pc, #28]	; (8001244 <BSP_LCD_GetFont+0x24>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4907      	ldr	r1, [pc, #28]	; (8001248 <BSP_LCD_GetFont+0x28>)
 800122a:	4613      	mov	r3, r2
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	4413      	add	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	440b      	add	r3, r1
 8001234:	3308      	adds	r3, #8
 8001236:	681b      	ldr	r3, [r3, #0]
}
 8001238:	4618      	mov	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	200002e8 	.word	0x200002e8
 8001248:	200002ec 	.word	0x200002ec

0800124c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800124c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124e:	b085      	sub	sp, #20
 8001250:	af02      	add	r7, sp, #8
 8001252:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <BSP_LCD_Clear+0x48>)
 8001256:	681c      	ldr	r4, [r3, #0]
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <BSP_LCD_Clear+0x48>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <BSP_LCD_Clear+0x4c>)
 800125e:	2134      	movs	r1, #52	; 0x34
 8001260:	fb01 f303 	mul.w	r3, r1, r3
 8001264:	4413      	add	r3, r2
 8001266:	335c      	adds	r3, #92	; 0x5c
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	461e      	mov	r6, r3
 800126c:	f7ff ff00 	bl	8001070 <BSP_LCD_GetXSize>
 8001270:	4605      	mov	r5, r0
 8001272:	f7ff ff09 	bl	8001088 <BSP_LCD_GetYSize>
 8001276:	4602      	mov	r2, r0
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	9301      	str	r3, [sp, #4]
 800127c:	2300      	movs	r3, #0
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	4613      	mov	r3, r2
 8001282:	462a      	mov	r2, r5
 8001284:	4631      	mov	r1, r6
 8001286:	4620      	mov	r0, r4
 8001288:	f000 fae8 	bl	800185c <FillBuffer>
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001294:	200002e8 	.word	0x200002e8
 8001298:	200001d0 	.word	0x200001d0

0800129c <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	80fb      	strh	r3, [r7, #6]
 80012a6:	460b      	mov	r3, r1
 80012a8:	80bb      	strh	r3, [r7, #4]
 80012aa:	4613      	mov	r3, r2
 80012ac:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80012ae:	4b1b      	ldr	r3, [pc, #108]	; (800131c <BSP_LCD_DisplayChar+0x80>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	491b      	ldr	r1, [pc, #108]	; (8001320 <BSP_LCD_DisplayChar+0x84>)
 80012b4:	4613      	mov	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	440b      	add	r3, r1
 80012be:	3308      	adds	r3, #8
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6819      	ldr	r1, [r3, #0]
 80012c4:	78fb      	ldrb	r3, [r7, #3]
 80012c6:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80012ca:	4b14      	ldr	r3, [pc, #80]	; (800131c <BSP_LCD_DisplayChar+0x80>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4c14      	ldr	r4, [pc, #80]	; (8001320 <BSP_LCD_DisplayChar+0x84>)
 80012d0:	4613      	mov	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4413      	add	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4423      	add	r3, r4
 80012da:	3308      	adds	r3, #8
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80012e0:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80012e4:	4b0d      	ldr	r3, [pc, #52]	; (800131c <BSP_LCD_DisplayChar+0x80>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4c0d      	ldr	r4, [pc, #52]	; (8001320 <BSP_LCD_DisplayChar+0x84>)
 80012ea:	4613      	mov	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4423      	add	r3, r4
 80012f4:	3308      	adds	r3, #8
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	889b      	ldrh	r3, [r3, #4]
 80012fa:	3307      	adds	r3, #7
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	da00      	bge.n	8001302 <BSP_LCD_DisplayChar+0x66>
 8001300:	3307      	adds	r3, #7
 8001302:	10db      	asrs	r3, r3, #3
 8001304:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001308:	18ca      	adds	r2, r1, r3
 800130a:	88b9      	ldrh	r1, [r7, #4]
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	4618      	mov	r0, r3
 8001310:	f000 f9ea 	bl	80016e8 <DrawChar>
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	bd90      	pop	{r4, r7, pc}
 800131c:	200002e8 	.word	0x200002e8
 8001320:	200002ec 	.word	0x200002ec

08001324 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8001324:	b5b0      	push	{r4, r5, r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0
 800132a:	60ba      	str	r2, [r7, #8]
 800132c:	461a      	mov	r2, r3
 800132e:	4603      	mov	r3, r0
 8001330:	81fb      	strh	r3, [r7, #14]
 8001332:	460b      	mov	r3, r1
 8001334:	81bb      	strh	r3, [r7, #12]
 8001336:	4613      	mov	r3, r2
 8001338:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800133a:	2301      	movs	r3, #1
 800133c:	83fb      	strh	r3, [r7, #30]
 800133e:	2300      	movs	r3, #0
 8001340:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001342:	2300      	movs	r3, #0
 8001344:	61bb      	str	r3, [r7, #24]
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800134e:	e002      	b.n	8001356 <BSP_LCD_DisplayStringAt+0x32>
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	3301      	adds	r3, #1
 8001354:	61bb      	str	r3, [r7, #24]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	1c5a      	adds	r2, r3, #1
 800135a:	617a      	str	r2, [r7, #20]
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f6      	bne.n	8001350 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001362:	f7ff fe85 	bl	8001070 <BSP_LCD_GetXSize>
 8001366:	4601      	mov	r1, r0
 8001368:	4b4b      	ldr	r3, [pc, #300]	; (8001498 <BSP_LCD_DisplayStringAt+0x174>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	484b      	ldr	r0, [pc, #300]	; (800149c <BSP_LCD_DisplayStringAt+0x178>)
 800136e:	4613      	mov	r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	4413      	add	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4403      	add	r3, r0
 8001378:	3308      	adds	r3, #8
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	889b      	ldrh	r3, [r3, #4]
 800137e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001382:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	2b03      	cmp	r3, #3
 8001388:	d01c      	beq.n	80013c4 <BSP_LCD_DisplayStringAt+0xa0>
 800138a:	2b03      	cmp	r3, #3
 800138c:	dc33      	bgt.n	80013f6 <BSP_LCD_DisplayStringAt+0xd2>
 800138e:	2b01      	cmp	r3, #1
 8001390:	d002      	beq.n	8001398 <BSP_LCD_DisplayStringAt+0x74>
 8001392:	2b02      	cmp	r3, #2
 8001394:	d019      	beq.n	80013ca <BSP_LCD_DisplayStringAt+0xa6>
 8001396:	e02e      	b.n	80013f6 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	1ad1      	subs	r1, r2, r3
 800139e:	4b3e      	ldr	r3, [pc, #248]	; (8001498 <BSP_LCD_DisplayStringAt+0x174>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	483e      	ldr	r0, [pc, #248]	; (800149c <BSP_LCD_DisplayStringAt+0x178>)
 80013a4:	4613      	mov	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4413      	add	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4403      	add	r3, r0
 80013ae:	3308      	adds	r3, #8
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	889b      	ldrh	r3, [r3, #4]
 80013b4:	fb01 f303 	mul.w	r3, r1, r3
 80013b8:	085b      	lsrs	r3, r3, #1
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	89fb      	ldrh	r3, [r7, #14]
 80013be:	4413      	add	r3, r2
 80013c0:	83fb      	strh	r3, [r7, #30]
      break;
 80013c2:	e01b      	b.n	80013fc <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80013c4:	89fb      	ldrh	r3, [r7, #14]
 80013c6:	83fb      	strh	r3, [r7, #30]
      break;
 80013c8:	e018      	b.n	80013fc <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	b299      	uxth	r1, r3
 80013d2:	4b31      	ldr	r3, [pc, #196]	; (8001498 <BSP_LCD_DisplayStringAt+0x174>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4831      	ldr	r0, [pc, #196]	; (800149c <BSP_LCD_DisplayStringAt+0x178>)
 80013d8:	4613      	mov	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4403      	add	r3, r0
 80013e2:	3308      	adds	r3, #8
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	889b      	ldrh	r3, [r3, #4]
 80013e8:	fb11 f303 	smulbb	r3, r1, r3
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	89fb      	ldrh	r3, [r7, #14]
 80013f0:	4413      	add	r3, r2
 80013f2:	83fb      	strh	r3, [r7, #30]
      break;
 80013f4:	e002      	b.n	80013fc <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 80013f6:	89fb      	ldrh	r3, [r7, #14]
 80013f8:	83fb      	strh	r3, [r7, #30]
      break;
 80013fa:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80013fc:	e01a      	b.n	8001434 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	781a      	ldrb	r2, [r3, #0]
 8001402:	89b9      	ldrh	r1, [r7, #12]
 8001404:	8bfb      	ldrh	r3, [r7, #30]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff ff48 	bl	800129c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 800140c:	4b22      	ldr	r3, [pc, #136]	; (8001498 <BSP_LCD_DisplayStringAt+0x174>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4922      	ldr	r1, [pc, #136]	; (800149c <BSP_LCD_DisplayStringAt+0x178>)
 8001412:	4613      	mov	r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	4413      	add	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	440b      	add	r3, r1
 800141c:	3308      	adds	r3, #8
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	889a      	ldrh	r2, [r3, #4]
 8001422:	8bfb      	ldrh	r3, [r7, #30]
 8001424:	4413      	add	r3, r2
 8001426:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	3301      	adds	r3, #1
 800142c:	60bb      	str	r3, [r7, #8]
    i++;
 800142e:	8bbb      	ldrh	r3, [r7, #28]
 8001430:	3301      	adds	r3, #1
 8001432:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	bf14      	ite	ne
 800143c:	2301      	movne	r3, #1
 800143e:	2300      	moveq	r3, #0
 8001440:	b2dc      	uxtb	r4, r3
 8001442:	f7ff fe15 	bl	8001070 <BSP_LCD_GetXSize>
 8001446:	8bb9      	ldrh	r1, [r7, #28]
 8001448:	4b13      	ldr	r3, [pc, #76]	; (8001498 <BSP_LCD_DisplayStringAt+0x174>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4d13      	ldr	r5, [pc, #76]	; (800149c <BSP_LCD_DisplayStringAt+0x178>)
 800144e:	4613      	mov	r3, r2
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	4413      	add	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	442b      	add	r3, r5
 8001458:	3308      	adds	r3, #8
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	889b      	ldrh	r3, [r3, #4]
 800145e:	fb01 f303 	mul.w	r3, r1, r3
 8001462:	1ac3      	subs	r3, r0, r3
 8001464:	b299      	uxth	r1, r3
 8001466:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <BSP_LCD_DisplayStringAt+0x174>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	480c      	ldr	r0, [pc, #48]	; (800149c <BSP_LCD_DisplayStringAt+0x178>)
 800146c:	4613      	mov	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4413      	add	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4403      	add	r3, r0
 8001476:	3308      	adds	r3, #8
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	889b      	ldrh	r3, [r3, #4]
 800147c:	4299      	cmp	r1, r3
 800147e:	bf2c      	ite	cs
 8001480:	2301      	movcs	r3, #1
 8001482:	2300      	movcc	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	4023      	ands	r3, r4
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1b7      	bne.n	80013fe <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 800148e:	bf00      	nop
 8001490:	bf00      	nop
 8001492:	3720      	adds	r7, #32
 8001494:	46bd      	mov	sp, r7
 8001496:	bdb0      	pop	{r4, r5, r7, pc}
 8001498:	200002e8 	.word	0x200002e8
 800149c:	200002ec 	.word	0x200002ec

080014a0 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	6039      	str	r1, [r7, #0]
 80014aa:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80014ac:	f7ff feb8 	bl	8001220 <BSP_LCD_GetFont>
 80014b0:	4603      	mov	r3, r0
 80014b2:	88db      	ldrh	r3, [r3, #6]
 80014b4:	88fa      	ldrh	r2, [r7, #6]
 80014b6:	fb12 f303 	smulbb	r3, r2, r3
 80014ba:	b299      	uxth	r1, r3
 80014bc:	2303      	movs	r3, #3
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	2000      	movs	r0, #0
 80014c2:	f7ff ff2f 	bl	8001324 <BSP_LCD_DisplayStringAt>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <BSP_LCD_DisplayOn+0x1c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80014de:	4b03      	ldr	r3, [pc, #12]	; (80014ec <BSP_LCD_DisplayOn+0x1c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	4798      	blx	r3
  }
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000304 	.word	0x20000304

080014f0 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08e      	sub	sp, #56	; 0x38
 80014f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	623b      	str	r3, [r7, #32]
 80014fa:	4b61      	ldr	r3, [pc, #388]	; (8001680 <BSP_LCD_MspInit+0x190>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	4a60      	ldr	r2, [pc, #384]	; (8001680 <BSP_LCD_MspInit+0x190>)
 8001500:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001504:	6453      	str	r3, [r2, #68]	; 0x44
 8001506:	4b5e      	ldr	r3, [pc, #376]	; (8001680 <BSP_LCD_MspInit+0x190>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800150e:	623b      	str	r3, [r7, #32]
 8001510:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
 8001516:	4b5a      	ldr	r3, [pc, #360]	; (8001680 <BSP_LCD_MspInit+0x190>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a59      	ldr	r2, [pc, #356]	; (8001680 <BSP_LCD_MspInit+0x190>)
 800151c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b57      	ldr	r3, [pc, #348]	; (8001680 <BSP_LCD_MspInit+0x190>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800152a:	61fb      	str	r3, [r7, #28]
 800152c:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
 8001532:	4b53      	ldr	r3, [pc, #332]	; (8001680 <BSP_LCD_MspInit+0x190>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a52      	ldr	r2, [pc, #328]	; (8001680 <BSP_LCD_MspInit+0x190>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b50      	ldr	r3, [pc, #320]	; (8001680 <BSP_LCD_MspInit+0x190>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	61bb      	str	r3, [r7, #24]
 8001548:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	4b4c      	ldr	r3, [pc, #304]	; (8001680 <BSP_LCD_MspInit+0x190>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a4b      	ldr	r2, [pc, #300]	; (8001680 <BSP_LCD_MspInit+0x190>)
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b49      	ldr	r3, [pc, #292]	; (8001680 <BSP_LCD_MspInit+0x190>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	4b45      	ldr	r3, [pc, #276]	; (8001680 <BSP_LCD_MspInit+0x190>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a44      	ldr	r2, [pc, #272]	; (8001680 <BSP_LCD_MspInit+0x190>)
 8001570:	f043 0304 	orr.w	r3, r3, #4
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b42      	ldr	r3, [pc, #264]	; (8001680 <BSP_LCD_MspInit+0x190>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	4b3e      	ldr	r3, [pc, #248]	; (8001680 <BSP_LCD_MspInit+0x190>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a3d      	ldr	r2, [pc, #244]	; (8001680 <BSP_LCD_MspInit+0x190>)
 800158c:	f043 0308 	orr.w	r3, r3, #8
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b3b      	ldr	r3, [pc, #236]	; (8001680 <BSP_LCD_MspInit+0x190>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	4b37      	ldr	r3, [pc, #220]	; (8001680 <BSP_LCD_MspInit+0x190>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a36      	ldr	r2, [pc, #216]	; (8001680 <BSP_LCD_MspInit+0x190>)
 80015a8:	f043 0320 	orr.w	r3, r3, #32
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b34      	ldr	r3, [pc, #208]	; (8001680 <BSP_LCD_MspInit+0x190>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0320 	and.w	r3, r3, #32
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	4b30      	ldr	r3, [pc, #192]	; (8001680 <BSP_LCD_MspInit+0x190>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	4a2f      	ldr	r2, [pc, #188]	; (8001680 <BSP_LCD_MspInit+0x190>)
 80015c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015c8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ca:	4b2d      	ldr	r3, [pc, #180]	; (8001680 <BSP_LCD_MspInit+0x190>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80015d6:	f641 0358 	movw	r3, #6232	; 0x1858
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80015e4:	2302      	movs	r3, #2
 80015e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80015e8:	230e      	movs	r3, #14
 80015ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80015ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f0:	4619      	mov	r1, r3
 80015f2:	4824      	ldr	r0, [pc, #144]	; (8001684 <BSP_LCD_MspInit+0x194>)
 80015f4:	f001 f930 	bl	8002858 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80015f8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80015fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001602:	4619      	mov	r1, r3
 8001604:	4820      	ldr	r0, [pc, #128]	; (8001688 <BSP_LCD_MspInit+0x198>)
 8001606:	f001 f927 	bl	8002858 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800160a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001614:	4619      	mov	r1, r3
 8001616:	481d      	ldr	r0, [pc, #116]	; (800168c <BSP_LCD_MspInit+0x19c>)
 8001618:	f001 f91e 	bl	8002858 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800161c:	2348      	movs	r3, #72	; 0x48
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001624:	4619      	mov	r1, r3
 8001626:	481a      	ldr	r0, [pc, #104]	; (8001690 <BSP_LCD_MspInit+0x1a0>)
 8001628:	f001 f916 	bl	8002858 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800162c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8001632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001636:	4619      	mov	r1, r3
 8001638:	4816      	ldr	r0, [pc, #88]	; (8001694 <BSP_LCD_MspInit+0x1a4>)
 800163a:	f001 f90d 	bl	8002858 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800163e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001648:	4619      	mov	r1, r3
 800164a:	4813      	ldr	r0, [pc, #76]	; (8001698 <BSP_LCD_MspInit+0x1a8>)
 800164c:	f001 f904 	bl	8002858 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001650:	2303      	movs	r3, #3
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001654:	2309      	movs	r3, #9
 8001656:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165c:	4619      	mov	r1, r3
 800165e:	480a      	ldr	r0, [pc, #40]	; (8001688 <BSP_LCD_MspInit+0x198>)
 8001660:	f001 f8fa 	bl	8002858 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001664:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800166a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166e:	4619      	mov	r1, r3
 8001670:	4809      	ldr	r0, [pc, #36]	; (8001698 <BSP_LCD_MspInit+0x1a8>)
 8001672:	f001 f8f1 	bl	8002858 <HAL_GPIO_Init>
}
 8001676:	bf00      	nop
 8001678:	3738      	adds	r7, #56	; 0x38
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800
 8001684:	40020000 	.word	0x40020000
 8001688:	40020400 	.word	0x40020400
 800168c:	40020800 	.word	0x40020800
 8001690:	40020c00 	.word	0x40020c00
 8001694:	40021400 	.word	0x40021400
 8001698:	40021800 	.word	0x40021800

0800169c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800169c:	b5b0      	push	{r4, r5, r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	603a      	str	r2, [r7, #0]
 80016a6:	80fb      	strh	r3, [r7, #6]
 80016a8:	460b      	mov	r3, r1
 80016aa:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <BSP_LCD_DrawPixel+0x44>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0c      	ldr	r2, [pc, #48]	; (80016e4 <BSP_LCD_DrawPixel+0x48>)
 80016b2:	2134      	movs	r1, #52	; 0x34
 80016b4:	fb01 f303 	mul.w	r3, r1, r3
 80016b8:	4413      	add	r3, r2
 80016ba:	335c      	adds	r3, #92	; 0x5c
 80016bc:	681c      	ldr	r4, [r3, #0]
 80016be:	88bd      	ldrh	r5, [r7, #4]
 80016c0:	f7ff fcd6 	bl	8001070 <BSP_LCD_GetXSize>
 80016c4:	4603      	mov	r3, r0
 80016c6:	fb03 f205 	mul.w	r2, r3, r5
 80016ca:	88fb      	ldrh	r3, [r7, #6]
 80016cc:	4413      	add	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4423      	add	r3, r4
 80016d2:	461a      	mov	r2, r3
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	6013      	str	r3, [r2, #0]
}
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bdb0      	pop	{r4, r5, r7, pc}
 80016e0:	200002e8 	.word	0x200002e8
 80016e4:	200001d0 	.word	0x200001d0

080016e8 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	603a      	str	r2, [r7, #0]
 80016f2:	80fb      	strh	r3, [r7, #6]
 80016f4:	460b      	mov	r3, r1
 80016f6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]
 80016fc:	2300      	movs	r3, #0
 80016fe:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8001704:	4b53      	ldr	r3, [pc, #332]	; (8001854 <DrawChar+0x16c>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4953      	ldr	r1, [pc, #332]	; (8001858 <DrawChar+0x170>)
 800170a:	4613      	mov	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4413      	add	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	440b      	add	r3, r1
 8001714:	3308      	adds	r3, #8
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	88db      	ldrh	r3, [r3, #6]
 800171a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800171c:	4b4d      	ldr	r3, [pc, #308]	; (8001854 <DrawChar+0x16c>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	494d      	ldr	r1, [pc, #308]	; (8001858 <DrawChar+0x170>)
 8001722:	4613      	mov	r3, r2
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	4413      	add	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	440b      	add	r3, r1
 800172c:	3308      	adds	r3, #8
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	889b      	ldrh	r3, [r3, #4]
 8001732:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8001734:	8a3b      	ldrh	r3, [r7, #16]
 8001736:	3307      	adds	r3, #7
 8001738:	2b00      	cmp	r3, #0
 800173a:	da00      	bge.n	800173e <DrawChar+0x56>
 800173c:	3307      	adds	r3, #7
 800173e:	10db      	asrs	r3, r3, #3
 8001740:	b2db      	uxtb	r3, r3
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	b2da      	uxtb	r2, r3
 8001746:	8a3b      	ldrh	r3, [r7, #16]
 8001748:	b2db      	uxtb	r3, r3
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
 8001752:	e076      	b.n	8001842 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001754:	8a3b      	ldrh	r3, [r7, #16]
 8001756:	3307      	adds	r3, #7
 8001758:	2b00      	cmp	r3, #0
 800175a:	da00      	bge.n	800175e <DrawChar+0x76>
 800175c:	3307      	adds	r3, #7
 800175e:	10db      	asrs	r3, r3, #3
 8001760:	461a      	mov	r2, r3
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	fb02 f303 	mul.w	r3, r2, r3
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	4413      	add	r3, r2
 800176c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800176e:	8a3b      	ldrh	r3, [r7, #16]
 8001770:	3307      	adds	r3, #7
 8001772:	2b00      	cmp	r3, #0
 8001774:	da00      	bge.n	8001778 <DrawChar+0x90>
 8001776:	3307      	adds	r3, #7
 8001778:	10db      	asrs	r3, r3, #3
 800177a:	2b01      	cmp	r3, #1
 800177c:	d002      	beq.n	8001784 <DrawChar+0x9c>
 800177e:	2b02      	cmp	r3, #2
 8001780:	d004      	beq.n	800178c <DrawChar+0xa4>
 8001782:	e00c      	b.n	800179e <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	617b      	str	r3, [r7, #20]
      break;
 800178a:	e016      	b.n	80017ba <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	3201      	adds	r2, #1
 8001796:	7812      	ldrb	r2, [r2, #0]
 8001798:	4313      	orrs	r3, r2
 800179a:	617b      	str	r3, [r7, #20]
      break;
 800179c:	e00d      	b.n	80017ba <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	041a      	lsls	r2, r3, #16
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	3301      	adds	r3, #1
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	021b      	lsls	r3, r3, #8
 80017ac:	4313      	orrs	r3, r2
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	3202      	adds	r2, #2
 80017b2:	7812      	ldrb	r2, [r2, #0]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	617b      	str	r3, [r7, #20]
      break;
 80017b8:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
 80017be:	e036      	b.n	800182e <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80017c0:	8a3a      	ldrh	r2, [r7, #16]
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	1ad2      	subs	r2, r2, r3
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	4413      	add	r3, r2
 80017ca:	3b01      	subs	r3, #1
 80017cc:	2201      	movs	r2, #1
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	461a      	mov	r2, r3
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	4013      	ands	r3, r2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d012      	beq.n	8001802 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	b29a      	uxth	r2, r3
 80017e0:	88fb      	ldrh	r3, [r7, #6]
 80017e2:	4413      	add	r3, r2
 80017e4:	b298      	uxth	r0, r3
 80017e6:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <DrawChar+0x16c>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	491b      	ldr	r1, [pc, #108]	; (8001858 <DrawChar+0x170>)
 80017ec:	4613      	mov	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4413      	add	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	440b      	add	r3, r1
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	88bb      	ldrh	r3, [r7, #4]
 80017fa:	4619      	mov	r1, r3
 80017fc:	f7ff ff4e 	bl	800169c <BSP_LCD_DrawPixel>
 8001800:	e012      	b.n	8001828 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	b29a      	uxth	r2, r3
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	4413      	add	r3, r2
 800180a:	b298      	uxth	r0, r3
 800180c:	4b11      	ldr	r3, [pc, #68]	; (8001854 <DrawChar+0x16c>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4911      	ldr	r1, [pc, #68]	; (8001858 <DrawChar+0x170>)
 8001812:	4613      	mov	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4413      	add	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	440b      	add	r3, r1
 800181c:	3304      	adds	r3, #4
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	88bb      	ldrh	r3, [r7, #4]
 8001822:	4619      	mov	r1, r3
 8001824:	f7ff ff3a 	bl	800169c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	3301      	adds	r3, #1
 800182c:	61bb      	str	r3, [r7, #24]
 800182e:	8a3b      	ldrh	r3, [r7, #16]
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	429a      	cmp	r2, r3
 8001834:	d3c4      	bcc.n	80017c0 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8001836:	88bb      	ldrh	r3, [r7, #4]
 8001838:	3301      	adds	r3, #1
 800183a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	3301      	adds	r3, #1
 8001840:	61fb      	str	r3, [r7, #28]
 8001842:	8a7b      	ldrh	r3, [r7, #18]
 8001844:	69fa      	ldr	r2, [r7, #28]
 8001846:	429a      	cmp	r2, r3
 8001848:	d384      	bcc.n	8001754 <DrawChar+0x6c>
  }
}
 800184a:	bf00      	nop
 800184c:	bf00      	nop
 800184e:	3720      	adds	r7, #32
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	200002e8 	.word	0x200002e8
 8001858:	200002ec 	.word	0x200002ec

0800185c <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af02      	add	r7, sp, #8
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
 8001868:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800186a:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <FillBuffer+0x68>)
 800186c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001870:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001872:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <FillBuffer+0x68>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8001878:	4a12      	ldr	r2, [pc, #72]	; (80018c4 <FillBuffer+0x68>)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <FillBuffer+0x68>)
 8001880:	4a11      	ldr	r2, [pc, #68]	; (80018c8 <FillBuffer+0x6c>)
 8001882:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8001884:	480f      	ldr	r0, [pc, #60]	; (80018c4 <FillBuffer+0x68>)
 8001886:	f000 fd51 	bl	800232c <HAL_DMA2D_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d115      	bne.n	80018bc <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8001890:	68f9      	ldr	r1, [r7, #12]
 8001892:	480c      	ldr	r0, [pc, #48]	; (80018c4 <FillBuffer+0x68>)
 8001894:	f000 feb2 	bl	80025fc <HAL_DMA2D_ConfigLayer>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10e      	bne.n	80018bc <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800189e:	68ba      	ldr	r2, [r7, #8]
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69f9      	ldr	r1, [r7, #28]
 80018a8:	4806      	ldr	r0, [pc, #24]	; (80018c4 <FillBuffer+0x68>)
 80018aa:	f000 fd92 	bl	80023d2 <HAL_DMA2D_Start>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d103      	bne.n	80018bc <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80018b4:	210a      	movs	r1, #10
 80018b6:	4803      	ldr	r0, [pc, #12]	; (80018c4 <FillBuffer+0x68>)
 80018b8:	f000 fdb6 	bl	8002428 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80018bc:	bf00      	nop
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000278 	.word	0x20000278
 80018c8:	4002b000 	.word	0x4002b000

080018cc <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80018d0:	4b29      	ldr	r3, [pc, #164]	; (8001978 <BSP_SDRAM_Init+0xac>)
 80018d2:	4a2a      	ldr	r2, [pc, #168]	; (800197c <BSP_SDRAM_Init+0xb0>)
 80018d4:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80018d6:	4b2a      	ldr	r3, [pc, #168]	; (8001980 <BSP_SDRAM_Init+0xb4>)
 80018d8:	2202      	movs	r2, #2
 80018da:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80018dc:	4b28      	ldr	r3, [pc, #160]	; (8001980 <BSP_SDRAM_Init+0xb4>)
 80018de:	2207      	movs	r2, #7
 80018e0:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80018e2:	4b27      	ldr	r3, [pc, #156]	; (8001980 <BSP_SDRAM_Init+0xb4>)
 80018e4:	2204      	movs	r2, #4
 80018e6:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80018e8:	4b25      	ldr	r3, [pc, #148]	; (8001980 <BSP_SDRAM_Init+0xb4>)
 80018ea:	2207      	movs	r2, #7
 80018ec:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80018ee:	4b24      	ldr	r3, [pc, #144]	; (8001980 <BSP_SDRAM_Init+0xb4>)
 80018f0:	2202      	movs	r2, #2
 80018f2:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80018f4:	4b22      	ldr	r3, [pc, #136]	; (8001980 <BSP_SDRAM_Init+0xb4>)
 80018f6:	2202      	movs	r2, #2
 80018f8:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80018fa:	4b21      	ldr	r3, [pc, #132]	; (8001980 <BSP_SDRAM_Init+0xb4>)
 80018fc:	2202      	movs	r2, #2
 80018fe:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8001900:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <BSP_SDRAM_Init+0xac>)
 8001902:	2201      	movs	r2, #1
 8001904:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001906:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <BSP_SDRAM_Init+0xac>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800190c:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <BSP_SDRAM_Init+0xac>)
 800190e:	2204      	movs	r2, #4
 8001910:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001912:	4b19      	ldr	r3, [pc, #100]	; (8001978 <BSP_SDRAM_Init+0xac>)
 8001914:	2210      	movs	r2, #16
 8001916:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001918:	4b17      	ldr	r3, [pc, #92]	; (8001978 <BSP_SDRAM_Init+0xac>)
 800191a:	2240      	movs	r2, #64	; 0x40
 800191c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800191e:	4b16      	ldr	r3, [pc, #88]	; (8001978 <BSP_SDRAM_Init+0xac>)
 8001920:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001924:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001926:	4b14      	ldr	r3, [pc, #80]	; (8001978 <BSP_SDRAM_Init+0xac>)
 8001928:	2200      	movs	r2, #0
 800192a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <BSP_SDRAM_Init+0xac>)
 800192e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001932:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8001934:	4b10      	ldr	r3, [pc, #64]	; (8001978 <BSP_SDRAM_Init+0xac>)
 8001936:	2200      	movs	r2, #0
 8001938:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800193a:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <BSP_SDRAM_Init+0xac>)
 800193c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001940:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8001942:	2100      	movs	r1, #0
 8001944:	480c      	ldr	r0, [pc, #48]	; (8001978 <BSP_SDRAM_Init+0xac>)
 8001946:	f000 f87f 	bl	8001a48 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800194a:	490d      	ldr	r1, [pc, #52]	; (8001980 <BSP_SDRAM_Init+0xb4>)
 800194c:	480a      	ldr	r0, [pc, #40]	; (8001978 <BSP_SDRAM_Init+0xac>)
 800194e:	f003 fccf 	bl	80052f0 <HAL_SDRAM_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001958:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <BSP_SDRAM_Init+0xb8>)
 800195a:	2201      	movs	r2, #1
 800195c:	701a      	strb	r2, [r3, #0]
 800195e:	e002      	b.n	8001966 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001960:	4b08      	ldr	r3, [pc, #32]	; (8001984 <BSP_SDRAM_Init+0xb8>)
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001966:	f240 506a 	movw	r0, #1386	; 0x56a
 800196a:	f000 f80d 	bl	8001988 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800196e:	4b05      	ldr	r3, [pc, #20]	; (8001984 <BSP_SDRAM_Init+0xb8>)
 8001970:	781b      	ldrb	r3, [r3, #0]
}
 8001972:	4618      	mov	r0, r3
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000308 	.word	0x20000308
 800197c:	a0000140 	.word	0xa0000140
 8001980:	2000033c 	.word	0x2000033c
 8001984:	20000048 	.word	0x20000048

08001988 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8001994:	4b2a      	ldr	r3, [pc, #168]	; (8001a40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001996:	2201      	movs	r2, #1
 8001998:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800199a:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800199c:	2208      	movs	r2, #8
 800199e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80019a0:	4b27      	ldr	r3, [pc, #156]	; (8001a40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80019a6:	4b26      	ldr	r3, [pc, #152]	; (8001a40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80019ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019b0:	4923      	ldr	r1, [pc, #140]	; (8001a40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019b2:	4824      	ldr	r0, [pc, #144]	; (8001a44 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80019b4:	f003 fcda 	bl	800536c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80019b8:	2001      	movs	r0, #1
 80019ba:	f000 f9c3 	bl	8001d44 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80019be:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019c0:	2202      	movs	r2, #2
 80019c2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80019c4:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019c6:	2208      	movs	r2, #8
 80019c8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80019ca:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80019d0:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80019d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019da:	4919      	ldr	r1, [pc, #100]	; (8001a40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019dc:	4819      	ldr	r0, [pc, #100]	; (8001a44 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80019de:	f003 fcc5 	bl	800536c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80019e2:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019e4:	2203      	movs	r2, #3
 80019e6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80019e8:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019ea:	2208      	movs	r2, #8
 80019ec:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80019ee:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019f0:	2204      	movs	r2, #4
 80019f2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80019fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019fe:	4910      	ldr	r1, [pc, #64]	; (8001a40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001a00:	4810      	ldr	r0, [pc, #64]	; (8001a44 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001a02:	f003 fcb3 	bl	800536c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8001a06:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001a0a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001a0e:	2204      	movs	r2, #4
 8001a10:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001a12:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001a14:	2208      	movs	r2, #8
 8001a16:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001a18:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4a07      	ldr	r2, [pc, #28]	; (8001a40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001a22:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001a24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a28:	4905      	ldr	r1, [pc, #20]	; (8001a40 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001a2a:	4806      	ldr	r0, [pc, #24]	; (8001a44 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001a2c:	f003 fc9e 	bl	800536c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	4804      	ldr	r0, [pc, #16]	; (8001a44 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001a34:	f003 fccf 	bl	80053d6 <HAL_SDRAM_ProgramRefreshRate>
}
 8001a38:	bf00      	nop
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000358 	.word	0x20000358
 8001a44:	20000308 	.word	0x20000308

08001a48 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b090      	sub	sp, #64	; 0x40
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 80ec 	beq.w	8001c32 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a5e:	4b77      	ldr	r3, [pc, #476]	; (8001c3c <BSP_SDRAM_MspInit+0x1f4>)
 8001a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a62:	4a76      	ldr	r2, [pc, #472]	; (8001c3c <BSP_SDRAM_MspInit+0x1f4>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6393      	str	r3, [r2, #56]	; 0x38
 8001a6a:	4b74      	ldr	r3, [pc, #464]	; (8001c3c <BSP_SDRAM_MspInit+0x1f4>)
 8001a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a74:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
 8001a7a:	4b70      	ldr	r3, [pc, #448]	; (8001c3c <BSP_SDRAM_MspInit+0x1f4>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a6f      	ldr	r2, [pc, #444]	; (8001c3c <BSP_SDRAM_MspInit+0x1f4>)
 8001a80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b6d      	ldr	r3, [pc, #436]	; (8001c3c <BSP_SDRAM_MspInit+0x1f4>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
 8001a96:	4b69      	ldr	r3, [pc, #420]	; (8001c3c <BSP_SDRAM_MspInit+0x1f4>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a68      	ldr	r2, [pc, #416]	; (8001c3c <BSP_SDRAM_MspInit+0x1f4>)
 8001a9c:	f043 0302 	orr.w	r3, r3, #2
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b66      	ldr	r3, [pc, #408]	; (8001c3c <BSP_SDRAM_MspInit+0x1f4>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	623b      	str	r3, [r7, #32]
 8001aac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
 8001ab2:	4b62      	ldr	r3, [pc, #392]	; (8001c3c <BSP_SDRAM_MspInit+0x1f4>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4a61      	ldr	r2, [pc, #388]	; (8001c3c <BSP_SDRAM_MspInit+0x1f4>)
 8001ab8:	f043 0304 	orr.w	r3, r3, #4
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
 8001abe:	4b5f      	ldr	r3, [pc, #380]	; (8001c3c <BSP_SDRAM_MspInit+0x1f4>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	61fb      	str	r3, [r7, #28]
 8001ac8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	61bb      	str	r3, [r7, #24]
 8001ace:	4b5b      	ldr	r3, [pc, #364]	; (8001c3c <BSP_SDRAM_MspInit+0x1f4>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a5a      	ldr	r2, [pc, #360]	; (8001c3c <BSP_SDRAM_MspInit+0x1f4>)
 8001ad4:	f043 0308 	orr.w	r3, r3, #8
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b58      	ldr	r3, [pc, #352]	; (8001c3c <BSP_SDRAM_MspInit+0x1f4>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	61bb      	str	r3, [r7, #24]
 8001ae4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	4b54      	ldr	r3, [pc, #336]	; (8001c3c <BSP_SDRAM_MspInit+0x1f4>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a53      	ldr	r2, [pc, #332]	; (8001c3c <BSP_SDRAM_MspInit+0x1f4>)
 8001af0:	f043 0310 	orr.w	r3, r3, #16
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b51      	ldr	r3, [pc, #324]	; (8001c3c <BSP_SDRAM_MspInit+0x1f4>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0310 	and.w	r3, r3, #16
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	4b4d      	ldr	r3, [pc, #308]	; (8001c3c <BSP_SDRAM_MspInit+0x1f4>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4a4c      	ldr	r2, [pc, #304]	; (8001c3c <BSP_SDRAM_MspInit+0x1f4>)
 8001b0c:	f043 0320 	orr.w	r3, r3, #32
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4b4a      	ldr	r3, [pc, #296]	; (8001c3c <BSP_SDRAM_MspInit+0x1f4>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f003 0320 	and.w	r3, r3, #32
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	4b46      	ldr	r3, [pc, #280]	; (8001c3c <BSP_SDRAM_MspInit+0x1f4>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a45      	ldr	r2, [pc, #276]	; (8001c3c <BSP_SDRAM_MspInit+0x1f4>)
 8001b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b43      	ldr	r3, [pc, #268]	; (8001c3c <BSP_SDRAM_MspInit+0x1f4>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8001b46:	230c      	movs	r3, #12
 8001b48:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8001b4a:	2360      	movs	r3, #96	; 0x60
 8001b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8001b4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b52:	4619      	mov	r1, r3
 8001b54:	483a      	ldr	r0, [pc, #232]	; (8001c40 <BSP_SDRAM_MspInit+0x1f8>)
 8001b56:	f000 fe7f 	bl	8002858 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8001b5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b62:	4619      	mov	r1, r3
 8001b64:	4837      	ldr	r0, [pc, #220]	; (8001c44 <BSP_SDRAM_MspInit+0x1fc>)
 8001b66:	f000 fe77 	bl	8002858 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8001b6a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001b70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b74:	4619      	mov	r1, r3
 8001b76:	4834      	ldr	r0, [pc, #208]	; (8001c48 <BSP_SDRAM_MspInit+0x200>)
 8001b78:	f000 fe6e 	bl	8002858 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8001b7c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001b80:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8001b82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b86:	4619      	mov	r1, r3
 8001b88:	4830      	ldr	r0, [pc, #192]	; (8001c4c <BSP_SDRAM_MspInit+0x204>)
 8001b8a:	f000 fe65 	bl	8002858 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8001b8e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001b92:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001b94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b98:	4619      	mov	r1, r3
 8001b9a:	482d      	ldr	r0, [pc, #180]	; (8001c50 <BSP_SDRAM_MspInit+0x208>)
 8001b9c:	f000 fe5c 	bl	8002858 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8001ba0:	f248 1333 	movw	r3, #33075	; 0x8133
 8001ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001ba6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001baa:	4619      	mov	r1, r3
 8001bac:	4829      	ldr	r0, [pc, #164]	; (8001c54 <BSP_SDRAM_MspInit+0x20c>)
 8001bae:	f000 fe53 	bl	8002858 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001bb2:	4b29      	ldr	r3, [pc, #164]	; (8001c58 <BSP_SDRAM_MspInit+0x210>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001bb8:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <BSP_SDRAM_MspInit+0x210>)
 8001bba:	2280      	movs	r2, #128	; 0x80
 8001bbc:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001bbe:	4b26      	ldr	r3, [pc, #152]	; (8001c58 <BSP_SDRAM_MspInit+0x210>)
 8001bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bc4:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8001bc6:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <BSP_SDRAM_MspInit+0x210>)
 8001bc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bcc:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001bce:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <BSP_SDRAM_MspInit+0x210>)
 8001bd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bd4:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001bd6:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <BSP_SDRAM_MspInit+0x210>)
 8001bd8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bdc:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8001bde:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <BSP_SDRAM_MspInit+0x210>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001be4:	4b1c      	ldr	r3, [pc, #112]	; (8001c58 <BSP_SDRAM_MspInit+0x210>)
 8001be6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bea:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001bec:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <BSP_SDRAM_MspInit+0x210>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001bf2:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <BSP_SDRAM_MspInit+0x210>)
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001bf8:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <BSP_SDRAM_MspInit+0x210>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001bfe:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <BSP_SDRAM_MspInit+0x210>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8001c04:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <BSP_SDRAM_MspInit+0x210>)
 8001c06:	4a15      	ldr	r2, [pc, #84]	; (8001c5c <BSP_SDRAM_MspInit+0x214>)
 8001c08:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <BSP_SDRAM_MspInit+0x210>)
 8001c0e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c10:	4a11      	ldr	r2, [pc, #68]	; (8001c58 <BSP_SDRAM_MspInit+0x210>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8001c16:	4810      	ldr	r0, [pc, #64]	; (8001c58 <BSP_SDRAM_MspInit+0x210>)
 8001c18:	f000 fa78 	bl	800210c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8001c1c:	480e      	ldr	r0, [pc, #56]	; (8001c58 <BSP_SDRAM_MspInit+0x210>)
 8001c1e:	f000 f9c7 	bl	8001fb0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001c22:	2200      	movs	r2, #0
 8001c24:	210f      	movs	r1, #15
 8001c26:	2038      	movs	r0, #56	; 0x38
 8001c28:	f000 f98b 	bl	8001f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001c2c:	2038      	movs	r0, #56	; 0x38
 8001c2e:	f000 f9a4 	bl	8001f7a <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8001c32:	bf00      	nop
 8001c34:	3740      	adds	r7, #64	; 0x40
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40020400 	.word	0x40020400
 8001c44:	40020800 	.word	0x40020800
 8001c48:	40020c00 	.word	0x40020c00
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40021400 	.word	0x40021400
 8001c54:	40021800 	.word	0x40021800
 8001c58:	20000368 	.word	0x20000368
 8001c5c:	40026410 	.word	0x40026410

08001c60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c64:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <HAL_Init+0x40>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0d      	ldr	r2, [pc, #52]	; (8001ca0 <HAL_Init+0x40>)
 8001c6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <HAL_Init+0x40>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a0a      	ldr	r2, [pc, #40]	; (8001ca0 <HAL_Init+0x40>)
 8001c76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <HAL_Init+0x40>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a07      	ldr	r2, [pc, #28]	; (8001ca0 <HAL_Init+0x40>)
 8001c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c88:	2003      	movs	r0, #3
 8001c8a:	f000 f94f 	bl	8001f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c8e:	200f      	movs	r0, #15
 8001c90:	f000 f808 	bl	8001ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c94:	f7fe fd90 	bl	80007b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40023c00 	.word	0x40023c00

08001ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cac:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <HAL_InitTick+0x54>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <HAL_InitTick+0x58>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 f967 	bl	8001f96 <HAL_SYSTICK_Config>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e00e      	b.n	8001cf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b0f      	cmp	r3, #15
 8001cd6:	d80a      	bhi.n	8001cee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce0:	f000 f92f 	bl	8001f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce4:	4a06      	ldr	r2, [pc, #24]	; (8001d00 <HAL_InitTick+0x5c>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e000      	b.n	8001cf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	20000050 	.word	0x20000050
 8001d00:	2000004c 	.word	0x2000004c

08001d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_IncTick+0x20>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_IncTick+0x24>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4413      	add	r3, r2
 8001d14:	4a04      	ldr	r2, [pc, #16]	; (8001d28 <HAL_IncTick+0x24>)
 8001d16:	6013      	str	r3, [r2, #0]
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000050 	.word	0x20000050
 8001d28:	200003c8 	.word	0x200003c8

08001d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <HAL_GetTick+0x14>)
 8001d32:	681b      	ldr	r3, [r3, #0]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	200003c8 	.word	0x200003c8

08001d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d4c:	f7ff ffee 	bl	8001d2c <HAL_GetTick>
 8001d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d5c:	d005      	beq.n	8001d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <HAL_Delay+0x44>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4413      	add	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d6a:	bf00      	nop
 8001d6c:	f7ff ffde 	bl	8001d2c <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d8f7      	bhi.n	8001d6c <HAL_Delay+0x28>
  {
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000050 	.word	0x20000050

08001d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001da8:	4013      	ands	r3, r2
 8001daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dbe:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	60d3      	str	r3, [r2, #12]
}
 8001dc4:	bf00      	nop
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd8:	4b04      	ldr	r3, [pc, #16]	; (8001dec <__NVIC_GetPriorityGrouping+0x18>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	0a1b      	lsrs	r3, r3, #8
 8001dde:	f003 0307 	and.w	r3, r3, #7
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	db0b      	blt.n	8001e1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	f003 021f 	and.w	r2, r3, #31
 8001e08:	4907      	ldr	r1, [pc, #28]	; (8001e28 <__NVIC_EnableIRQ+0x38>)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	095b      	lsrs	r3, r3, #5
 8001e10:	2001      	movs	r0, #1
 8001e12:	fa00 f202 	lsl.w	r2, r0, r2
 8001e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000e100 	.word	0xe000e100

08001e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	6039      	str	r1, [r7, #0]
 8001e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	db0a      	blt.n	8001e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	490c      	ldr	r1, [pc, #48]	; (8001e78 <__NVIC_SetPriority+0x4c>)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	0112      	lsls	r2, r2, #4
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	440b      	add	r3, r1
 8001e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e54:	e00a      	b.n	8001e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4908      	ldr	r1, [pc, #32]	; (8001e7c <__NVIC_SetPriority+0x50>)
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	3b04      	subs	r3, #4
 8001e64:	0112      	lsls	r2, r2, #4
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	440b      	add	r3, r1
 8001e6a:	761a      	strb	r2, [r3, #24]
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000e100 	.word	0xe000e100
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b089      	sub	sp, #36	; 0x24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f1c3 0307 	rsb	r3, r3, #7
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	bf28      	it	cs
 8001e9e:	2304      	movcs	r3, #4
 8001ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	2b06      	cmp	r3, #6
 8001ea8:	d902      	bls.n	8001eb0 <NVIC_EncodePriority+0x30>
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3b03      	subs	r3, #3
 8001eae:	e000      	b.n	8001eb2 <NVIC_EncodePriority+0x32>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed2:	43d9      	mvns	r1, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed8:	4313      	orrs	r3, r2
         );
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3724      	adds	r7, #36	; 0x24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
	...

08001ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ef8:	d301      	bcc.n	8001efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001efa:	2301      	movs	r3, #1
 8001efc:	e00f      	b.n	8001f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001efe:	4a0a      	ldr	r2, [pc, #40]	; (8001f28 <SysTick_Config+0x40>)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f06:	210f      	movs	r1, #15
 8001f08:	f04f 30ff 	mov.w	r0, #4294967295
 8001f0c:	f7ff ff8e 	bl	8001e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <SysTick_Config+0x40>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f16:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <SysTick_Config+0x40>)
 8001f18:	2207      	movs	r2, #7
 8001f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	e000e010 	.word	0xe000e010

08001f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff ff29 	bl	8001d8c <__NVIC_SetPriorityGrouping>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b086      	sub	sp, #24
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	4603      	mov	r3, r0
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	607a      	str	r2, [r7, #4]
 8001f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f54:	f7ff ff3e 	bl	8001dd4 <__NVIC_GetPriorityGrouping>
 8001f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	68b9      	ldr	r1, [r7, #8]
 8001f5e:	6978      	ldr	r0, [r7, #20]
 8001f60:	f7ff ff8e 	bl	8001e80 <NVIC_EncodePriority>
 8001f64:	4602      	mov	r2, r0
 8001f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ff5d 	bl	8001e2c <__NVIC_SetPriority>
}
 8001f72:	bf00      	nop
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff31 	bl	8001df0 <__NVIC_EnableIRQ>
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ffa2 	bl	8001ee8 <SysTick_Config>
 8001fa4:	4603      	mov	r3, r0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fbc:	f7ff feb6 	bl	8001d2c <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e099      	b.n	8002100 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0201 	bic.w	r2, r2, #1
 8001fea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fec:	e00f      	b.n	800200e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fee:	f7ff fe9d 	bl	8001d2c <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b05      	cmp	r3, #5
 8001ffa:	d908      	bls.n	800200e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2220      	movs	r2, #32
 8002000:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2203      	movs	r2, #3
 8002006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e078      	b.n	8002100 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1e8      	bne.n	8001fee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	4b38      	ldr	r3, [pc, #224]	; (8002108 <HAL_DMA_Init+0x158>)
 8002028:	4013      	ands	r3, r2
 800202a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800203a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002046:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002052:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	4313      	orrs	r3, r2
 800205e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	2b04      	cmp	r3, #4
 8002066:	d107      	bne.n	8002078 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002070:	4313      	orrs	r3, r2
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	4313      	orrs	r3, r2
 8002076:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	f023 0307 	bic.w	r3, r3, #7
 800208e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	4313      	orrs	r3, r2
 8002098:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d117      	bne.n	80020d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00e      	beq.n	80020d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f8bd 	bl	8002234 <DMA_CheckFifoParam>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d008      	beq.n	80020d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2240      	movs	r2, #64	; 0x40
 80020c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80020ce:	2301      	movs	r3, #1
 80020d0:	e016      	b.n	8002100 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f874 	bl	80021c8 <DMA_CalcBaseAndBitshift>
 80020e0:	4603      	mov	r3, r0
 80020e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e8:	223f      	movs	r2, #63	; 0x3f
 80020ea:	409a      	lsls	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	f010803f 	.word	0xf010803f

0800210c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e050      	b.n	80021c0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d101      	bne.n	800212e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800212a:	2302      	movs	r3, #2
 800212c:	e048      	b.n	80021c0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0201 	bic.w	r2, r2, #1
 800213c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2200      	movs	r2, #0
 800214c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2200      	movs	r2, #0
 800215c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2200      	movs	r2, #0
 8002164:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2221      	movs	r2, #33	; 0x21
 800216c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f82a 	bl	80021c8 <DMA_CalcBaseAndBitshift>
 8002174:	4603      	mov	r3, r0
 8002176:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a0:	223f      	movs	r2, #63	; 0x3f
 80021a2:	409a      	lsls	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	3b10      	subs	r3, #16
 80021d8:	4a14      	ldr	r2, [pc, #80]	; (800222c <DMA_CalcBaseAndBitshift+0x64>)
 80021da:	fba2 2303 	umull	r2, r3, r2, r3
 80021de:	091b      	lsrs	r3, r3, #4
 80021e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021e2:	4a13      	ldr	r2, [pc, #76]	; (8002230 <DMA_CalcBaseAndBitshift+0x68>)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4413      	add	r3, r2
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d909      	bls.n	800220a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021fe:	f023 0303 	bic.w	r3, r3, #3
 8002202:	1d1a      	adds	r2, r3, #4
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	659a      	str	r2, [r3, #88]	; 0x58
 8002208:	e007      	b.n	800221a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002212:	f023 0303 	bic.w	r3, r3, #3
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800221e:	4618      	mov	r0, r3
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	aaaaaaab 	.word	0xaaaaaaab
 8002230:	0800c030 	.word	0x0800c030

08002234 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800223c:	2300      	movs	r3, #0
 800223e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002244:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d11f      	bne.n	800228e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2b03      	cmp	r3, #3
 8002252:	d856      	bhi.n	8002302 <DMA_CheckFifoParam+0xce>
 8002254:	a201      	add	r2, pc, #4	; (adr r2, 800225c <DMA_CheckFifoParam+0x28>)
 8002256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225a:	bf00      	nop
 800225c:	0800226d 	.word	0x0800226d
 8002260:	0800227f 	.word	0x0800227f
 8002264:	0800226d 	.word	0x0800226d
 8002268:	08002303 	.word	0x08002303
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d046      	beq.n	8002306 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800227c:	e043      	b.n	8002306 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002282:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002286:	d140      	bne.n	800230a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800228c:	e03d      	b.n	800230a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002296:	d121      	bne.n	80022dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2b03      	cmp	r3, #3
 800229c:	d837      	bhi.n	800230e <DMA_CheckFifoParam+0xda>
 800229e:	a201      	add	r2, pc, #4	; (adr r2, 80022a4 <DMA_CheckFifoParam+0x70>)
 80022a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a4:	080022b5 	.word	0x080022b5
 80022a8:	080022bb 	.word	0x080022bb
 80022ac:	080022b5 	.word	0x080022b5
 80022b0:	080022cd 	.word	0x080022cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	73fb      	strb	r3, [r7, #15]
      break;
 80022b8:	e030      	b.n	800231c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d025      	beq.n	8002312 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022ca:	e022      	b.n	8002312 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022d4:	d11f      	bne.n	8002316 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022da:	e01c      	b.n	8002316 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d903      	bls.n	80022ea <DMA_CheckFifoParam+0xb6>
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	d003      	beq.n	80022f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022e8:	e018      	b.n	800231c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	73fb      	strb	r3, [r7, #15]
      break;
 80022ee:	e015      	b.n	800231c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00e      	beq.n	800231a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002300:	e00b      	b.n	800231a <DMA_CheckFifoParam+0xe6>
      break;
 8002302:	bf00      	nop
 8002304:	e00a      	b.n	800231c <DMA_CheckFifoParam+0xe8>
      break;
 8002306:	bf00      	nop
 8002308:	e008      	b.n	800231c <DMA_CheckFifoParam+0xe8>
      break;
 800230a:	bf00      	nop
 800230c:	e006      	b.n	800231c <DMA_CheckFifoParam+0xe8>
      break;
 800230e:	bf00      	nop
 8002310:	e004      	b.n	800231c <DMA_CheckFifoParam+0xe8>
      break;
 8002312:	bf00      	nop
 8002314:	e002      	b.n	800231c <DMA_CheckFifoParam+0xe8>
      break;   
 8002316:	bf00      	nop
 8002318:	e000      	b.n	800231c <DMA_CheckFifoParam+0xe8>
      break;
 800231a:	bf00      	nop
    }
  } 
  
  return status; 
 800231c:	7bfb      	ldrb	r3, [r7, #15]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop

0800232c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e03b      	b.n	80023b6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d106      	bne.n	8002358 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f833 	bl	80023be <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2202      	movs	r2, #2
 800235c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800237c:	f023 0107 	bic.w	r1, r3, #7
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002396:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	68d1      	ldr	r1, [r2, #12]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6812      	ldr	r2, [r2, #0]
 80023a2:	430b      	orrs	r3, r1
 80023a4:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b086      	sub	sp, #24
 80023d6:	af02      	add	r7, sp, #8
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	607a      	str	r2, [r7, #4]
 80023de:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <HAL_DMA2D_Start+0x1c>
 80023ea:	2302      	movs	r3, #2
 80023ec:	e018      	b.n	8002420 <HAL_DMA2D_Start+0x4e>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2202      	movs	r2, #2
 80023fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	68b9      	ldr	r1, [r7, #8]
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 f989 	bl	8002720 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f042 0201 	orr.w	r2, r2, #1
 800241c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b00      	cmp	r3, #0
 8002442:	d056      	beq.n	80024f2 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002444:	f7ff fc72 	bl	8001d2c <HAL_GetTick>
 8002448:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800244a:	e04b      	b.n	80024e4 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800245a:	2b00      	cmp	r3, #0
 800245c:	d023      	beq.n	80024a6 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f003 0320 	and.w	r3, r3, #32
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246c:	f043 0202 	orr.w	r2, r3, #2
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002482:	f043 0201 	orr.w	r2, r3, #1
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2221      	movs	r2, #33	; 0x21
 8002490:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2204      	movs	r2, #4
 8002496:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e0a5      	b.n	80025f2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ac:	d01a      	beq.n	80024e4 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024ae:	f7ff fc3d 	bl	8001d2c <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d302      	bcc.n	80024c4 <HAL_DMA2D_PollForTransfer+0x9c>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10f      	bne.n	80024e4 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c8:	f043 0220 	orr.w	r2, r3, #32
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2203      	movs	r2, #3
 80024d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e086      	b.n	80025f2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0ac      	beq.n	800244c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	f003 0320 	and.w	r3, r3, #32
 80024fc:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	f003 0320 	and.w	r3, r3, #32
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4313      	orrs	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d061      	beq.n	80025d8 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002514:	f7ff fc0a 	bl	8001d2c <HAL_GetTick>
 8002518:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800251a:	e056      	b.n	80025ca <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800252a:	2b00      	cmp	r3, #0
 800252c:	d02e      	beq.n	800258c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253c:	f043 0204 	orr.w	r2, r3, #4
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f003 0320 	and.w	r3, r3, #32
 800254a:	2b00      	cmp	r3, #0
 800254c:	d005      	beq.n	800255a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002552:	f043 0202 	orr.w	r2, r3, #2
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002568:	f043 0201 	orr.w	r2, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2229      	movs	r2, #41	; 0x29
 8002576:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2204      	movs	r2, #4
 800257c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e032      	b.n	80025f2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002592:	d01a      	beq.n	80025ca <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002594:	f7ff fbca 	bl	8001d2c <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d302      	bcc.n	80025aa <HAL_DMA2D_PollForTransfer+0x182>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10f      	bne.n	80025ca <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ae:	f043 0220 	orr.w	r2, r3, #32
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2203      	movs	r2, #3
 80025ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e013      	b.n	80025f2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 0310 	and.w	r3, r3, #16
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0a1      	beq.n	800251c <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2212      	movs	r2, #18
 80025de:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002614:	2b01      	cmp	r3, #1
 8002616:	d101      	bne.n	800261c <HAL_DMA2D_ConfigLayer+0x20>
 8002618:	2302      	movs	r3, #2
 800261a:	e079      	b.n	8002710 <HAL_DMA2D_ConfigLayer+0x114>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2202      	movs	r2, #2
 8002628:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	3318      	adds	r3, #24
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	4413      	add	r3, r2
 8002636:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	041b      	lsls	r3, r3, #16
 8002642:	4313      	orrs	r3, r2
 8002644:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002646:	4b35      	ldr	r3, [pc, #212]	; (800271c <HAL_DMA2D_ConfigLayer+0x120>)
 8002648:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b0a      	cmp	r3, #10
 8002650:	d003      	beq.n	800265a <HAL_DMA2D_ConfigLayer+0x5e>
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b09      	cmp	r3, #9
 8002658:	d107      	bne.n	800266a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	4313      	orrs	r3, r2
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	e005      	b.n	8002676 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	061b      	lsls	r3, r3, #24
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	4313      	orrs	r3, r2
 8002674:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d120      	bne.n	80026be <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	43db      	mvns	r3, r3
 8002686:	ea02 0103 	and.w	r1, r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	430a      	orrs	r2, r1
 8002692:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b0a      	cmp	r3, #10
 80026a4:	d003      	beq.n	80026ae <HAL_DMA2D_ConfigLayer+0xb2>
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b09      	cmp	r3, #9
 80026ac:	d127      	bne.n	80026fe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80026ba:	629a      	str	r2, [r3, #40]	; 0x28
 80026bc:	e01f      	b.n	80026fe <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	69da      	ldr	r2, [r3, #28]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	ea02 0103 	and.w	r1, r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	6812      	ldr	r2, [r2, #0]
 80026de:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b0a      	cmp	r3, #10
 80026e6:	d003      	beq.n	80026f0 <HAL_DMA2D_ConfigLayer+0xf4>
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2b09      	cmp	r3, #9
 80026ee:	d106      	bne.n	80026fe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80026fc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	371c      	adds	r7, #28
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	ff03000f 	.word	0xff03000f

08002720 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002720:	b480      	push	{r7}
 8002722:	b08b      	sub	sp, #44	; 0x2c
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
 800272c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002734:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	041a      	lsls	r2, r3, #16
 800273c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273e:	431a      	orrs	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002758:	d174      	bne.n	8002844 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002760:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002768:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002770:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d108      	bne.n	8002792 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	431a      	orrs	r2, r3
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	4313      	orrs	r3, r2
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	4313      	orrs	r3, r2
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
 8002790:	e053      	b.n	800283a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d106      	bne.n	80027a8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	4313      	orrs	r3, r2
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
 80027a6:	e048      	b.n	800283a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d111      	bne.n	80027d4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	0cdb      	lsrs	r3, r3, #19
 80027b4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	0a9b      	lsrs	r3, r3, #10
 80027ba:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	08db      	lsrs	r3, r3, #3
 80027c0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	015a      	lsls	r2, r3, #5
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	02db      	lsls	r3, r3, #11
 80027ca:	4313      	orrs	r3, r2
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
 80027d2:	e032      	b.n	800283a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2b03      	cmp	r3, #3
 80027da:	d117      	bne.n	800280c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	0fdb      	lsrs	r3, r3, #31
 80027e0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	0cdb      	lsrs	r3, r3, #19
 80027e6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	0adb      	lsrs	r3, r3, #11
 80027ec:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	08db      	lsrs	r3, r3, #3
 80027f2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	029b      	lsls	r3, r3, #10
 80027fc:	431a      	orrs	r2, r3
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	03db      	lsls	r3, r3, #15
 8002802:	4313      	orrs	r3, r2
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	4313      	orrs	r3, r2
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
 800280a:	e016      	b.n	800283a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	0f1b      	lsrs	r3, r3, #28
 8002810:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	0d1b      	lsrs	r3, r3, #20
 8002816:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	0b1b      	lsrs	r3, r3, #12
 800281c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	011a      	lsls	r2, r3, #4
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	021b      	lsls	r3, r3, #8
 800282c:	431a      	orrs	r2, r3
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	031b      	lsls	r3, r3, #12
 8002832:	4313      	orrs	r3, r2
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	4313      	orrs	r3, r2
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002840:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002842:	e003      	b.n	800284c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	60da      	str	r2, [r3, #12]
}
 800284c:	bf00      	nop
 800284e:	372c      	adds	r7, #44	; 0x2c
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002858:	b480      	push	{r7}
 800285a:	b089      	sub	sp, #36	; 0x24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002866:	2300      	movs	r3, #0
 8002868:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800286a:	2300      	movs	r3, #0
 800286c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
 8002872:	e177      	b.n	8002b64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002874:	2201      	movs	r2, #1
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	4013      	ands	r3, r2
 8002886:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	429a      	cmp	r2, r3
 800288e:	f040 8166 	bne.w	8002b5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	2b01      	cmp	r3, #1
 800289c:	d005      	beq.n	80028aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d130      	bne.n	800290c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	2203      	movs	r2, #3
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43db      	mvns	r3, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4013      	ands	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028e0:	2201      	movs	r2, #1
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	091b      	lsrs	r3, r3, #4
 80028f6:	f003 0201 	and.w	r2, r3, #1
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	2b03      	cmp	r3, #3
 8002916:	d017      	beq.n	8002948 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	2203      	movs	r2, #3
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d123      	bne.n	800299c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	08da      	lsrs	r2, r3, #3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3208      	adds	r2, #8
 800295c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002960:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	220f      	movs	r2, #15
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	08da      	lsrs	r2, r3, #3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	3208      	adds	r2, #8
 8002996:	69b9      	ldr	r1, [r7, #24]
 8002998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	2203      	movs	r2, #3
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 0203 	and.w	r2, r3, #3
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80c0 	beq.w	8002b5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	4b66      	ldr	r3, [pc, #408]	; (8002b7c <HAL_GPIO_Init+0x324>)
 80029e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e6:	4a65      	ldr	r2, [pc, #404]	; (8002b7c <HAL_GPIO_Init+0x324>)
 80029e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ec:	6453      	str	r3, [r2, #68]	; 0x44
 80029ee:	4b63      	ldr	r3, [pc, #396]	; (8002b7c <HAL_GPIO_Init+0x324>)
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029fa:	4a61      	ldr	r2, [pc, #388]	; (8002b80 <HAL_GPIO_Init+0x328>)
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	089b      	lsrs	r3, r3, #2
 8002a00:	3302      	adds	r3, #2
 8002a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	220f      	movs	r2, #15
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a58      	ldr	r2, [pc, #352]	; (8002b84 <HAL_GPIO_Init+0x32c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d037      	beq.n	8002a96 <HAL_GPIO_Init+0x23e>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a57      	ldr	r2, [pc, #348]	; (8002b88 <HAL_GPIO_Init+0x330>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d031      	beq.n	8002a92 <HAL_GPIO_Init+0x23a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a56      	ldr	r2, [pc, #344]	; (8002b8c <HAL_GPIO_Init+0x334>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d02b      	beq.n	8002a8e <HAL_GPIO_Init+0x236>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a55      	ldr	r2, [pc, #340]	; (8002b90 <HAL_GPIO_Init+0x338>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d025      	beq.n	8002a8a <HAL_GPIO_Init+0x232>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a54      	ldr	r2, [pc, #336]	; (8002b94 <HAL_GPIO_Init+0x33c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d01f      	beq.n	8002a86 <HAL_GPIO_Init+0x22e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a53      	ldr	r2, [pc, #332]	; (8002b98 <HAL_GPIO_Init+0x340>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d019      	beq.n	8002a82 <HAL_GPIO_Init+0x22a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a52      	ldr	r2, [pc, #328]	; (8002b9c <HAL_GPIO_Init+0x344>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d013      	beq.n	8002a7e <HAL_GPIO_Init+0x226>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a51      	ldr	r2, [pc, #324]	; (8002ba0 <HAL_GPIO_Init+0x348>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d00d      	beq.n	8002a7a <HAL_GPIO_Init+0x222>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a50      	ldr	r2, [pc, #320]	; (8002ba4 <HAL_GPIO_Init+0x34c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d007      	beq.n	8002a76 <HAL_GPIO_Init+0x21e>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a4f      	ldr	r2, [pc, #316]	; (8002ba8 <HAL_GPIO_Init+0x350>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d101      	bne.n	8002a72 <HAL_GPIO_Init+0x21a>
 8002a6e:	2309      	movs	r3, #9
 8002a70:	e012      	b.n	8002a98 <HAL_GPIO_Init+0x240>
 8002a72:	230a      	movs	r3, #10
 8002a74:	e010      	b.n	8002a98 <HAL_GPIO_Init+0x240>
 8002a76:	2308      	movs	r3, #8
 8002a78:	e00e      	b.n	8002a98 <HAL_GPIO_Init+0x240>
 8002a7a:	2307      	movs	r3, #7
 8002a7c:	e00c      	b.n	8002a98 <HAL_GPIO_Init+0x240>
 8002a7e:	2306      	movs	r3, #6
 8002a80:	e00a      	b.n	8002a98 <HAL_GPIO_Init+0x240>
 8002a82:	2305      	movs	r3, #5
 8002a84:	e008      	b.n	8002a98 <HAL_GPIO_Init+0x240>
 8002a86:	2304      	movs	r3, #4
 8002a88:	e006      	b.n	8002a98 <HAL_GPIO_Init+0x240>
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e004      	b.n	8002a98 <HAL_GPIO_Init+0x240>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e002      	b.n	8002a98 <HAL_GPIO_Init+0x240>
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <HAL_GPIO_Init+0x240>
 8002a96:	2300      	movs	r3, #0
 8002a98:	69fa      	ldr	r2, [r7, #28]
 8002a9a:	f002 0203 	and.w	r2, r2, #3
 8002a9e:	0092      	lsls	r2, r2, #2
 8002aa0:	4093      	lsls	r3, r2
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002aa8:	4935      	ldr	r1, [pc, #212]	; (8002b80 <HAL_GPIO_Init+0x328>)
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	089b      	lsrs	r3, r3, #2
 8002aae:	3302      	adds	r3, #2
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ab6:	4b3d      	ldr	r3, [pc, #244]	; (8002bac <HAL_GPIO_Init+0x354>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ada:	4a34      	ldr	r2, [pc, #208]	; (8002bac <HAL_GPIO_Init+0x354>)
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ae0:	4b32      	ldr	r3, [pc, #200]	; (8002bac <HAL_GPIO_Init+0x354>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b04:	4a29      	ldr	r2, [pc, #164]	; (8002bac <HAL_GPIO_Init+0x354>)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b0a:	4b28      	ldr	r3, [pc, #160]	; (8002bac <HAL_GPIO_Init+0x354>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	43db      	mvns	r3, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4013      	ands	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b2e:	4a1f      	ldr	r2, [pc, #124]	; (8002bac <HAL_GPIO_Init+0x354>)
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b34:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <HAL_GPIO_Init+0x354>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b58:	4a14      	ldr	r2, [pc, #80]	; (8002bac <HAL_GPIO_Init+0x354>)
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	3301      	adds	r3, #1
 8002b62:	61fb      	str	r3, [r7, #28]
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	2b0f      	cmp	r3, #15
 8002b68:	f67f ae84 	bls.w	8002874 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b6c:	bf00      	nop
 8002b6e:	bf00      	nop
 8002b70:	3724      	adds	r7, #36	; 0x24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	40013800 	.word	0x40013800
 8002b84:	40020000 	.word	0x40020000
 8002b88:	40020400 	.word	0x40020400
 8002b8c:	40020800 	.word	0x40020800
 8002b90:	40020c00 	.word	0x40020c00
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40021400 	.word	0x40021400
 8002b9c:	40021800 	.word	0x40021800
 8002ba0:	40021c00 	.word	0x40021c00
 8002ba4:	40022000 	.word	0x40022000
 8002ba8:	40022400 	.word	0x40022400
 8002bac:	40013c00 	.word	0x40013c00

08002bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	807b      	strh	r3, [r7, #2]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bc0:	787b      	ldrb	r3, [r7, #1]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bc6:	887a      	ldrh	r2, [r7, #2]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bcc:	e003      	b.n	8002bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bce:	887b      	ldrh	r3, [r7, #2]
 8002bd0:	041a      	lsls	r2, r3, #16
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	619a      	str	r2, [r3, #24]
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
	...

08002be4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e0bf      	b.n	8002d76 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d106      	bne.n	8002c10 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f8ba 	bl	8002d84 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2202      	movs	r2, #2
 8002c14:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699a      	ldr	r2, [r3, #24]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002c26:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6999      	ldr	r1, [r3, #24]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002c3c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6899      	ldr	r1, [r3, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	4b4a      	ldr	r3, [pc, #296]	; (8002d80 <HAL_LTDC_Init+0x19c>)
 8002c58:	400b      	ands	r3, r1
 8002c5a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	041b      	lsls	r3, r3, #16
 8002c62:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6899      	ldr	r1, [r3, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	699a      	ldr	r2, [r3, #24]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	431a      	orrs	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68d9      	ldr	r1, [r3, #12]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	4b3e      	ldr	r3, [pc, #248]	; (8002d80 <HAL_LTDC_Init+0x19c>)
 8002c86:	400b      	ands	r3, r1
 8002c88:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	041b      	lsls	r3, r3, #16
 8002c90:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68d9      	ldr	r1, [r3, #12]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a1a      	ldr	r2, [r3, #32]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6919      	ldr	r1, [r3, #16]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	4b33      	ldr	r3, [pc, #204]	; (8002d80 <HAL_LTDC_Init+0x19c>)
 8002cb4:	400b      	ands	r3, r1
 8002cb6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	041b      	lsls	r3, r3, #16
 8002cbe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6919      	ldr	r1, [r3, #16]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6959      	ldr	r1, [r3, #20]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	4b27      	ldr	r3, [pc, #156]	; (8002d80 <HAL_LTDC_Init+0x19c>)
 8002ce2:	400b      	ands	r3, r1
 8002ce4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cea:	041b      	lsls	r3, r3, #16
 8002cec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6959      	ldr	r1, [r3, #20]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d0a:	021b      	lsls	r3, r3, #8
 8002d0c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002d14:	041b      	lsls	r3, r3, #16
 8002d16:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002d26:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0206 	orr.w	r2, r2, #6
 8002d52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699a      	ldr	r2, [r3, #24]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0201 	orr.w	r2, r2, #1
 8002d62:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	f000f800 	.word	0xf000f800

08002d84 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002d98:	b5b0      	push	{r4, r5, r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d101      	bne.n	8002db2 <HAL_LTDC_ConfigLayer+0x1a>
 8002dae:	2302      	movs	r3, #2
 8002db0:	e02c      	b.n	8002e0c <HAL_LTDC_ConfigLayer+0x74>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2134      	movs	r1, #52	; 0x34
 8002dc8:	fb01 f303 	mul.w	r3, r1, r3
 8002dcc:	4413      	add	r3, r2
 8002dce:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	4614      	mov	r4, r2
 8002dd6:	461d      	mov	r5, r3
 8002dd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ddc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002de0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002de4:	682b      	ldr	r3, [r5, #0]
 8002de6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	68b9      	ldr	r1, [r7, #8]
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 f83b 	bl	8002e68 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2201      	movs	r2, #1
 8002df8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bdb0      	pop	{r4, r5, r7, pc}

08002e14 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <HAL_LTDC_EnableDither+0x16>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e016      	b.n	8002e58 <HAL_LTDC_EnableDither+0x44>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2202      	movs	r2, #2
 8002e36:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <HAL_LTDC_EnableDither+0x50>)
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	4a09      	ldr	r2, [pc, #36]	; (8002e64 <HAL_LTDC_EnableDither+0x50>)
 8002e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e44:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	40016800 	.word	0x40016800

08002e68 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b089      	sub	sp, #36	; 0x24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	0c1b      	lsrs	r3, r3, #16
 8002e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e84:	4413      	add	r3, r2
 8002e86:	041b      	lsls	r3, r3, #16
 8002e88:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	01db      	lsls	r3, r3, #7
 8002e94:	4413      	add	r3, r2
 8002e96:	3384      	adds	r3, #132	; 0x84
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	6812      	ldr	r2, [r2, #0]
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	01d2      	lsls	r2, r2, #7
 8002ea4:	440a      	add	r2, r1
 8002ea6:	3284      	adds	r2, #132	; 0x84
 8002ea8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002eac:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	0c1b      	lsrs	r3, r3, #16
 8002eba:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002ebe:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002ec0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	01db      	lsls	r3, r3, #7
 8002ecc:	440b      	add	r3, r1
 8002ece:	3384      	adds	r3, #132	; 0x84
 8002ed0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002ed6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ee6:	4413      	add	r3, r2
 8002ee8:	041b      	lsls	r3, r3, #16
 8002eea:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	01db      	lsls	r3, r3, #7
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3384      	adds	r3, #132	; 0x84
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	6812      	ldr	r2, [r2, #0]
 8002f00:	4611      	mov	r1, r2
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	01d2      	lsls	r2, r2, #7
 8002f06:	440a      	add	r2, r1
 8002f08:	3284      	adds	r2, #132	; 0x84
 8002f0a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002f0e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f1e:	4413      	add	r3, r2
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4619      	mov	r1, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	01db      	lsls	r3, r3, #7
 8002f2c:	440b      	add	r3, r1
 8002f2e:	3384      	adds	r3, #132	; 0x84
 8002f30:	4619      	mov	r1, r3
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	01db      	lsls	r3, r3, #7
 8002f42:	4413      	add	r3, r2
 8002f44:	3384      	adds	r3, #132	; 0x84
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	01d2      	lsls	r2, r2, #7
 8002f52:	440a      	add	r2, r1
 8002f54:	3284      	adds	r2, #132	; 0x84
 8002f56:	f023 0307 	bic.w	r3, r3, #7
 8002f5a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	461a      	mov	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	01db      	lsls	r3, r3, #7
 8002f66:	4413      	add	r3, r2
 8002f68:	3384      	adds	r3, #132	; 0x84
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002f78:	021b      	lsls	r3, r3, #8
 8002f7a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002f82:	041b      	lsls	r3, r3, #16
 8002f84:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	061b      	lsls	r3, r3, #24
 8002f8c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	01db      	lsls	r3, r3, #7
 8002f98:	4413      	add	r3, r2
 8002f9a:	3384      	adds	r3, #132	; 0x84
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	01db      	lsls	r3, r3, #7
 8002fa8:	4413      	add	r3, r2
 8002faa:	3384      	adds	r3, #132	; 0x84
 8002fac:	461a      	mov	r2, r3
 8002fae:	2300      	movs	r3, #0
 8002fb0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fb8:	461a      	mov	r2, r3
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	01db      	lsls	r3, r3, #7
 8002fcc:	440b      	add	r3, r1
 8002fce:	3384      	adds	r3, #132	; 0x84
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	01db      	lsls	r3, r3, #7
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3384      	adds	r3, #132	; 0x84
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	6812      	ldr	r2, [r2, #0]
 8002fec:	4611      	mov	r1, r2
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	01d2      	lsls	r2, r2, #7
 8002ff2:	440a      	add	r2, r1
 8002ff4:	3284      	adds	r2, #132	; 0x84
 8002ff6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ffa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	461a      	mov	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	01db      	lsls	r3, r3, #7
 8003006:	4413      	add	r3, r2
 8003008:	3384      	adds	r3, #132	; 0x84
 800300a:	461a      	mov	r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	01db      	lsls	r3, r3, #7
 800301c:	4413      	add	r3, r2
 800301e:	3384      	adds	r3, #132	; 0x84
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	6812      	ldr	r2, [r2, #0]
 8003026:	4611      	mov	r1, r2
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	01d2      	lsls	r2, r2, #7
 800302c:	440a      	add	r2, r1
 800302e:	3284      	adds	r2, #132	; 0x84
 8003030:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003034:	f023 0307 	bic.w	r3, r3, #7
 8003038:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	69da      	ldr	r2, [r3, #28]
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	68f9      	ldr	r1, [r7, #12]
 8003044:	6809      	ldr	r1, [r1, #0]
 8003046:	4608      	mov	r0, r1
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	01c9      	lsls	r1, r1, #7
 800304c:	4401      	add	r1, r0
 800304e:	3184      	adds	r1, #132	; 0x84
 8003050:	4313      	orrs	r3, r2
 8003052:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	01db      	lsls	r3, r3, #7
 800305e:	4413      	add	r3, r2
 8003060:	3384      	adds	r3, #132	; 0x84
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	461a      	mov	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	01db      	lsls	r3, r3, #7
 800306e:	4413      	add	r3, r2
 8003070:	3384      	adds	r3, #132	; 0x84
 8003072:	461a      	mov	r2, r3
 8003074:	2300      	movs	r3, #0
 8003076:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	01db      	lsls	r3, r3, #7
 8003082:	4413      	add	r3, r2
 8003084:	3384      	adds	r3, #132	; 0x84
 8003086:	461a      	mov	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d102      	bne.n	800309c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003096:	2304      	movs	r3, #4
 8003098:	61fb      	str	r3, [r7, #28]
 800309a:	e01b      	b.n	80030d4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d102      	bne.n	80030aa <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80030a4:	2303      	movs	r3, #3
 80030a6:	61fb      	str	r3, [r7, #28]
 80030a8:	e014      	b.n	80030d4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d00b      	beq.n	80030ca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d007      	beq.n	80030ca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80030be:	2b03      	cmp	r3, #3
 80030c0:	d003      	beq.n	80030ca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80030c6:	2b07      	cmp	r3, #7
 80030c8:	d102      	bne.n	80030d0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80030ca:	2302      	movs	r3, #2
 80030cc:	61fb      	str	r3, [r7, #28]
 80030ce:	e001      	b.n	80030d4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80030d0:	2301      	movs	r3, #1
 80030d2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	461a      	mov	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	01db      	lsls	r3, r3, #7
 80030de:	4413      	add	r3, r2
 80030e0:	3384      	adds	r3, #132	; 0x84
 80030e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	6812      	ldr	r2, [r2, #0]
 80030e8:	4611      	mov	r1, r2
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	01d2      	lsls	r2, r2, #7
 80030ee:	440a      	add	r2, r1
 80030f0:	3284      	adds	r2, #132	; 0x84
 80030f2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80030f6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	69fa      	ldr	r2, [r7, #28]
 80030fe:	fb02 f303 	mul.w	r3, r2, r3
 8003102:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	6859      	ldr	r1, [r3, #4]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	1acb      	subs	r3, r1, r3
 800310e:	69f9      	ldr	r1, [r7, #28]
 8003110:	fb01 f303 	mul.w	r3, r1, r3
 8003114:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003116:	68f9      	ldr	r1, [r7, #12]
 8003118:	6809      	ldr	r1, [r1, #0]
 800311a:	4608      	mov	r0, r1
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	01c9      	lsls	r1, r1, #7
 8003120:	4401      	add	r1, r0
 8003122:	3184      	adds	r1, #132	; 0x84
 8003124:	4313      	orrs	r3, r2
 8003126:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	461a      	mov	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	01db      	lsls	r3, r3, #7
 8003132:	4413      	add	r3, r2
 8003134:	3384      	adds	r3, #132	; 0x84
 8003136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	6812      	ldr	r2, [r2, #0]
 800313c:	4611      	mov	r1, r2
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	01d2      	lsls	r2, r2, #7
 8003142:	440a      	add	r2, r1
 8003144:	3284      	adds	r2, #132	; 0x84
 8003146:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800314a:	f023 0307 	bic.w	r3, r3, #7
 800314e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	461a      	mov	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	01db      	lsls	r3, r3, #7
 800315a:	4413      	add	r3, r2
 800315c:	3384      	adds	r3, #132	; 0x84
 800315e:	461a      	mov	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003164:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	01db      	lsls	r3, r3, #7
 8003170:	4413      	add	r3, r2
 8003172:	3384      	adds	r3, #132	; 0x84
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	6812      	ldr	r2, [r2, #0]
 800317a:	4611      	mov	r1, r2
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	01d2      	lsls	r2, r2, #7
 8003180:	440a      	add	r2, r1
 8003182:	3284      	adds	r2, #132	; 0x84
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	6013      	str	r3, [r2, #0]
}
 800318a:	bf00      	nop
 800318c:	3724      	adds	r7, #36	; 0x24
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003196:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003198:	b08f      	sub	sp, #60	; 0x3c
 800319a:	af0a      	add	r7, sp, #40	; 0x28
 800319c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e10f      	b.n	80033c8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f006 fe02 	bl	8009dcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2203      	movs	r2, #3
 80031cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d102      	bne.n	80031e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f003 f93f 	bl	800646a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	603b      	str	r3, [r7, #0]
 80031f2:	687e      	ldr	r6, [r7, #4]
 80031f4:	466d      	mov	r5, sp
 80031f6:	f106 0410 	add.w	r4, r6, #16
 80031fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003200:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003202:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003206:	e885 0003 	stmia.w	r5, {r0, r1}
 800320a:	1d33      	adds	r3, r6, #4
 800320c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800320e:	6838      	ldr	r0, [r7, #0]
 8003210:	f003 f816 	bl	8006240 <USB_CoreInit>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d005      	beq.n	8003226 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2202      	movs	r2, #2
 800321e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e0d0      	b.n	80033c8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2100      	movs	r1, #0
 800322c:	4618      	mov	r0, r3
 800322e:	f003 f92d 	bl	800648c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003232:	2300      	movs	r3, #0
 8003234:	73fb      	strb	r3, [r7, #15]
 8003236:	e04a      	b.n	80032ce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003238:	7bfa      	ldrb	r2, [r7, #15]
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	333d      	adds	r3, #61	; 0x3d
 8003248:	2201      	movs	r2, #1
 800324a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800324c:	7bfa      	ldrb	r2, [r7, #15]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	4413      	add	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	333c      	adds	r3, #60	; 0x3c
 800325c:	7bfa      	ldrb	r2, [r7, #15]
 800325e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003260:	7bfa      	ldrb	r2, [r7, #15]
 8003262:	7bfb      	ldrb	r3, [r7, #15]
 8003264:	b298      	uxth	r0, r3
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	4413      	add	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	3344      	adds	r3, #68	; 0x44
 8003274:	4602      	mov	r2, r0
 8003276:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003278:	7bfa      	ldrb	r2, [r7, #15]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	3340      	adds	r3, #64	; 0x40
 8003288:	2200      	movs	r2, #0
 800328a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800328c:	7bfa      	ldrb	r2, [r7, #15]
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	3348      	adds	r3, #72	; 0x48
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032a0:	7bfa      	ldrb	r2, [r7, #15]
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	4613      	mov	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	4413      	add	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	334c      	adds	r3, #76	; 0x4c
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032b4:	7bfa      	ldrb	r2, [r7, #15]
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	4613      	mov	r3, r2
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	4413      	add	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	3354      	adds	r3, #84	; 0x54
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
 80032ca:	3301      	adds	r3, #1
 80032cc:	73fb      	strb	r3, [r7, #15]
 80032ce:	7bfa      	ldrb	r2, [r7, #15]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d3af      	bcc.n	8003238 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d8:	2300      	movs	r3, #0
 80032da:	73fb      	strb	r3, [r7, #15]
 80032dc:	e044      	b.n	8003368 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032de:	7bfa      	ldrb	r2, [r7, #15]
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	4413      	add	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	440b      	add	r3, r1
 80032ec:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80032f0:	2200      	movs	r2, #0
 80032f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032f4:	7bfa      	ldrb	r2, [r7, #15]
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	4413      	add	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003306:	7bfa      	ldrb	r2, [r7, #15]
 8003308:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800330a:	7bfa      	ldrb	r2, [r7, #15]
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	4413      	add	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800331c:	2200      	movs	r2, #0
 800331e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003320:	7bfa      	ldrb	r2, [r7, #15]
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	4613      	mov	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	4413      	add	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003336:	7bfa      	ldrb	r2, [r7, #15]
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	4613      	mov	r3, r2
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	4413      	add	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800334c:	7bfa      	ldrb	r2, [r7, #15]
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003362:	7bfb      	ldrb	r3, [r7, #15]
 8003364:	3301      	adds	r3, #1
 8003366:	73fb      	strb	r3, [r7, #15]
 8003368:	7bfa      	ldrb	r2, [r7, #15]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	429a      	cmp	r2, r3
 8003370:	d3b5      	bcc.n	80032de <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	687e      	ldr	r6, [r7, #4]
 800337a:	466d      	mov	r5, sp
 800337c:	f106 0410 	add.w	r4, r6, #16
 8003380:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003382:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003386:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003388:	e894 0003 	ldmia.w	r4, {r0, r1}
 800338c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003390:	1d33      	adds	r3, r6, #4
 8003392:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003394:	6838      	ldr	r0, [r7, #0]
 8003396:	f003 f8c5 	bl	8006524 <USB_DevInit>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d005      	beq.n	80033ac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2202      	movs	r2, #2
 80033a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e00d      	b.n	80033c8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f004 fa14 	bl	80077ee <USB_DevDisconnect>

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_PCD_Start+0x1c>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e020      	b.n	800342e <HAL_PCD_Start+0x5e>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d109      	bne.n	8003410 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003400:	2b01      	cmp	r3, #1
 8003402:	d005      	beq.n	8003410 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003408:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f003 f817 	bl	8006448 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f004 f9c4 	bl	80077ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003436:	b590      	push	{r4, r7, lr}
 8003438:	b08d      	sub	sp, #52	; 0x34
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f004 fa82 	bl	8007956 <USB_GetMode>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	f040 848a 	bne.w	8003d6e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f004 f9e6 	bl	8007830 <USB_ReadInterrupts>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 8480 	beq.w	8003d6c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	0a1b      	lsrs	r3, r3, #8
 8003476:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f004 f9d3 	bl	8007830 <USB_ReadInterrupts>
 800348a:	4603      	mov	r3, r0
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b02      	cmp	r3, #2
 8003492:	d107      	bne.n	80034a4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695a      	ldr	r2, [r3, #20]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f002 0202 	and.w	r2, r2, #2
 80034a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f004 f9c1 	bl	8007830 <USB_ReadInterrupts>
 80034ae:	4603      	mov	r3, r0
 80034b0:	f003 0310 	and.w	r3, r3, #16
 80034b4:	2b10      	cmp	r3, #16
 80034b6:	d161      	bne.n	800357c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699a      	ldr	r2, [r3, #24]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0210 	bic.w	r2, r2, #16
 80034c6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	f003 020f 	and.w	r2, r3, #15
 80034d4:	4613      	mov	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	4413      	add	r3, r2
 80034e4:	3304      	adds	r3, #4
 80034e6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	0c5b      	lsrs	r3, r3, #17
 80034ec:	f003 030f 	and.w	r3, r3, #15
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d124      	bne.n	800353e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d035      	beq.n	800356c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	091b      	lsrs	r3, r3, #4
 8003508:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800350a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800350e:	b29b      	uxth	r3, r3
 8003510:	461a      	mov	r2, r3
 8003512:	6a38      	ldr	r0, [r7, #32]
 8003514:	f003 fff8 	bl	8007508 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	091b      	lsrs	r3, r3, #4
 8003520:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003524:	441a      	add	r2, r3
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	6a1a      	ldr	r2, [r3, #32]
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	091b      	lsrs	r3, r3, #4
 8003532:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003536:	441a      	add	r2, r3
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	621a      	str	r2, [r3, #32]
 800353c:	e016      	b.n	800356c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	0c5b      	lsrs	r3, r3, #17
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	2b06      	cmp	r3, #6
 8003548:	d110      	bne.n	800356c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003550:	2208      	movs	r2, #8
 8003552:	4619      	mov	r1, r3
 8003554:	6a38      	ldr	r0, [r7, #32]
 8003556:	f003 ffd7 	bl	8007508 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	6a1a      	ldr	r2, [r3, #32]
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	091b      	lsrs	r3, r3, #4
 8003562:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003566:	441a      	add	r2, r3
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699a      	ldr	r2, [r3, #24]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0210 	orr.w	r2, r2, #16
 800357a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f004 f955 	bl	8007830 <USB_ReadInterrupts>
 8003586:	4603      	mov	r3, r0
 8003588:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800358c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003590:	f040 80a7 	bne.w	80036e2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f004 f95a 	bl	8007856 <USB_ReadDevAllOutEpInterrupt>
 80035a2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80035a4:	e099      	b.n	80036da <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80035a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 808e 	beq.w	80036ce <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b8:	b2d2      	uxtb	r2, r2
 80035ba:	4611      	mov	r1, r2
 80035bc:	4618      	mov	r0, r3
 80035be:	f004 f97e 	bl	80078be <USB_ReadDevOutEPInterrupt>
 80035c2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00c      	beq.n	80035e8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035da:	461a      	mov	r2, r3
 80035dc:	2301      	movs	r3, #1
 80035de:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80035e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 fec2 	bl	800436c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00c      	beq.n	800360c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	015a      	lsls	r2, r3, #5
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	4413      	add	r3, r2
 80035fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035fe:	461a      	mov	r2, r3
 8003600:	2308      	movs	r3, #8
 8003602:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003604:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 ff98 	bl	800453c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	f003 0310 	and.w	r3, r3, #16
 8003612:	2b00      	cmp	r3, #0
 8003614:	d008      	beq.n	8003628 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	4413      	add	r3, r2
 800361e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003622:	461a      	mov	r2, r3
 8003624:	2310      	movs	r3, #16
 8003626:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d030      	beq.n	8003694 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363a:	2b80      	cmp	r3, #128	; 0x80
 800363c:	d109      	bne.n	8003652 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	69fa      	ldr	r2, [r7, #28]
 8003648:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800364c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003650:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003654:	4613      	mov	r3, r2
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	4413      	add	r3, r2
 8003664:	3304      	adds	r3, #4
 8003666:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	78db      	ldrb	r3, [r3, #3]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d108      	bne.n	8003682 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2200      	movs	r2, #0
 8003674:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	b2db      	uxtb	r3, r3
 800367a:	4619      	mov	r1, r3
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f006 fca7 	bl	8009fd0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	015a      	lsls	r2, r3, #5
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	4413      	add	r3, r2
 800368a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800368e:	461a      	mov	r2, r3
 8003690:	2302      	movs	r3, #2
 8003692:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	f003 0320 	and.w	r3, r3, #32
 800369a:	2b00      	cmp	r3, #0
 800369c:	d008      	beq.n	80036b0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036aa:	461a      	mov	r2, r3
 80036ac:	2320      	movs	r3, #32
 80036ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d009      	beq.n	80036ce <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	015a      	lsls	r2, r3, #5
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036c6:	461a      	mov	r2, r3
 80036c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036cc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	3301      	adds	r3, #1
 80036d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80036d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d6:	085b      	lsrs	r3, r3, #1
 80036d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80036da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f47f af62 	bne.w	80035a6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f004 f8a2 	bl	8007830 <USB_ReadInterrupts>
 80036ec:	4603      	mov	r3, r0
 80036ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036f6:	f040 80db 	bne.w	80038b0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f004 f8c3 	bl	800788a <USB_ReadDevAllInEpInterrupt>
 8003704:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003706:	2300      	movs	r3, #0
 8003708:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800370a:	e0cd      	b.n	80038a8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800370c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 80c2 	beq.w	800389c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	4611      	mov	r1, r2
 8003722:	4618      	mov	r0, r3
 8003724:	f004 f8e9 	bl	80078fa <USB_ReadDevInEPInterrupt>
 8003728:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d057      	beq.n	80037e4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	2201      	movs	r2, #1
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	43db      	mvns	r3, r3
 800374e:	69f9      	ldr	r1, [r7, #28]
 8003750:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003754:	4013      	ands	r3, r2
 8003756:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	4413      	add	r3, r2
 8003760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003764:	461a      	mov	r2, r3
 8003766:	2301      	movs	r3, #1
 8003768:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d132      	bne.n	80037d8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003776:	4613      	mov	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	334c      	adds	r3, #76	; 0x4c
 8003782:	6819      	ldr	r1, [r3, #0]
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003788:	4613      	mov	r3, r2
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	4413      	add	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4403      	add	r3, r0
 8003792:	3348      	adds	r3, #72	; 0x48
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4419      	add	r1, r3
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800379c:	4613      	mov	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	4413      	add	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4403      	add	r3, r0
 80037a6:	334c      	adds	r3, #76	; 0x4c
 80037a8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d113      	bne.n	80037d8 <HAL_PCD_IRQHandler+0x3a2>
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b4:	4613      	mov	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	3354      	adds	r3, #84	; 0x54
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d108      	bne.n	80037d8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6818      	ldr	r0, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037d0:	461a      	mov	r2, r3
 80037d2:	2101      	movs	r1, #1
 80037d4:	f004 f8f0 	bl	80079b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	4619      	mov	r1, r3
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f006 fb71 	bl	8009ec6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d008      	beq.n	8003800 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	015a      	lsls	r2, r3, #5
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037fa:	461a      	mov	r2, r3
 80037fc:	2308      	movs	r3, #8
 80037fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	f003 0310 	and.w	r3, r3, #16
 8003806:	2b00      	cmp	r3, #0
 8003808:	d008      	beq.n	800381c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	015a      	lsls	r2, r3, #5
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	4413      	add	r3, r2
 8003812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003816:	461a      	mov	r2, r3
 8003818:	2310      	movs	r3, #16
 800381a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003822:	2b00      	cmp	r3, #0
 8003824:	d008      	beq.n	8003838 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	015a      	lsls	r2, r3, #5
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	4413      	add	r3, r2
 800382e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003832:	461a      	mov	r2, r3
 8003834:	2340      	movs	r3, #64	; 0x40
 8003836:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d023      	beq.n	800388a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003842:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003844:	6a38      	ldr	r0, [r7, #32]
 8003846:	f002 ffd1 	bl	80067ec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800384a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800384c:	4613      	mov	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	3338      	adds	r3, #56	; 0x38
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	4413      	add	r3, r2
 800385a:	3304      	adds	r3, #4
 800385c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	78db      	ldrb	r3, [r3, #3]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d108      	bne.n	8003878 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2200      	movs	r2, #0
 800386a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	b2db      	uxtb	r3, r3
 8003870:	4619      	mov	r1, r3
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f006 fbbe 	bl	8009ff4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	4413      	add	r3, r2
 8003880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003884:	461a      	mov	r2, r3
 8003886:	2302      	movs	r3, #2
 8003888:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003894:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 fcdb 	bl	8004252 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389e:	3301      	adds	r3, #1
 80038a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80038a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a4:	085b      	lsrs	r3, r3, #1
 80038a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80038a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f47f af2e 	bne.w	800370c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f003 ffbb 	bl	8007830 <USB_ReadInterrupts>
 80038ba:	4603      	mov	r3, r0
 80038bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038c4:	d122      	bne.n	800390c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	69fa      	ldr	r2, [r7, #28]
 80038d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038d4:	f023 0301 	bic.w	r3, r3, #1
 80038d8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d108      	bne.n	80038f6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80038ec:	2100      	movs	r1, #0
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 fec2 	bl	8004678 <HAL_PCDEx_LPM_Callback>
 80038f4:	e002      	b.n	80038fc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f006 fb5c 	bl	8009fb4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695a      	ldr	r2, [r3, #20]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800390a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f003 ff8d 	bl	8007830 <USB_ReadInterrupts>
 8003916:	4603      	mov	r3, r0
 8003918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800391c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003920:	d112      	bne.n	8003948 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b01      	cmp	r3, #1
 8003930:	d102      	bne.n	8003938 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f006 fb18 	bl	8009f68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	695a      	ldr	r2, [r3, #20]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003946:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f003 ff6f 	bl	8007830 <USB_ReadInterrupts>
 8003952:	4603      	mov	r3, r0
 8003954:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395c:	f040 80b7 	bne.w	8003ace <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	69fa      	ldr	r2, [r7, #28]
 800396a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800396e:	f023 0301 	bic.w	r3, r3, #1
 8003972:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2110      	movs	r1, #16
 800397a:	4618      	mov	r0, r3
 800397c:	f002 ff36 	bl	80067ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003980:	2300      	movs	r3, #0
 8003982:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003984:	e046      	b.n	8003a14 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003988:	015a      	lsls	r2, r3, #5
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	4413      	add	r3, r2
 800398e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003992:	461a      	mov	r2, r3
 8003994:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003998:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800399a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399c:	015a      	lsls	r2, r3, #5
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039aa:	0151      	lsls	r1, r2, #5
 80039ac:	69fa      	ldr	r2, [r7, #28]
 80039ae:	440a      	add	r2, r1
 80039b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80039ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c6:	461a      	mov	r2, r3
 80039c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039cc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80039ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d0:	015a      	lsls	r2, r3, #5
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039de:	0151      	lsls	r1, r2, #5
 80039e0:	69fa      	ldr	r2, [r7, #28]
 80039e2:	440a      	add	r2, r1
 80039e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80039ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039fe:	0151      	lsls	r1, r2, #5
 8003a00:	69fa      	ldr	r2, [r7, #28]
 8003a02:	440a      	add	r2, r1
 8003a04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a0c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a10:	3301      	adds	r3, #1
 8003a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d3b3      	bcc.n	8003986 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	69fa      	ldr	r2, [r7, #28]
 8003a28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a2c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003a30:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d016      	beq.n	8003a68 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a44:	69fa      	ldr	r2, [r7, #28]
 8003a46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a4a:	f043 030b 	orr.w	r3, r3, #11
 8003a4e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	69fa      	ldr	r2, [r7, #28]
 8003a5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a60:	f043 030b 	orr.w	r3, r3, #11
 8003a64:	6453      	str	r3, [r2, #68]	; 0x44
 8003a66:	e015      	b.n	8003a94 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	69fa      	ldr	r2, [r7, #28]
 8003a72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a7a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003a7e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	69fa      	ldr	r2, [r7, #28]
 8003a8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a8e:	f043 030b 	orr.w	r3, r3, #11
 8003a92:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	69fa      	ldr	r2, [r7, #28]
 8003a9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aa2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003aa6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6818      	ldr	r0, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ab8:	461a      	mov	r2, r3
 8003aba:	f003 ff7d 	bl	80079b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695a      	ldr	r2, [r3, #20]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003acc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f003 feac 	bl	8007830 <USB_ReadInterrupts>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ae2:	d124      	bne.n	8003b2e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f003 ff42 	bl	8007972 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f002 fef7 	bl	80068e6 <USB_GetDevSpeed>
 8003af8:	4603      	mov	r3, r0
 8003afa:	461a      	mov	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681c      	ldr	r4, [r3, #0]
 8003b04:	f001 fa28 	bl	8004f58 <HAL_RCC_GetHCLKFreq>
 8003b08:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	461a      	mov	r2, r3
 8003b12:	4620      	mov	r0, r4
 8003b14:	f002 fbf6 	bl	8006304 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f006 f9fc 	bl	8009f16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	695a      	ldr	r2, [r3, #20]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003b2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f003 fe7c 	bl	8007830 <USB_ReadInterrupts>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d10a      	bne.n	8003b58 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f006 f9d9 	bl	8009efa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695a      	ldr	r2, [r3, #20]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f002 0208 	and.w	r2, r2, #8
 8003b56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f003 fe67 	bl	8007830 <USB_ReadInterrupts>
 8003b62:	4603      	mov	r3, r0
 8003b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b68:	2b80      	cmp	r3, #128	; 0x80
 8003b6a:	d122      	bne.n	8003bb2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b78:	2301      	movs	r3, #1
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b7c:	e014      	b.n	8003ba8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b82:	4613      	mov	r3, r2
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	4413      	add	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d105      	bne.n	8003ba2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 fb27 	bl	80041f0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d3e5      	bcc.n	8003b7e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f003 fe3a 	bl	8007830 <USB_ReadInterrupts>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bc6:	d13b      	bne.n	8003c40 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bc8:	2301      	movs	r3, #1
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
 8003bcc:	e02b      	b.n	8003c26 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	015a      	lsls	r2, r3, #5
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be2:	4613      	mov	r3, r2
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	4413      	add	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	440b      	add	r3, r1
 8003bec:	3340      	adds	r3, #64	; 0x40
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d115      	bne.n	8003c20 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003bf4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	da12      	bge.n	8003c20 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfe:	4613      	mov	r3, r2
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	4413      	add	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	440b      	add	r3, r1
 8003c08:	333f      	adds	r3, #63	; 0x3f
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	4619      	mov	r1, r3
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fae8 	bl	80041f0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	3301      	adds	r3, #1
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d3ce      	bcc.n	8003bce <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	695a      	ldr	r2, [r3, #20]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003c3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f003 fdf3 	bl	8007830 <USB_ReadInterrupts>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c54:	d155      	bne.n	8003d02 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c56:	2301      	movs	r3, #1
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
 8003c5a:	e045      	b.n	8003ce8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	015a      	lsls	r2, r3, #5
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c70:	4613      	mov	r3, r2
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	4413      	add	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d12e      	bne.n	8003ce2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c84:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	da2b      	bge.n	8003ce2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003c96:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d121      	bne.n	8003ce2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	4413      	add	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	440b      	add	r3, r1
 8003cac:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10a      	bne.n	8003ce2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cde:	6053      	str	r3, [r2, #4]
            break;
 8003ce0:	e007      	b.n	8003cf2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d3b4      	bcc.n	8003c5c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695a      	ldr	r2, [r3, #20]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003d00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f003 fd92 	bl	8007830 <USB_ReadInterrupts>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d16:	d10a      	bne.n	8003d2e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f006 f97d 	bl	800a018 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	695a      	ldr	r2, [r3, #20]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003d2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f003 fd7c 	bl	8007830 <USB_ReadInterrupts>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d115      	bne.n	8003d6e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f006 f96d 	bl	800a034 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6859      	ldr	r1, [r3, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	605a      	str	r2, [r3, #4]
 8003d6a:	e000      	b.n	8003d6e <HAL_PCD_IRQHandler+0x938>
      return;
 8003d6c:	bf00      	nop
    }
  }
}
 8003d6e:	3734      	adds	r7, #52	; 0x34
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd90      	pop	{r4, r7, pc}

08003d74 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d101      	bne.n	8003d8e <HAL_PCD_SetAddress+0x1a>
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	e013      	b.n	8003db6 <HAL_PCD_SetAddress+0x42>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	78fa      	ldrb	r2, [r7, #3]
 8003d9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	78fa      	ldrb	r2, [r7, #3]
 8003da4:	4611      	mov	r1, r2
 8003da6:	4618      	mov	r0, r3
 8003da8:	f003 fcda 	bl	8007760 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b084      	sub	sp, #16
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	4608      	mov	r0, r1
 8003dc8:	4611      	mov	r1, r2
 8003dca:	461a      	mov	r2, r3
 8003dcc:	4603      	mov	r3, r0
 8003dce:	70fb      	strb	r3, [r7, #3]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	803b      	strh	r3, [r7, #0]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ddc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	da0f      	bge.n	8003e04 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003de4:	78fb      	ldrb	r3, [r7, #3]
 8003de6:	f003 020f 	and.w	r2, r3, #15
 8003dea:	4613      	mov	r3, r2
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	4413      	add	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	3338      	adds	r3, #56	; 0x38
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	4413      	add	r3, r2
 8003df8:	3304      	adds	r3, #4
 8003dfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	705a      	strb	r2, [r3, #1]
 8003e02:	e00f      	b.n	8003e24 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e04:	78fb      	ldrb	r3, [r7, #3]
 8003e06:	f003 020f 	and.w	r2, r3, #15
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	4413      	add	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	4413      	add	r3, r2
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e24:	78fb      	ldrb	r3, [r7, #3]
 8003e26:	f003 030f 	and.w	r3, r3, #15
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e30:	883a      	ldrh	r2, [r7, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	78ba      	ldrb	r2, [r7, #2]
 8003e3a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	785b      	ldrb	r3, [r3, #1]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d004      	beq.n	8003e4e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e4e:	78bb      	ldrb	r3, [r7, #2]
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d102      	bne.n	8003e5a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_PCD_EP_Open+0xaa>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e00e      	b.n	8003e86 <HAL_PCD_EP_Open+0xc8>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68f9      	ldr	r1, [r7, #12]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f002 fd5a 	bl	8006930 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003e84:	7afb      	ldrb	r3, [r7, #11]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b084      	sub	sp, #16
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	460b      	mov	r3, r1
 8003e98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	da0f      	bge.n	8003ec2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ea2:	78fb      	ldrb	r3, [r7, #3]
 8003ea4:	f003 020f 	and.w	r2, r3, #15
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	4413      	add	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	3338      	adds	r3, #56	; 0x38
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	705a      	strb	r2, [r3, #1]
 8003ec0:	e00f      	b.n	8003ee2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ec2:	78fb      	ldrb	r3, [r7, #3]
 8003ec4:	f003 020f 	and.w	r2, r3, #15
 8003ec8:	4613      	mov	r3, r2
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	4413      	add	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	3304      	adds	r3, #4
 8003eda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003ee2:	78fb      	ldrb	r3, [r7, #3]
 8003ee4:	f003 030f 	and.w	r3, r3, #15
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <HAL_PCD_EP_Close+0x6e>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e00e      	b.n	8003f1a <HAL_PCD_EP_Close+0x8c>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68f9      	ldr	r1, [r7, #12]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f002 fd98 	bl	8006a40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b086      	sub	sp, #24
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	603b      	str	r3, [r7, #0]
 8003f2e:	460b      	mov	r3, r1
 8003f30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f32:	7afb      	ldrb	r3, [r7, #11]
 8003f34:	f003 020f 	and.w	r2, r3, #15
 8003f38:	4613      	mov	r3, r2
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	4413      	add	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	4413      	add	r3, r2
 8003f48:	3304      	adds	r3, #4
 8003f4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2200      	movs	r2, #0
 8003f62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f64:	7afb      	ldrb	r3, [r7, #11]
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d102      	bne.n	8003f7e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f7e:	7afb      	ldrb	r3, [r7, #11]
 8003f80:	f003 030f 	and.w	r3, r3, #15
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d109      	bne.n	8003f9c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6818      	ldr	r0, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	461a      	mov	r2, r3
 8003f94:	6979      	ldr	r1, [r7, #20]
 8003f96:	f003 f877 	bl	8007088 <USB_EP0StartXfer>
 8003f9a:	e008      	b.n	8003fae <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6818      	ldr	r0, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	6979      	ldr	r1, [r7, #20]
 8003faa:	f002 fe25 	bl	8006bf8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003fc4:	78fb      	ldrb	r3, [r7, #3]
 8003fc6:	f003 020f 	and.w	r2, r3, #15
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003fda:	681b      	ldr	r3, [r3, #0]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	607a      	str	r2, [r7, #4]
 8003ff2:	603b      	str	r3, [r7, #0]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ff8:	7afb      	ldrb	r3, [r7, #11]
 8003ffa:	f003 020f 	and.w	r2, r3, #15
 8003ffe:	4613      	mov	r3, r2
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	4413      	add	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	3338      	adds	r3, #56	; 0x38
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	4413      	add	r3, r2
 800400c:	3304      	adds	r3, #4
 800400e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2200      	movs	r2, #0
 8004020:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2201      	movs	r2, #1
 8004026:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004028:	7afb      	ldrb	r3, [r7, #11]
 800402a:	f003 030f 	and.w	r3, r3, #15
 800402e:	b2da      	uxtb	r2, r3
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d102      	bne.n	8004042 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004042:	7afb      	ldrb	r3, [r7, #11]
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	2b00      	cmp	r3, #0
 800404a:	d109      	bne.n	8004060 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6818      	ldr	r0, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	b2db      	uxtb	r3, r3
 8004056:	461a      	mov	r2, r3
 8004058:	6979      	ldr	r1, [r7, #20]
 800405a:	f003 f815 	bl	8007088 <USB_EP0StartXfer>
 800405e:	e008      	b.n	8004072 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6818      	ldr	r0, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	b2db      	uxtb	r3, r3
 800406a:	461a      	mov	r2, r3
 800406c:	6979      	ldr	r1, [r7, #20]
 800406e:	f002 fdc3 	bl	8006bf8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	460b      	mov	r3, r1
 8004086:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004088:	78fb      	ldrb	r3, [r7, #3]
 800408a:	f003 020f 	and.w	r2, r3, #15
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	429a      	cmp	r2, r3
 8004094:	d901      	bls.n	800409a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e050      	b.n	800413c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800409a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	da0f      	bge.n	80040c2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040a2:	78fb      	ldrb	r3, [r7, #3]
 80040a4:	f003 020f 	and.w	r2, r3, #15
 80040a8:	4613      	mov	r3, r2
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	4413      	add	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	3338      	adds	r3, #56	; 0x38
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	4413      	add	r3, r2
 80040b6:	3304      	adds	r3, #4
 80040b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2201      	movs	r2, #1
 80040be:	705a      	strb	r2, [r3, #1]
 80040c0:	e00d      	b.n	80040de <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80040c2:	78fa      	ldrb	r2, [r7, #3]
 80040c4:	4613      	mov	r3, r2
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	4413      	add	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	4413      	add	r3, r2
 80040d4:	3304      	adds	r3, #4
 80040d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2201      	movs	r2, #1
 80040e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040e4:	78fb      	ldrb	r3, [r7, #3]
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d101      	bne.n	80040fe <HAL_PCD_EP_SetStall+0x82>
 80040fa:	2302      	movs	r3, #2
 80040fc:	e01e      	b.n	800413c <HAL_PCD_EP_SetStall+0xc0>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68f9      	ldr	r1, [r7, #12]
 800410c:	4618      	mov	r0, r3
 800410e:	f003 fa53 	bl	80075b8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004112:	78fb      	ldrb	r3, [r7, #3]
 8004114:	f003 030f 	and.w	r3, r3, #15
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10a      	bne.n	8004132 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6818      	ldr	r0, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	b2d9      	uxtb	r1, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800412c:	461a      	mov	r2, r3
 800412e:	f003 fc43 	bl	80079b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004150:	78fb      	ldrb	r3, [r7, #3]
 8004152:	f003 020f 	and.w	r2, r3, #15
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	429a      	cmp	r2, r3
 800415c:	d901      	bls.n	8004162 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e042      	b.n	80041e8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004162:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004166:	2b00      	cmp	r3, #0
 8004168:	da0f      	bge.n	800418a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800416a:	78fb      	ldrb	r3, [r7, #3]
 800416c:	f003 020f 	and.w	r2, r3, #15
 8004170:	4613      	mov	r3, r2
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	4413      	add	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	3338      	adds	r3, #56	; 0x38
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	4413      	add	r3, r2
 800417e:	3304      	adds	r3, #4
 8004180:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2201      	movs	r2, #1
 8004186:	705a      	strb	r2, [r3, #1]
 8004188:	e00f      	b.n	80041aa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800418a:	78fb      	ldrb	r3, [r7, #3]
 800418c:	f003 020f 	and.w	r2, r3, #15
 8004190:	4613      	mov	r3, r2
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	4413      	add	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	4413      	add	r3, r2
 80041a0:	3304      	adds	r3, #4
 80041a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041b0:	78fb      	ldrb	r3, [r7, #3]
 80041b2:	f003 030f 	and.w	r3, r3, #15
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d101      	bne.n	80041ca <HAL_PCD_EP_ClrStall+0x86>
 80041c6:	2302      	movs	r3, #2
 80041c8:	e00e      	b.n	80041e8 <HAL_PCD_EP_ClrStall+0xa4>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68f9      	ldr	r1, [r7, #12]
 80041d8:	4618      	mov	r0, r3
 80041da:	f003 fa5b 	bl	8007694 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	460b      	mov	r3, r1
 80041fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80041fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004200:	2b00      	cmp	r3, #0
 8004202:	da0c      	bge.n	800421e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004204:	78fb      	ldrb	r3, [r7, #3]
 8004206:	f003 020f 	and.w	r2, r3, #15
 800420a:	4613      	mov	r3, r2
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	4413      	add	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	3338      	adds	r3, #56	; 0x38
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	4413      	add	r3, r2
 8004218:	3304      	adds	r3, #4
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	e00c      	b.n	8004238 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800421e:	78fb      	ldrb	r3, [r7, #3]
 8004220:	f003 020f 	and.w	r2, r3, #15
 8004224:	4613      	mov	r3, r2
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	4413      	add	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	4413      	add	r3, r2
 8004234:	3304      	adds	r3, #4
 8004236:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68f9      	ldr	r1, [r7, #12]
 800423e:	4618      	mov	r0, r3
 8004240:	f003 f87a 	bl	8007338 <USB_EPStopXfer>
 8004244:	4603      	mov	r3, r0
 8004246:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004248:	7afb      	ldrb	r3, [r7, #11]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b08a      	sub	sp, #40	; 0x28
 8004256:	af02      	add	r7, sp, #8
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	4613      	mov	r3, r2
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	4413      	add	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	3338      	adds	r3, #56	; 0x38
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	4413      	add	r3, r2
 8004276:	3304      	adds	r3, #4
 8004278:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a1a      	ldr	r2, [r3, #32]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	429a      	cmp	r2, r3
 8004284:	d901      	bls.n	800428a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e06c      	b.n	8004364 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	699a      	ldr	r2, [r3, #24]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	69fa      	ldr	r2, [r7, #28]
 800429c:	429a      	cmp	r2, r3
 800429e:	d902      	bls.n	80042a6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	3303      	adds	r3, #3
 80042aa:	089b      	lsrs	r3, r3, #2
 80042ac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042ae:	e02b      	b.n	8004308 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	699a      	ldr	r2, [r3, #24]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	69fa      	ldr	r2, [r7, #28]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d902      	bls.n	80042cc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	3303      	adds	r3, #3
 80042d0:	089b      	lsrs	r3, r3, #2
 80042d2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6919      	ldr	r1, [r3, #16]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	4603      	mov	r3, r0
 80042ea:	6978      	ldr	r0, [r7, #20]
 80042ec:	f003 f8ce 	bl	800748c <USB_WritePacket>

    ep->xfer_buff  += len;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	441a      	add	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6a1a      	ldr	r2, [r3, #32]
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	441a      	add	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	4413      	add	r3, r2
 8004310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	b29b      	uxth	r3, r3
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	429a      	cmp	r2, r3
 800431c:	d809      	bhi.n	8004332 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a1a      	ldr	r2, [r3, #32]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004326:	429a      	cmp	r2, r3
 8004328:	d203      	bcs.n	8004332 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1be      	bne.n	80042b0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	699a      	ldr	r2, [r3, #24]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	429a      	cmp	r2, r3
 800433c:	d811      	bhi.n	8004362 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	f003 030f 	and.w	r3, r3, #15
 8004344:	2201      	movs	r2, #1
 8004346:	fa02 f303 	lsl.w	r3, r2, r3
 800434a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	43db      	mvns	r3, r3
 8004358:	6939      	ldr	r1, [r7, #16]
 800435a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800435e:	4013      	ands	r3, r2
 8004360:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3720      	adds	r7, #32
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b088      	sub	sp, #32
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	333c      	adds	r3, #60	; 0x3c
 8004384:	3304      	adds	r3, #4
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	4413      	add	r3, r2
 8004392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d17b      	bne.n	800449a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d015      	beq.n	80043d8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	4a61      	ldr	r2, [pc, #388]	; (8004534 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	f240 80b9 	bls.w	8004528 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 80b3 	beq.w	8004528 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	015a      	lsls	r2, r3, #5
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	4413      	add	r3, r2
 80043ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ce:	461a      	mov	r2, r3
 80043d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043d4:	6093      	str	r3, [r2, #8]
 80043d6:	e0a7      	b.n	8004528 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	f003 0320 	and.w	r3, r3, #32
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d009      	beq.n	80043f6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ee:	461a      	mov	r2, r3
 80043f0:	2320      	movs	r3, #32
 80043f2:	6093      	str	r3, [r2, #8]
 80043f4:	e098      	b.n	8004528 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f040 8093 	bne.w	8004528 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	4a4b      	ldr	r2, [pc, #300]	; (8004534 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d90f      	bls.n	800442a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00a      	beq.n	800442a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004420:	461a      	mov	r2, r3
 8004422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004426:	6093      	str	r3, [r2, #8]
 8004428:	e07e      	b.n	8004528 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	4613      	mov	r3, r2
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	4413      	add	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	4413      	add	r3, r2
 800443c:	3304      	adds	r3, #4
 800443e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	69da      	ldr	r2, [r3, #28]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	0159      	lsls	r1, r3, #5
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	440b      	add	r3, r1
 800444c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004456:	1ad2      	subs	r2, r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d114      	bne.n	800448c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d109      	bne.n	800447e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6818      	ldr	r0, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004474:	461a      	mov	r2, r3
 8004476:	2101      	movs	r1, #1
 8004478:	f003 fa9e 	bl	80079b8 <USB_EP0_OutStart>
 800447c:	e006      	b.n	800448c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	691a      	ldr	r2, [r3, #16]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	441a      	add	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	b2db      	uxtb	r3, r3
 8004490:	4619      	mov	r1, r3
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f005 fcfc 	bl	8009e90 <HAL_PCD_DataOutStageCallback>
 8004498:	e046      	b.n	8004528 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	4a26      	ldr	r2, [pc, #152]	; (8004538 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d124      	bne.n	80044ec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00a      	beq.n	80044c2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b8:	461a      	mov	r2, r3
 80044ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044be:	6093      	str	r3, [r2, #8]
 80044c0:	e032      	b.n	8004528 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f003 0320 	and.w	r3, r3, #32
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d008      	beq.n	80044de <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d8:	461a      	mov	r2, r3
 80044da:	2320      	movs	r3, #32
 80044dc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	4619      	mov	r1, r3
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f005 fcd3 	bl	8009e90 <HAL_PCD_DataOutStageCallback>
 80044ea:	e01d      	b.n	8004528 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d114      	bne.n	800451c <PCD_EP_OutXfrComplete_int+0x1b0>
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	4613      	mov	r3, r2
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	4413      	add	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	440b      	add	r3, r1
 8004500:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d108      	bne.n	800451c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6818      	ldr	r0, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004514:	461a      	mov	r2, r3
 8004516:	2100      	movs	r1, #0
 8004518:	f003 fa4e 	bl	80079b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	b2db      	uxtb	r3, r3
 8004520:	4619      	mov	r1, r3
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f005 fcb4 	bl	8009e90 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3720      	adds	r7, #32
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	4f54300a 	.word	0x4f54300a
 8004538:	4f54310a 	.word	0x4f54310a

0800453c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	333c      	adds	r3, #60	; 0x3c
 8004554:	3304      	adds	r3, #4
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	4413      	add	r3, r2
 8004562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4a15      	ldr	r2, [pc, #84]	; (80045c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d90e      	bls.n	8004590 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004578:	2b00      	cmp	r3, #0
 800457a:	d009      	beq.n	8004590 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	4413      	add	r3, r2
 8004584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004588:	461a      	mov	r2, r3
 800458a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800458e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f005 fc6b 	bl	8009e6c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4a0a      	ldr	r2, [pc, #40]	; (80045c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d90c      	bls.n	80045b8 <PCD_EP_OutSetupPacket_int+0x7c>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d108      	bne.n	80045b8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6818      	ldr	r0, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80045b0:	461a      	mov	r2, r3
 80045b2:	2101      	movs	r1, #1
 80045b4:	f003 fa00 	bl	80079b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	4f54300a 	.word	0x4f54300a

080045c8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	460b      	mov	r3, r1
 80045d2:	70fb      	strb	r3, [r7, #3]
 80045d4:	4613      	mov	r3, r2
 80045d6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80045e0:	78fb      	ldrb	r3, [r7, #3]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d107      	bne.n	80045f6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80045e6:	883b      	ldrh	r3, [r7, #0]
 80045e8:	0419      	lsls	r1, r3, #16
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	629a      	str	r2, [r3, #40]	; 0x28
 80045f4:	e028      	b.n	8004648 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fc:	0c1b      	lsrs	r3, r3, #16
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	4413      	add	r3, r2
 8004602:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004604:	2300      	movs	r3, #0
 8004606:	73fb      	strb	r3, [r7, #15]
 8004608:	e00d      	b.n	8004626 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	7bfb      	ldrb	r3, [r7, #15]
 8004610:	3340      	adds	r3, #64	; 0x40
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	0c1b      	lsrs	r3, r3, #16
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	4413      	add	r3, r2
 800461e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004620:	7bfb      	ldrb	r3, [r7, #15]
 8004622:	3301      	adds	r3, #1
 8004624:	73fb      	strb	r3, [r7, #15]
 8004626:	7bfa      	ldrb	r2, [r7, #15]
 8004628:	78fb      	ldrb	r3, [r7, #3]
 800462a:	3b01      	subs	r3, #1
 800462c:	429a      	cmp	r2, r3
 800462e:	d3ec      	bcc.n	800460a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004630:	883b      	ldrh	r3, [r7, #0]
 8004632:	0418      	lsls	r0, r3, #16
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6819      	ldr	r1, [r3, #0]
 8004638:	78fb      	ldrb	r3, [r7, #3]
 800463a:	3b01      	subs	r3, #1
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	4302      	orrs	r2, r0
 8004640:	3340      	adds	r3, #64	; 0x40
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004656:	b480      	push	{r7}
 8004658:	b083      	sub	sp, #12
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	460b      	mov	r3, r1
 8004660:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	887a      	ldrh	r2, [r7, #2]
 8004668:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	460b      	mov	r3, r1
 8004682:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e267      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d075      	beq.n	800479a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046ae:	4b88      	ldr	r3, [pc, #544]	; (80048d0 <HAL_RCC_OscConfig+0x240>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 030c 	and.w	r3, r3, #12
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d00c      	beq.n	80046d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ba:	4b85      	ldr	r3, [pc, #532]	; (80048d0 <HAL_RCC_OscConfig+0x240>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d112      	bne.n	80046ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046c6:	4b82      	ldr	r3, [pc, #520]	; (80048d0 <HAL_RCC_OscConfig+0x240>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046d2:	d10b      	bne.n	80046ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d4:	4b7e      	ldr	r3, [pc, #504]	; (80048d0 <HAL_RCC_OscConfig+0x240>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d05b      	beq.n	8004798 <HAL_RCC_OscConfig+0x108>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d157      	bne.n	8004798 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e242      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f4:	d106      	bne.n	8004704 <HAL_RCC_OscConfig+0x74>
 80046f6:	4b76      	ldr	r3, [pc, #472]	; (80048d0 <HAL_RCC_OscConfig+0x240>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a75      	ldr	r2, [pc, #468]	; (80048d0 <HAL_RCC_OscConfig+0x240>)
 80046fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	e01d      	b.n	8004740 <HAL_RCC_OscConfig+0xb0>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800470c:	d10c      	bne.n	8004728 <HAL_RCC_OscConfig+0x98>
 800470e:	4b70      	ldr	r3, [pc, #448]	; (80048d0 <HAL_RCC_OscConfig+0x240>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a6f      	ldr	r2, [pc, #444]	; (80048d0 <HAL_RCC_OscConfig+0x240>)
 8004714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	4b6d      	ldr	r3, [pc, #436]	; (80048d0 <HAL_RCC_OscConfig+0x240>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a6c      	ldr	r2, [pc, #432]	; (80048d0 <HAL_RCC_OscConfig+0x240>)
 8004720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004724:	6013      	str	r3, [r2, #0]
 8004726:	e00b      	b.n	8004740 <HAL_RCC_OscConfig+0xb0>
 8004728:	4b69      	ldr	r3, [pc, #420]	; (80048d0 <HAL_RCC_OscConfig+0x240>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a68      	ldr	r2, [pc, #416]	; (80048d0 <HAL_RCC_OscConfig+0x240>)
 800472e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	4b66      	ldr	r3, [pc, #408]	; (80048d0 <HAL_RCC_OscConfig+0x240>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a65      	ldr	r2, [pc, #404]	; (80048d0 <HAL_RCC_OscConfig+0x240>)
 800473a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800473e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d013      	beq.n	8004770 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004748:	f7fd faf0 	bl	8001d2c <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004750:	f7fd faec 	bl	8001d2c <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b64      	cmp	r3, #100	; 0x64
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e207      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004762:	4b5b      	ldr	r3, [pc, #364]	; (80048d0 <HAL_RCC_OscConfig+0x240>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0f0      	beq.n	8004750 <HAL_RCC_OscConfig+0xc0>
 800476e:	e014      	b.n	800479a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004770:	f7fd fadc 	bl	8001d2c <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004778:	f7fd fad8 	bl	8001d2c <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b64      	cmp	r3, #100	; 0x64
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e1f3      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800478a:	4b51      	ldr	r3, [pc, #324]	; (80048d0 <HAL_RCC_OscConfig+0x240>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1f0      	bne.n	8004778 <HAL_RCC_OscConfig+0xe8>
 8004796:	e000      	b.n	800479a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d063      	beq.n	800486e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047a6:	4b4a      	ldr	r3, [pc, #296]	; (80048d0 <HAL_RCC_OscConfig+0x240>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 030c 	and.w	r3, r3, #12
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00b      	beq.n	80047ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047b2:	4b47      	ldr	r3, [pc, #284]	; (80048d0 <HAL_RCC_OscConfig+0x240>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047ba:	2b08      	cmp	r3, #8
 80047bc:	d11c      	bne.n	80047f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047be:	4b44      	ldr	r3, [pc, #272]	; (80048d0 <HAL_RCC_OscConfig+0x240>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d116      	bne.n	80047f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ca:	4b41      	ldr	r3, [pc, #260]	; (80048d0 <HAL_RCC_OscConfig+0x240>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d005      	beq.n	80047e2 <HAL_RCC_OscConfig+0x152>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d001      	beq.n	80047e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e1c7      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e2:	4b3b      	ldr	r3, [pc, #236]	; (80048d0 <HAL_RCC_OscConfig+0x240>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	4937      	ldr	r1, [pc, #220]	; (80048d0 <HAL_RCC_OscConfig+0x240>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047f6:	e03a      	b.n	800486e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d020      	beq.n	8004842 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004800:	4b34      	ldr	r3, [pc, #208]	; (80048d4 <HAL_RCC_OscConfig+0x244>)
 8004802:	2201      	movs	r2, #1
 8004804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004806:	f7fd fa91 	bl	8001d2c <HAL_GetTick>
 800480a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800480c:	e008      	b.n	8004820 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800480e:	f7fd fa8d 	bl	8001d2c <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e1a8      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004820:	4b2b      	ldr	r3, [pc, #172]	; (80048d0 <HAL_RCC_OscConfig+0x240>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0f0      	beq.n	800480e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800482c:	4b28      	ldr	r3, [pc, #160]	; (80048d0 <HAL_RCC_OscConfig+0x240>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	4925      	ldr	r1, [pc, #148]	; (80048d0 <HAL_RCC_OscConfig+0x240>)
 800483c:	4313      	orrs	r3, r2
 800483e:	600b      	str	r3, [r1, #0]
 8004840:	e015      	b.n	800486e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004842:	4b24      	ldr	r3, [pc, #144]	; (80048d4 <HAL_RCC_OscConfig+0x244>)
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004848:	f7fd fa70 	bl	8001d2c <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004850:	f7fd fa6c 	bl	8001d2c <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e187      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004862:	4b1b      	ldr	r3, [pc, #108]	; (80048d0 <HAL_RCC_OscConfig+0x240>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f0      	bne.n	8004850 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	2b00      	cmp	r3, #0
 8004878:	d036      	beq.n	80048e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d016      	beq.n	80048b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004882:	4b15      	ldr	r3, [pc, #84]	; (80048d8 <HAL_RCC_OscConfig+0x248>)
 8004884:	2201      	movs	r2, #1
 8004886:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004888:	f7fd fa50 	bl	8001d2c <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004890:	f7fd fa4c 	bl	8001d2c <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e167      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048a2:	4b0b      	ldr	r3, [pc, #44]	; (80048d0 <HAL_RCC_OscConfig+0x240>)
 80048a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d0f0      	beq.n	8004890 <HAL_RCC_OscConfig+0x200>
 80048ae:	e01b      	b.n	80048e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048b0:	4b09      	ldr	r3, [pc, #36]	; (80048d8 <HAL_RCC_OscConfig+0x248>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048b6:	f7fd fa39 	bl	8001d2c <HAL_GetTick>
 80048ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048bc:	e00e      	b.n	80048dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048be:	f7fd fa35 	bl	8001d2c <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d907      	bls.n	80048dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e150      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
 80048d0:	40023800 	.word	0x40023800
 80048d4:	42470000 	.word	0x42470000
 80048d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048dc:	4b88      	ldr	r3, [pc, #544]	; (8004b00 <HAL_RCC_OscConfig+0x470>)
 80048de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1ea      	bne.n	80048be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 8097 	beq.w	8004a24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048f6:	2300      	movs	r3, #0
 80048f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048fa:	4b81      	ldr	r3, [pc, #516]	; (8004b00 <HAL_RCC_OscConfig+0x470>)
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10f      	bne.n	8004926 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004906:	2300      	movs	r3, #0
 8004908:	60bb      	str	r3, [r7, #8]
 800490a:	4b7d      	ldr	r3, [pc, #500]	; (8004b00 <HAL_RCC_OscConfig+0x470>)
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	4a7c      	ldr	r2, [pc, #496]	; (8004b00 <HAL_RCC_OscConfig+0x470>)
 8004910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004914:	6413      	str	r3, [r2, #64]	; 0x40
 8004916:	4b7a      	ldr	r3, [pc, #488]	; (8004b00 <HAL_RCC_OscConfig+0x470>)
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800491e:	60bb      	str	r3, [r7, #8]
 8004920:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004922:	2301      	movs	r3, #1
 8004924:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004926:	4b77      	ldr	r3, [pc, #476]	; (8004b04 <HAL_RCC_OscConfig+0x474>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492e:	2b00      	cmp	r3, #0
 8004930:	d118      	bne.n	8004964 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004932:	4b74      	ldr	r3, [pc, #464]	; (8004b04 <HAL_RCC_OscConfig+0x474>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a73      	ldr	r2, [pc, #460]	; (8004b04 <HAL_RCC_OscConfig+0x474>)
 8004938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800493c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800493e:	f7fd f9f5 	bl	8001d2c <HAL_GetTick>
 8004942:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004944:	e008      	b.n	8004958 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004946:	f7fd f9f1 	bl	8001d2c <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e10c      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004958:	4b6a      	ldr	r3, [pc, #424]	; (8004b04 <HAL_RCC_OscConfig+0x474>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0f0      	beq.n	8004946 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d106      	bne.n	800497a <HAL_RCC_OscConfig+0x2ea>
 800496c:	4b64      	ldr	r3, [pc, #400]	; (8004b00 <HAL_RCC_OscConfig+0x470>)
 800496e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004970:	4a63      	ldr	r2, [pc, #396]	; (8004b00 <HAL_RCC_OscConfig+0x470>)
 8004972:	f043 0301 	orr.w	r3, r3, #1
 8004976:	6713      	str	r3, [r2, #112]	; 0x70
 8004978:	e01c      	b.n	80049b4 <HAL_RCC_OscConfig+0x324>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	2b05      	cmp	r3, #5
 8004980:	d10c      	bne.n	800499c <HAL_RCC_OscConfig+0x30c>
 8004982:	4b5f      	ldr	r3, [pc, #380]	; (8004b00 <HAL_RCC_OscConfig+0x470>)
 8004984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004986:	4a5e      	ldr	r2, [pc, #376]	; (8004b00 <HAL_RCC_OscConfig+0x470>)
 8004988:	f043 0304 	orr.w	r3, r3, #4
 800498c:	6713      	str	r3, [r2, #112]	; 0x70
 800498e:	4b5c      	ldr	r3, [pc, #368]	; (8004b00 <HAL_RCC_OscConfig+0x470>)
 8004990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004992:	4a5b      	ldr	r2, [pc, #364]	; (8004b00 <HAL_RCC_OscConfig+0x470>)
 8004994:	f043 0301 	orr.w	r3, r3, #1
 8004998:	6713      	str	r3, [r2, #112]	; 0x70
 800499a:	e00b      	b.n	80049b4 <HAL_RCC_OscConfig+0x324>
 800499c:	4b58      	ldr	r3, [pc, #352]	; (8004b00 <HAL_RCC_OscConfig+0x470>)
 800499e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a0:	4a57      	ldr	r2, [pc, #348]	; (8004b00 <HAL_RCC_OscConfig+0x470>)
 80049a2:	f023 0301 	bic.w	r3, r3, #1
 80049a6:	6713      	str	r3, [r2, #112]	; 0x70
 80049a8:	4b55      	ldr	r3, [pc, #340]	; (8004b00 <HAL_RCC_OscConfig+0x470>)
 80049aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ac:	4a54      	ldr	r2, [pc, #336]	; (8004b00 <HAL_RCC_OscConfig+0x470>)
 80049ae:	f023 0304 	bic.w	r3, r3, #4
 80049b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d015      	beq.n	80049e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049bc:	f7fd f9b6 	bl	8001d2c <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c2:	e00a      	b.n	80049da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049c4:	f7fd f9b2 	bl	8001d2c <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e0cb      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049da:	4b49      	ldr	r3, [pc, #292]	; (8004b00 <HAL_RCC_OscConfig+0x470>)
 80049dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0ee      	beq.n	80049c4 <HAL_RCC_OscConfig+0x334>
 80049e6:	e014      	b.n	8004a12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049e8:	f7fd f9a0 	bl	8001d2c <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ee:	e00a      	b.n	8004a06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049f0:	f7fd f99c 	bl	8001d2c <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e0b5      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a06:	4b3e      	ldr	r3, [pc, #248]	; (8004b00 <HAL_RCC_OscConfig+0x470>)
 8004a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1ee      	bne.n	80049f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a12:	7dfb      	ldrb	r3, [r7, #23]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d105      	bne.n	8004a24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a18:	4b39      	ldr	r3, [pc, #228]	; (8004b00 <HAL_RCC_OscConfig+0x470>)
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1c:	4a38      	ldr	r2, [pc, #224]	; (8004b00 <HAL_RCC_OscConfig+0x470>)
 8004a1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 80a1 	beq.w	8004b70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a2e:	4b34      	ldr	r3, [pc, #208]	; (8004b00 <HAL_RCC_OscConfig+0x470>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 030c 	and.w	r3, r3, #12
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d05c      	beq.n	8004af4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d141      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a42:	4b31      	ldr	r3, [pc, #196]	; (8004b08 <HAL_RCC_OscConfig+0x478>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a48:	f7fd f970 	bl	8001d2c <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a50:	f7fd f96c 	bl	8001d2c <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e087      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a62:	4b27      	ldr	r3, [pc, #156]	; (8004b00 <HAL_RCC_OscConfig+0x470>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1f0      	bne.n	8004a50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	69da      	ldr	r2, [r3, #28]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	019b      	lsls	r3, r3, #6
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a84:	085b      	lsrs	r3, r3, #1
 8004a86:	3b01      	subs	r3, #1
 8004a88:	041b      	lsls	r3, r3, #16
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a90:	061b      	lsls	r3, r3, #24
 8004a92:	491b      	ldr	r1, [pc, #108]	; (8004b00 <HAL_RCC_OscConfig+0x470>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a98:	4b1b      	ldr	r3, [pc, #108]	; (8004b08 <HAL_RCC_OscConfig+0x478>)
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a9e:	f7fd f945 	bl	8001d2c <HAL_GetTick>
 8004aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aa4:	e008      	b.n	8004ab8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aa6:	f7fd f941 	bl	8001d2c <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e05c      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab8:	4b11      	ldr	r3, [pc, #68]	; (8004b00 <HAL_RCC_OscConfig+0x470>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0f0      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x416>
 8004ac4:	e054      	b.n	8004b70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac6:	4b10      	ldr	r3, [pc, #64]	; (8004b08 <HAL_RCC_OscConfig+0x478>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004acc:	f7fd f92e 	bl	8001d2c <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ad4:	f7fd f92a 	bl	8001d2c <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e045      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae6:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <HAL_RCC_OscConfig+0x470>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f0      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x444>
 8004af2:	e03d      	b.n	8004b70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d107      	bne.n	8004b0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e038      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
 8004b00:	40023800 	.word	0x40023800
 8004b04:	40007000 	.word	0x40007000
 8004b08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b0c:	4b1b      	ldr	r3, [pc, #108]	; (8004b7c <HAL_RCC_OscConfig+0x4ec>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d028      	beq.n	8004b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d121      	bne.n	8004b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d11a      	bne.n	8004b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d111      	bne.n	8004b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b52:	085b      	lsrs	r3, r3, #1
 8004b54:	3b01      	subs	r3, #1
 8004b56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d107      	bne.n	8004b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d001      	beq.n	8004b70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e000      	b.n	8004b72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	40023800 	.word	0x40023800

08004b80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e0cc      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b94:	4b68      	ldr	r3, [pc, #416]	; (8004d38 <HAL_RCC_ClockConfig+0x1b8>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 030f 	and.w	r3, r3, #15
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d90c      	bls.n	8004bbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba2:	4b65      	ldr	r3, [pc, #404]	; (8004d38 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004baa:	4b63      	ldr	r3, [pc, #396]	; (8004d38 <HAL_RCC_ClockConfig+0x1b8>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d001      	beq.n	8004bbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e0b8      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d020      	beq.n	8004c0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d005      	beq.n	8004be0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bd4:	4b59      	ldr	r3, [pc, #356]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	4a58      	ldr	r2, [pc, #352]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004bda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0308 	and.w	r3, r3, #8
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d005      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bec:	4b53      	ldr	r3, [pc, #332]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	4a52      	ldr	r2, [pc, #328]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004bf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bf6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bf8:	4b50      	ldr	r3, [pc, #320]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	494d      	ldr	r1, [pc, #308]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d044      	beq.n	8004ca0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d107      	bne.n	8004c2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c1e:	4b47      	ldr	r3, [pc, #284]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d119      	bne.n	8004c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e07f      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d003      	beq.n	8004c3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	d107      	bne.n	8004c4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c3e:	4b3f      	ldr	r3, [pc, #252]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d109      	bne.n	8004c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e06f      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c4e:	4b3b      	ldr	r3, [pc, #236]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e067      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c5e:	4b37      	ldr	r3, [pc, #220]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f023 0203 	bic.w	r2, r3, #3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	4934      	ldr	r1, [pc, #208]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c70:	f7fd f85c 	bl	8001d2c <HAL_GetTick>
 8004c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c76:	e00a      	b.n	8004c8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c78:	f7fd f858 	bl	8001d2c <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e04f      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c8e:	4b2b      	ldr	r3, [pc, #172]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 020c 	and.w	r2, r3, #12
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d1eb      	bne.n	8004c78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ca0:	4b25      	ldr	r3, [pc, #148]	; (8004d38 <HAL_RCC_ClockConfig+0x1b8>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 030f 	and.w	r3, r3, #15
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d20c      	bcs.n	8004cc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cae:	4b22      	ldr	r3, [pc, #136]	; (8004d38 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cb6:	4b20      	ldr	r3, [pc, #128]	; (8004d38 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 030f 	and.w	r3, r3, #15
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d001      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e032      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d008      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cd4:	4b19      	ldr	r3, [pc, #100]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	4916      	ldr	r1, [pc, #88]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0308 	and.w	r3, r3, #8
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d009      	beq.n	8004d06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cf2:	4b12      	ldr	r3, [pc, #72]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	490e      	ldr	r1, [pc, #56]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d06:	f000 f821 	bl	8004d4c <HAL_RCC_GetSysClockFreq>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	091b      	lsrs	r3, r3, #4
 8004d12:	f003 030f 	and.w	r3, r3, #15
 8004d16:	490a      	ldr	r1, [pc, #40]	; (8004d40 <HAL_RCC_ClockConfig+0x1c0>)
 8004d18:	5ccb      	ldrb	r3, [r1, r3]
 8004d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d1e:	4a09      	ldr	r2, [pc, #36]	; (8004d44 <HAL_RCC_ClockConfig+0x1c4>)
 8004d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d22:	4b09      	ldr	r3, [pc, #36]	; (8004d48 <HAL_RCC_ClockConfig+0x1c8>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fc ffbc 	bl	8001ca4 <HAL_InitTick>

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	40023c00 	.word	0x40023c00
 8004d3c:	40023800 	.word	0x40023800
 8004d40:	0800a568 	.word	0x0800a568
 8004d44:	20000000 	.word	0x20000000
 8004d48:	2000004c 	.word	0x2000004c

08004d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d50:	b094      	sub	sp, #80	; 0x50
 8004d52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	647b      	str	r3, [r7, #68]	; 0x44
 8004d58:	2300      	movs	r3, #0
 8004d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d64:	4b79      	ldr	r3, [pc, #484]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f003 030c 	and.w	r3, r3, #12
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d00d      	beq.n	8004d8c <HAL_RCC_GetSysClockFreq+0x40>
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	f200 80e1 	bhi.w	8004f38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <HAL_RCC_GetSysClockFreq+0x34>
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	d003      	beq.n	8004d86 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d7e:	e0db      	b.n	8004f38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d80:	4b73      	ldr	r3, [pc, #460]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d82:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004d84:	e0db      	b.n	8004f3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d86:	4b73      	ldr	r3, [pc, #460]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d8a:	e0d8      	b.n	8004f3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d8c:	4b6f      	ldr	r3, [pc, #444]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d94:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d96:	4b6d      	ldr	r3, [pc, #436]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d063      	beq.n	8004e6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004da2:	4b6a      	ldr	r3, [pc, #424]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	099b      	lsrs	r3, r3, #6
 8004da8:	2200      	movs	r2, #0
 8004daa:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004db4:	633b      	str	r3, [r7, #48]	; 0x30
 8004db6:	2300      	movs	r3, #0
 8004db8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004dbe:	4622      	mov	r2, r4
 8004dc0:	462b      	mov	r3, r5
 8004dc2:	f04f 0000 	mov.w	r0, #0
 8004dc6:	f04f 0100 	mov.w	r1, #0
 8004dca:	0159      	lsls	r1, r3, #5
 8004dcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dd0:	0150      	lsls	r0, r2, #5
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	4621      	mov	r1, r4
 8004dd8:	1a51      	subs	r1, r2, r1
 8004dda:	6139      	str	r1, [r7, #16]
 8004ddc:	4629      	mov	r1, r5
 8004dde:	eb63 0301 	sbc.w	r3, r3, r1
 8004de2:	617b      	str	r3, [r7, #20]
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004df0:	4659      	mov	r1, fp
 8004df2:	018b      	lsls	r3, r1, #6
 8004df4:	4651      	mov	r1, sl
 8004df6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004dfa:	4651      	mov	r1, sl
 8004dfc:	018a      	lsls	r2, r1, #6
 8004dfe:	4651      	mov	r1, sl
 8004e00:	ebb2 0801 	subs.w	r8, r2, r1
 8004e04:	4659      	mov	r1, fp
 8004e06:	eb63 0901 	sbc.w	r9, r3, r1
 8004e0a:	f04f 0200 	mov.w	r2, #0
 8004e0e:	f04f 0300 	mov.w	r3, #0
 8004e12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e1e:	4690      	mov	r8, r2
 8004e20:	4699      	mov	r9, r3
 8004e22:	4623      	mov	r3, r4
 8004e24:	eb18 0303 	adds.w	r3, r8, r3
 8004e28:	60bb      	str	r3, [r7, #8]
 8004e2a:	462b      	mov	r3, r5
 8004e2c:	eb49 0303 	adc.w	r3, r9, r3
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	f04f 0200 	mov.w	r2, #0
 8004e36:	f04f 0300 	mov.w	r3, #0
 8004e3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e3e:	4629      	mov	r1, r5
 8004e40:	024b      	lsls	r3, r1, #9
 8004e42:	4621      	mov	r1, r4
 8004e44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e48:	4621      	mov	r1, r4
 8004e4a:	024a      	lsls	r2, r1, #9
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	4619      	mov	r1, r3
 8004e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e52:	2200      	movs	r2, #0
 8004e54:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e5c:	f7fb f9d0 	bl	8000200 <__aeabi_uldivmod>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	4613      	mov	r3, r2
 8004e66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e68:	e058      	b.n	8004f1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e6a:	4b38      	ldr	r3, [pc, #224]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	099b      	lsrs	r3, r3, #6
 8004e70:	2200      	movs	r2, #0
 8004e72:	4618      	mov	r0, r3
 8004e74:	4611      	mov	r1, r2
 8004e76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e7a:	623b      	str	r3, [r7, #32]
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e84:	4642      	mov	r2, r8
 8004e86:	464b      	mov	r3, r9
 8004e88:	f04f 0000 	mov.w	r0, #0
 8004e8c:	f04f 0100 	mov.w	r1, #0
 8004e90:	0159      	lsls	r1, r3, #5
 8004e92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e96:	0150      	lsls	r0, r2, #5
 8004e98:	4602      	mov	r2, r0
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	4641      	mov	r1, r8
 8004e9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ea2:	4649      	mov	r1, r9
 8004ea4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ea8:	f04f 0200 	mov.w	r2, #0
 8004eac:	f04f 0300 	mov.w	r3, #0
 8004eb0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004eb4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004eb8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ebc:	ebb2 040a 	subs.w	r4, r2, sl
 8004ec0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ec4:	f04f 0200 	mov.w	r2, #0
 8004ec8:	f04f 0300 	mov.w	r3, #0
 8004ecc:	00eb      	lsls	r3, r5, #3
 8004ece:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ed2:	00e2      	lsls	r2, r4, #3
 8004ed4:	4614      	mov	r4, r2
 8004ed6:	461d      	mov	r5, r3
 8004ed8:	4643      	mov	r3, r8
 8004eda:	18e3      	adds	r3, r4, r3
 8004edc:	603b      	str	r3, [r7, #0]
 8004ede:	464b      	mov	r3, r9
 8004ee0:	eb45 0303 	adc.w	r3, r5, r3
 8004ee4:	607b      	str	r3, [r7, #4]
 8004ee6:	f04f 0200 	mov.w	r2, #0
 8004eea:	f04f 0300 	mov.w	r3, #0
 8004eee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ef2:	4629      	mov	r1, r5
 8004ef4:	028b      	lsls	r3, r1, #10
 8004ef6:	4621      	mov	r1, r4
 8004ef8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004efc:	4621      	mov	r1, r4
 8004efe:	028a      	lsls	r2, r1, #10
 8004f00:	4610      	mov	r0, r2
 8004f02:	4619      	mov	r1, r3
 8004f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f06:	2200      	movs	r2, #0
 8004f08:	61bb      	str	r3, [r7, #24]
 8004f0a:	61fa      	str	r2, [r7, #28]
 8004f0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f10:	f7fb f976 	bl	8000200 <__aeabi_uldivmod>
 8004f14:	4602      	mov	r2, r0
 8004f16:	460b      	mov	r3, r1
 8004f18:	4613      	mov	r3, r2
 8004f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f1c:	4b0b      	ldr	r3, [pc, #44]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	0c1b      	lsrs	r3, r3, #16
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	3301      	adds	r3, #1
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004f2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f36:	e002      	b.n	8004f3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f38:	4b05      	ldr	r3, [pc, #20]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3750      	adds	r7, #80	; 0x50
 8004f44:	46bd      	mov	sp, r7
 8004f46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f4a:	bf00      	nop
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	00f42400 	.word	0x00f42400
 8004f54:	007a1200 	.word	0x007a1200

08004f58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f5c:	4b03      	ldr	r3, [pc, #12]	; (8004f6c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	20000000 	.word	0x20000000

08004f70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10b      	bne.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d105      	bne.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d075      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fa4:	4b91      	ldr	r3, [pc, #580]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004faa:	f7fc febf 	bl	8001d2c <HAL_GetTick>
 8004fae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fb0:	e008      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fb2:	f7fc febb 	bl	8001d2c <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d901      	bls.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e189      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fc4:	4b8a      	ldr	r3, [pc, #552]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1f0      	bne.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d009      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	019a      	lsls	r2, r3, #6
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	071b      	lsls	r3, r3, #28
 8004fe8:	4981      	ldr	r1, [pc, #516]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d01f      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ffc:	4b7c      	ldr	r3, [pc, #496]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005002:	0f1b      	lsrs	r3, r3, #28
 8005004:	f003 0307 	and.w	r3, r3, #7
 8005008:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	019a      	lsls	r2, r3, #6
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	061b      	lsls	r3, r3, #24
 8005016:	431a      	orrs	r2, r3
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	071b      	lsls	r3, r3, #28
 800501c:	4974      	ldr	r1, [pc, #464]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800501e:	4313      	orrs	r3, r2
 8005020:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005024:	4b72      	ldr	r3, [pc, #456]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800502a:	f023 021f 	bic.w	r2, r3, #31
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	3b01      	subs	r3, #1
 8005034:	496e      	ldr	r1, [pc, #440]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005036:	4313      	orrs	r3, r2
 8005038:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00d      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	019a      	lsls	r2, r3, #6
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	061b      	lsls	r3, r3, #24
 8005054:	431a      	orrs	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	071b      	lsls	r3, r3, #28
 800505c:	4964      	ldr	r1, [pc, #400]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800505e:	4313      	orrs	r3, r2
 8005060:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005064:	4b61      	ldr	r3, [pc, #388]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005066:	2201      	movs	r2, #1
 8005068:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800506a:	f7fc fe5f 	bl	8001d2c <HAL_GetTick>
 800506e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005070:	e008      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005072:	f7fc fe5b 	bl	8001d2c <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d901      	bls.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e129      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005084:	4b5a      	ldr	r3, [pc, #360]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0f0      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0304 	and.w	r3, r3, #4
 8005098:	2b00      	cmp	r3, #0
 800509a:	d105      	bne.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d079      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80050a8:	4b52      	ldr	r3, [pc, #328]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050ae:	f7fc fe3d 	bl	8001d2c <HAL_GetTick>
 80050b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050b4:	e008      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80050b6:	f7fc fe39 	bl	8001d2c <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d901      	bls.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e107      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050c8:	4b49      	ldr	r3, [pc, #292]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050d4:	d0ef      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0304 	and.w	r3, r3, #4
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d020      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050e2:	4b43      	ldr	r3, [pc, #268]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e8:	0f1b      	lsrs	r3, r3, #28
 80050ea:	f003 0307 	and.w	r3, r3, #7
 80050ee:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	019a      	lsls	r2, r3, #6
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	061b      	lsls	r3, r3, #24
 80050fc:	431a      	orrs	r2, r3
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	071b      	lsls	r3, r3, #28
 8005102:	493b      	ldr	r1, [pc, #236]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800510a:	4b39      	ldr	r3, [pc, #228]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800510c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005110:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	3b01      	subs	r3, #1
 800511a:	021b      	lsls	r3, r3, #8
 800511c:	4934      	ldr	r1, [pc, #208]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0308 	and.w	r3, r3, #8
 800512c:	2b00      	cmp	r3, #0
 800512e:	d01e      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005130:	4b2f      	ldr	r3, [pc, #188]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005136:	0e1b      	lsrs	r3, r3, #24
 8005138:	f003 030f 	and.w	r3, r3, #15
 800513c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	019a      	lsls	r2, r3, #6
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	061b      	lsls	r3, r3, #24
 8005148:	431a      	orrs	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	071b      	lsls	r3, r3, #28
 8005150:	4927      	ldr	r1, [pc, #156]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005152:	4313      	orrs	r3, r2
 8005154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005158:	4b25      	ldr	r3, [pc, #148]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800515a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800515e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	4922      	ldr	r1, [pc, #136]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005168:	4313      	orrs	r3, r2
 800516a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800516e:	4b21      	ldr	r3, [pc, #132]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005170:	2201      	movs	r2, #1
 8005172:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005174:	f7fc fdda 	bl	8001d2c <HAL_GetTick>
 8005178:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800517a:	e008      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800517c:	f7fc fdd6 	bl	8001d2c <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b02      	cmp	r3, #2
 8005188:	d901      	bls.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e0a4      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800518e:	4b18      	ldr	r3, [pc, #96]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005196:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800519a:	d1ef      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0320 	and.w	r3, r3, #32
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 808b 	beq.w	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051aa:	2300      	movs	r3, #0
 80051ac:	60fb      	str	r3, [r7, #12]
 80051ae:	4b10      	ldr	r3, [pc, #64]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	4a0f      	ldr	r2, [pc, #60]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b8:	6413      	str	r3, [r2, #64]	; 0x40
 80051ba:	4b0d      	ldr	r3, [pc, #52]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80051c6:	4b0c      	ldr	r3, [pc, #48]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a0b      	ldr	r2, [pc, #44]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80051cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051d2:	f7fc fdab 	bl	8001d2c <HAL_GetTick>
 80051d6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80051d8:	e010      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80051da:	f7fc fda7 	bl	8001d2c <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d909      	bls.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e075      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80051ec:	42470068 	.word	0x42470068
 80051f0:	40023800 	.word	0x40023800
 80051f4:	42470070 	.word	0x42470070
 80051f8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80051fc:	4b38      	ldr	r3, [pc, #224]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005204:	2b00      	cmp	r3, #0
 8005206:	d0e8      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005208:	4b36      	ldr	r3, [pc, #216]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800520a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005210:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d02f      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	429a      	cmp	r2, r3
 8005224:	d028      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005226:	4b2f      	ldr	r3, [pc, #188]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800522e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005230:	4b2d      	ldr	r3, [pc, #180]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005232:	2201      	movs	r2, #1
 8005234:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005236:	4b2c      	ldr	r3, [pc, #176]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800523c:	4a29      	ldr	r2, [pc, #164]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005242:	4b28      	ldr	r3, [pc, #160]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b01      	cmp	r3, #1
 800524c:	d114      	bne.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800524e:	f7fc fd6d 	bl	8001d2c <HAL_GetTick>
 8005252:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005254:	e00a      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005256:	f7fc fd69 	bl	8001d2c <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	f241 3288 	movw	r2, #5000	; 0x1388
 8005264:	4293      	cmp	r3, r2
 8005266:	d901      	bls.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e035      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800526c:	4b1d      	ldr	r3, [pc, #116]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800526e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0ee      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005280:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005284:	d10d      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005286:	4b17      	ldr	r3, [pc, #92]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005292:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800529a:	4912      	ldr	r1, [pc, #72]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800529c:	4313      	orrs	r3, r2
 800529e:	608b      	str	r3, [r1, #8]
 80052a0:	e005      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80052a2:	4b10      	ldr	r3, [pc, #64]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	4a0f      	ldr	r2, [pc, #60]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052a8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80052ac:	6093      	str	r3, [r2, #8]
 80052ae:	4b0d      	ldr	r3, [pc, #52]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ba:	490a      	ldr	r1, [pc, #40]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0310 	and.w	r3, r3, #16
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d004      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80052d2:	4b06      	ldr	r3, [pc, #24]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80052d4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3718      	adds	r7, #24
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	40007000 	.word	0x40007000
 80052e4:	40023800 	.word	0x40023800
 80052e8:	42470e40 	.word	0x42470e40
 80052ec:	424711e0 	.word	0x424711e0

080052f0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e025      	b.n	8005350 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	d106      	bne.n	800531e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f81d 	bl	8005358 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2202      	movs	r2, #2
 8005322:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3304      	adds	r3, #4
 800532e:	4619      	mov	r1, r3
 8005330:	4610      	mov	r0, r2
 8005332:	f000 fe6b 	bl	800600c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6818      	ldr	r0, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	461a      	mov	r2, r3
 8005340:	6839      	ldr	r1, [r7, #0]
 8005342:	f000 fec0 	bl	80060c6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800537e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8005380:	7dfb      	ldrb	r3, [r7, #23]
 8005382:	2b02      	cmp	r3, #2
 8005384:	d101      	bne.n	800538a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8005386:	2302      	movs	r3, #2
 8005388:	e021      	b.n	80053ce <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800538a:	7dfb      	ldrb	r3, [r7, #23]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d002      	beq.n	8005396 <HAL_SDRAM_SendCommand+0x2a>
 8005390:	7dfb      	ldrb	r3, [r7, #23]
 8005392:	2b05      	cmp	r3, #5
 8005394:	d118      	bne.n	80053c8 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2202      	movs	r2, #2
 800539a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	68b9      	ldr	r1, [r7, #8]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 fef6 	bl	8006198 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d104      	bne.n	80053be <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2205      	movs	r2, #5
 80053b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80053bc:	e006      	b.n	80053cc <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80053c6:	e001      	b.n	80053cc <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e000      	b.n	80053ce <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b082      	sub	sp, #8
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
 80053de:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d101      	bne.n	80053f0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80053ec:	2302      	movs	r3, #2
 80053ee:	e016      	b.n	800541e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d10f      	bne.n	800541c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6839      	ldr	r1, [r7, #0]
 800540a:	4618      	mov	r0, r3
 800540c:	f000 ff01 	bl	8006212 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
 800541a:	e000      	b.n	800541e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
}
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b082      	sub	sp, #8
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e07b      	b.n	8005530 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543c:	2b00      	cmp	r3, #0
 800543e:	d108      	bne.n	8005452 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005448:	d009      	beq.n	800545e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	61da      	str	r2, [r3, #28]
 8005450:	e005      	b.n	800545e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	d106      	bne.n	800547e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f885 	bl	8005588 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2202      	movs	r2, #2
 8005482:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005494:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054a6:	431a      	orrs	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054b0:	431a      	orrs	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	431a      	orrs	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	431a      	orrs	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	69db      	ldr	r3, [r3, #28]
 80054d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054d8:	431a      	orrs	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e2:	ea42 0103 	orr.w	r1, r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	0c1b      	lsrs	r3, r3, #16
 80054fc:	f003 0104 	and.w	r1, r3, #4
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005504:	f003 0210 	and.w	r2, r3, #16
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	69da      	ldr	r2, [r3, #28]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800551e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e01a      	b.n	8005580 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2202      	movs	r2, #2
 800554e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005560:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f81a 	bl	800559c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3708      	adds	r7, #8
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b088      	sub	sp, #32
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	603b      	str	r3, [r7, #0]
 80055bc:	4613      	mov	r3, r2
 80055be:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055c0:	2300      	movs	r3, #0
 80055c2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d101      	bne.n	80055d2 <HAL_SPI_Transmit+0x22>
 80055ce:	2302      	movs	r3, #2
 80055d0:	e126      	b.n	8005820 <HAL_SPI_Transmit+0x270>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055da:	f7fc fba7 	bl	8001d2c <HAL_GetTick>
 80055de:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80055e0:	88fb      	ldrh	r3, [r7, #6]
 80055e2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d002      	beq.n	80055f6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80055f0:	2302      	movs	r3, #2
 80055f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055f4:	e10b      	b.n	800580e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <HAL_SPI_Transmit+0x52>
 80055fc:	88fb      	ldrh	r3, [r7, #6]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d102      	bne.n	8005608 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005606:	e102      	b.n	800580e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2203      	movs	r2, #3
 800560c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	88fa      	ldrh	r2, [r7, #6]
 8005620:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	88fa      	ldrh	r2, [r7, #6]
 8005626:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800564e:	d10f      	bne.n	8005670 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800565e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800566e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567a:	2b40      	cmp	r3, #64	; 0x40
 800567c:	d007      	beq.n	800568e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800568c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005696:	d14b      	bne.n	8005730 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <HAL_SPI_Transmit+0xf6>
 80056a0:	8afb      	ldrh	r3, [r7, #22]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d13e      	bne.n	8005724 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056aa:	881a      	ldrh	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b6:	1c9a      	adds	r2, r3, #2
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	3b01      	subs	r3, #1
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056ca:	e02b      	b.n	8005724 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d112      	bne.n	8005700 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056de:	881a      	ldrh	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ea:	1c9a      	adds	r2, r3, #2
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	3b01      	subs	r3, #1
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80056fe:	e011      	b.n	8005724 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005700:	f7fc fb14 	bl	8001d2c <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	429a      	cmp	r2, r3
 800570e:	d803      	bhi.n	8005718 <HAL_SPI_Transmit+0x168>
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005716:	d102      	bne.n	800571e <HAL_SPI_Transmit+0x16e>
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d102      	bne.n	8005724 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005722:	e074      	b.n	800580e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005728:	b29b      	uxth	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1ce      	bne.n	80056cc <HAL_SPI_Transmit+0x11c>
 800572e:	e04c      	b.n	80057ca <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d002      	beq.n	800573e <HAL_SPI_Transmit+0x18e>
 8005738:	8afb      	ldrh	r3, [r7, #22]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d140      	bne.n	80057c0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	330c      	adds	r3, #12
 8005748:	7812      	ldrb	r2, [r2, #0]
 800574a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800575a:	b29b      	uxth	r3, r3
 800575c:	3b01      	subs	r3, #1
 800575e:	b29a      	uxth	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005764:	e02c      	b.n	80057c0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b02      	cmp	r3, #2
 8005772:	d113      	bne.n	800579c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	330c      	adds	r3, #12
 800577e:	7812      	ldrb	r2, [r2, #0]
 8005780:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005790:	b29b      	uxth	r3, r3
 8005792:	3b01      	subs	r3, #1
 8005794:	b29a      	uxth	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	86da      	strh	r2, [r3, #54]	; 0x36
 800579a:	e011      	b.n	80057c0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800579c:	f7fc fac6 	bl	8001d2c <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d803      	bhi.n	80057b4 <HAL_SPI_Transmit+0x204>
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b2:	d102      	bne.n	80057ba <HAL_SPI_Transmit+0x20a>
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d102      	bne.n	80057c0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057be:	e026      	b.n	800580e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1cd      	bne.n	8005766 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	6839      	ldr	r1, [r7, #0]
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 fbda 	bl	8005f88 <SPI_EndRxTxTransaction>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d002      	beq.n	80057e0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2220      	movs	r2, #32
 80057de:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10a      	bne.n	80057fe <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057e8:	2300      	movs	r3, #0
 80057ea:	613b      	str	r3, [r7, #16]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	613b      	str	r3, [r7, #16]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	613b      	str	r3, [r7, #16]
 80057fc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005802:	2b00      	cmp	r3, #0
 8005804:	d002      	beq.n	800580c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	77fb      	strb	r3, [r7, #31]
 800580a:	e000      	b.n	800580e <HAL_SPI_Transmit+0x25e>
  }

error:
 800580c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800581e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3720      	adds	r7, #32
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b088      	sub	sp, #32
 800582c:	af02      	add	r7, sp, #8
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	603b      	str	r3, [r7, #0]
 8005834:	4613      	mov	r3, r2
 8005836:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005838:	2300      	movs	r3, #0
 800583a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005844:	d112      	bne.n	800586c <HAL_SPI_Receive+0x44>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10e      	bne.n	800586c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2204      	movs	r2, #4
 8005852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005856:	88fa      	ldrh	r2, [r7, #6]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	9300      	str	r3, [sp, #0]
 800585c:	4613      	mov	r3, r2
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	68b9      	ldr	r1, [r7, #8]
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f000 f8f1 	bl	8005a4a <HAL_SPI_TransmitReceive>
 8005868:	4603      	mov	r3, r0
 800586a:	e0ea      	b.n	8005a42 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005872:	2b01      	cmp	r3, #1
 8005874:	d101      	bne.n	800587a <HAL_SPI_Receive+0x52>
 8005876:	2302      	movs	r3, #2
 8005878:	e0e3      	b.n	8005a42 <HAL_SPI_Receive+0x21a>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005882:	f7fc fa53 	bl	8001d2c <HAL_GetTick>
 8005886:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b01      	cmp	r3, #1
 8005892:	d002      	beq.n	800589a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005894:	2302      	movs	r3, #2
 8005896:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005898:	e0ca      	b.n	8005a30 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <HAL_SPI_Receive+0x7e>
 80058a0:	88fb      	ldrh	r3, [r7, #6]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d102      	bne.n	80058ac <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80058aa:	e0c1      	b.n	8005a30 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2204      	movs	r2, #4
 80058b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	88fa      	ldrh	r2, [r7, #6]
 80058c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	88fa      	ldrh	r2, [r7, #6]
 80058ca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058f2:	d10f      	bne.n	8005914 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005902:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005912:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591e:	2b40      	cmp	r3, #64	; 0x40
 8005920:	d007      	beq.n	8005932 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005930:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d162      	bne.n	8005a00 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800593a:	e02e      	b.n	800599a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b01      	cmp	r3, #1
 8005948:	d115      	bne.n	8005976 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f103 020c 	add.w	r2, r3, #12
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005956:	7812      	ldrb	r2, [r2, #0]
 8005958:	b2d2      	uxtb	r2, r2
 800595a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005960:	1c5a      	adds	r2, r3, #1
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800596a:	b29b      	uxth	r3, r3
 800596c:	3b01      	subs	r3, #1
 800596e:	b29a      	uxth	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005974:	e011      	b.n	800599a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005976:	f7fc f9d9 	bl	8001d2c <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	429a      	cmp	r2, r3
 8005984:	d803      	bhi.n	800598e <HAL_SPI_Receive+0x166>
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598c:	d102      	bne.n	8005994 <HAL_SPI_Receive+0x16c>
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d102      	bne.n	800599a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005998:	e04a      	b.n	8005a30 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800599e:	b29b      	uxth	r3, r3
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1cb      	bne.n	800593c <HAL_SPI_Receive+0x114>
 80059a4:	e031      	b.n	8005a0a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d113      	bne.n	80059dc <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059be:	b292      	uxth	r2, r2
 80059c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c6:	1c9a      	adds	r2, r3, #2
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	3b01      	subs	r3, #1
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059da:	e011      	b.n	8005a00 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059dc:	f7fc f9a6 	bl	8001d2c <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d803      	bhi.n	80059f4 <HAL_SPI_Receive+0x1cc>
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f2:	d102      	bne.n	80059fa <HAL_SPI_Receive+0x1d2>
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d102      	bne.n	8005a00 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80059fe:	e017      	b.n	8005a30 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1cd      	bne.n	80059a6 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	6839      	ldr	r1, [r7, #0]
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f000 fa54 	bl	8005ebc <SPI_EndRxTransaction>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d002      	beq.n	8005a20 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	75fb      	strb	r3, [r7, #23]
 8005a2c:	e000      	b.n	8005a30 <HAL_SPI_Receive+0x208>
  }

error :
 8005a2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b08c      	sub	sp, #48	; 0x30
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	60f8      	str	r0, [r7, #12]
 8005a52:	60b9      	str	r1, [r7, #8]
 8005a54:	607a      	str	r2, [r7, #4]
 8005a56:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d101      	bne.n	8005a70 <HAL_SPI_TransmitReceive+0x26>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	e18a      	b.n	8005d86 <HAL_SPI_TransmitReceive+0x33c>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a78:	f7fc f958 	bl	8001d2c <HAL_GetTick>
 8005a7c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005a8e:	887b      	ldrh	r3, [r7, #2]
 8005a90:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d00f      	beq.n	8005aba <HAL_SPI_TransmitReceive+0x70>
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aa0:	d107      	bne.n	8005ab2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d103      	bne.n	8005ab2 <HAL_SPI_TransmitReceive+0x68>
 8005aaa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	d003      	beq.n	8005aba <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ab8:	e15b      	b.n	8005d72 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d005      	beq.n	8005acc <HAL_SPI_TransmitReceive+0x82>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d002      	beq.n	8005acc <HAL_SPI_TransmitReceive+0x82>
 8005ac6:	887b      	ldrh	r3, [r7, #2]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d103      	bne.n	8005ad4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ad2:	e14e      	b.n	8005d72 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b04      	cmp	r3, #4
 8005ade:	d003      	beq.n	8005ae8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2205      	movs	r2, #5
 8005ae4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	887a      	ldrh	r2, [r7, #2]
 8005af8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	887a      	ldrh	r2, [r7, #2]
 8005afe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	887a      	ldrh	r2, [r7, #2]
 8005b0a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	887a      	ldrh	r2, [r7, #2]
 8005b10:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b28:	2b40      	cmp	r3, #64	; 0x40
 8005b2a:	d007      	beq.n	8005b3c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b44:	d178      	bne.n	8005c38 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d002      	beq.n	8005b54 <HAL_SPI_TransmitReceive+0x10a>
 8005b4e:	8b7b      	ldrh	r3, [r7, #26]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d166      	bne.n	8005c22 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b58:	881a      	ldrh	r2, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b64:	1c9a      	adds	r2, r3, #2
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	3b01      	subs	r3, #1
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b78:	e053      	b.n	8005c22 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d11b      	bne.n	8005bc0 <HAL_SPI_TransmitReceive+0x176>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d016      	beq.n	8005bc0 <HAL_SPI_TransmitReceive+0x176>
 8005b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d113      	bne.n	8005bc0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9c:	881a      	ldrh	r2, [r3, #0]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba8:	1c9a      	adds	r2, r3, #2
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d119      	bne.n	8005c02 <HAL_SPI_TransmitReceive+0x1b8>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d014      	beq.n	8005c02 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68da      	ldr	r2, [r3, #12]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be2:	b292      	uxth	r2, r2
 8005be4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bea:	1c9a      	adds	r2, r3, #2
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c02:	f7fc f893 	bl	8001d2c <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d807      	bhi.n	8005c22 <HAL_SPI_TransmitReceive+0x1d8>
 8005c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c18:	d003      	beq.n	8005c22 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c20:	e0a7      	b.n	8005d72 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1a6      	bne.n	8005b7a <HAL_SPI_TransmitReceive+0x130>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1a1      	bne.n	8005b7a <HAL_SPI_TransmitReceive+0x130>
 8005c36:	e07c      	b.n	8005d32 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d002      	beq.n	8005c46 <HAL_SPI_TransmitReceive+0x1fc>
 8005c40:	8b7b      	ldrh	r3, [r7, #26]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d16b      	bne.n	8005d1e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	330c      	adds	r3, #12
 8005c50:	7812      	ldrb	r2, [r2, #0]
 8005c52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c58:	1c5a      	adds	r2, r3, #1
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	3b01      	subs	r3, #1
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c6c:	e057      	b.n	8005d1e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f003 0302 	and.w	r3, r3, #2
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d11c      	bne.n	8005cb6 <HAL_SPI_TransmitReceive+0x26c>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d017      	beq.n	8005cb6 <HAL_SPI_TransmitReceive+0x26c>
 8005c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d114      	bne.n	8005cb6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	330c      	adds	r3, #12
 8005c96:	7812      	ldrb	r2, [r2, #0]
 8005c98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9e:	1c5a      	adds	r2, r3, #1
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	3b01      	subs	r3, #1
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d119      	bne.n	8005cf8 <HAL_SPI_TransmitReceive+0x2ae>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d014      	beq.n	8005cf8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68da      	ldr	r2, [r3, #12]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd8:	b2d2      	uxtb	r2, r2
 8005cda:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce0:	1c5a      	adds	r2, r3, #1
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	3b01      	subs	r3, #1
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005cf8:	f7fc f818 	bl	8001d2c <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d803      	bhi.n	8005d10 <HAL_SPI_TransmitReceive+0x2c6>
 8005d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d0e:	d102      	bne.n	8005d16 <HAL_SPI_TransmitReceive+0x2cc>
 8005d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d103      	bne.n	8005d1e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005d1c:	e029      	b.n	8005d72 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1a2      	bne.n	8005c6e <HAL_SPI_TransmitReceive+0x224>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d19d      	bne.n	8005c6e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f000 f926 	bl	8005f88 <SPI_EndRxTxTransaction>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d006      	beq.n	8005d50 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005d4e:	e010      	b.n	8005d72 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10b      	bne.n	8005d70 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d58:	2300      	movs	r3, #0
 8005d5a:	617b      	str	r3, [r7, #20]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	617b      	str	r3, [r7, #20]
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	e000      	b.n	8005d72 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005d70:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3730      	adds	r7, #48	; 0x30
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d9c:	b2db      	uxtb	r3, r3
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
	...

08005dac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b088      	sub	sp, #32
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	603b      	str	r3, [r7, #0]
 8005db8:	4613      	mov	r3, r2
 8005dba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005dbc:	f7fb ffb6 	bl	8001d2c <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc4:	1a9b      	subs	r3, r3, r2
 8005dc6:	683a      	ldr	r2, [r7, #0]
 8005dc8:	4413      	add	r3, r2
 8005dca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005dcc:	f7fb ffae 	bl	8001d2c <HAL_GetTick>
 8005dd0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005dd2:	4b39      	ldr	r3, [pc, #228]	; (8005eb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	015b      	lsls	r3, r3, #5
 8005dd8:	0d1b      	lsrs	r3, r3, #20
 8005dda:	69fa      	ldr	r2, [r7, #28]
 8005ddc:	fb02 f303 	mul.w	r3, r2, r3
 8005de0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005de2:	e054      	b.n	8005e8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dea:	d050      	beq.n	8005e8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005dec:	f7fb ff9e 	bl	8001d2c <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	69fa      	ldr	r2, [r7, #28]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d902      	bls.n	8005e02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d13d      	bne.n	8005e7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e1a:	d111      	bne.n	8005e40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e24:	d004      	beq.n	8005e30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e2e:	d107      	bne.n	8005e40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e48:	d10f      	bne.n	8005e6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e017      	b.n	8005eae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d101      	bne.n	8005e88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	4013      	ands	r3, r2
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	bf0c      	ite	eq
 8005e9e:	2301      	moveq	r3, #1
 8005ea0:	2300      	movne	r3, #0
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	79fb      	ldrb	r3, [r7, #7]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d19b      	bne.n	8005de4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3720      	adds	r7, #32
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20000000 	.word	0x20000000

08005ebc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af02      	add	r7, sp, #8
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ed0:	d111      	bne.n	8005ef6 <SPI_EndRxTransaction+0x3a>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eda:	d004      	beq.n	8005ee6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ee4:	d107      	bne.n	8005ef6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ef4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005efe:	d12a      	bne.n	8005f56 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f08:	d012      	beq.n	8005f30 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2200      	movs	r2, #0
 8005f12:	2180      	movs	r1, #128	; 0x80
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f7ff ff49 	bl	8005dac <SPI_WaitFlagStateUntilTimeout>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d02d      	beq.n	8005f7c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f24:	f043 0220 	orr.w	r2, r3, #32
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e026      	b.n	8005f7e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	9300      	str	r3, [sp, #0]
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	2200      	movs	r2, #0
 8005f38:	2101      	movs	r1, #1
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f7ff ff36 	bl	8005dac <SPI_WaitFlagStateUntilTimeout>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d01a      	beq.n	8005f7c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f4a:	f043 0220 	orr.w	r2, r3, #32
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e013      	b.n	8005f7e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	2101      	movs	r1, #1
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f7ff ff23 	bl	8005dac <SPI_WaitFlagStateUntilTimeout>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d007      	beq.n	8005f7c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f70:	f043 0220 	orr.w	r2, r3, #32
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e000      	b.n	8005f7e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
	...

08005f88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b088      	sub	sp, #32
 8005f8c:	af02      	add	r7, sp, #8
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f94:	4b1b      	ldr	r3, [pc, #108]	; (8006004 <SPI_EndRxTxTransaction+0x7c>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a1b      	ldr	r2, [pc, #108]	; (8006008 <SPI_EndRxTxTransaction+0x80>)
 8005f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9e:	0d5b      	lsrs	r3, r3, #21
 8005fa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005fa4:	fb02 f303 	mul.w	r3, r2, r3
 8005fa8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fb2:	d112      	bne.n	8005fda <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	9300      	str	r3, [sp, #0]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	2180      	movs	r1, #128	; 0x80
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f7ff fef4 	bl	8005dac <SPI_WaitFlagStateUntilTimeout>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d016      	beq.n	8005ff8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fce:	f043 0220 	orr.w	r2, r3, #32
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e00f      	b.n	8005ffa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00a      	beq.n	8005ff6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff0:	2b80      	cmp	r3, #128	; 0x80
 8005ff2:	d0f2      	beq.n	8005fda <SPI_EndRxTxTransaction+0x52>
 8005ff4:	e000      	b.n	8005ff8 <SPI_EndRxTxTransaction+0x70>
        break;
 8005ff6:	bf00      	nop
  }

  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3718      	adds	r7, #24
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	20000000 	.word	0x20000000
 8006008:	165e9f81 	.word	0x165e9f81

0800600c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d123      	bne.n	8006066 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006026:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800602a:	683a      	ldr	r2, [r7, #0]
 800602c:	6851      	ldr	r1, [r2, #4]
 800602e:	683a      	ldr	r2, [r7, #0]
 8006030:	6892      	ldr	r2, [r2, #8]
 8006032:	4311      	orrs	r1, r2
 8006034:	683a      	ldr	r2, [r7, #0]
 8006036:	68d2      	ldr	r2, [r2, #12]
 8006038:	4311      	orrs	r1, r2
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	6912      	ldr	r2, [r2, #16]
 800603e:	4311      	orrs	r1, r2
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	6952      	ldr	r2, [r2, #20]
 8006044:	4311      	orrs	r1, r2
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	6992      	ldr	r2, [r2, #24]
 800604a:	4311      	orrs	r1, r2
 800604c:	683a      	ldr	r2, [r7, #0]
 800604e:	69d2      	ldr	r2, [r2, #28]
 8006050:	4311      	orrs	r1, r2
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	6a12      	ldr	r2, [r2, #32]
 8006056:	4311      	orrs	r1, r2
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800605c:	430a      	orrs	r2, r1
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	601a      	str	r2, [r3, #0]
 8006064:	e028      	b.n	80060b8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	69d9      	ldr	r1, [r3, #28]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	4319      	orrs	r1, r3
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607c:	430b      	orrs	r3, r1
 800607e:	431a      	orrs	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800608c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006090:	683a      	ldr	r2, [r7, #0]
 8006092:	6851      	ldr	r1, [r2, #4]
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	6892      	ldr	r2, [r2, #8]
 8006098:	4311      	orrs	r1, r2
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	68d2      	ldr	r2, [r2, #12]
 800609e:	4311      	orrs	r1, r2
 80060a0:	683a      	ldr	r2, [r7, #0]
 80060a2:	6912      	ldr	r2, [r2, #16]
 80060a4:	4311      	orrs	r1, r2
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	6952      	ldr	r2, [r2, #20]
 80060aa:	4311      	orrs	r1, r2
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	6992      	ldr	r2, [r2, #24]
 80060b0:	430a      	orrs	r2, r1
 80060b2:	431a      	orrs	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b085      	sub	sp, #20
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	60f8      	str	r0, [r7, #12]
 80060ce:	60b9      	str	r1, [r7, #8]
 80060d0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d128      	bne.n	800612a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	1e59      	subs	r1, r3, #1
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	3b01      	subs	r3, #1
 80060ec:	011b      	lsls	r3, r3, #4
 80060ee:	4319      	orrs	r1, r3
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	3b01      	subs	r3, #1
 80060f6:	021b      	lsls	r3, r3, #8
 80060f8:	4319      	orrs	r1, r3
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	3b01      	subs	r3, #1
 8006100:	031b      	lsls	r3, r3, #12
 8006102:	4319      	orrs	r1, r3
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	3b01      	subs	r3, #1
 800610a:	041b      	lsls	r3, r3, #16
 800610c:	4319      	orrs	r1, r3
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	3b01      	subs	r3, #1
 8006114:	051b      	lsls	r3, r3, #20
 8006116:	4319      	orrs	r1, r3
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	3b01      	subs	r3, #1
 800611e:	061b      	lsls	r3, r3, #24
 8006120:	430b      	orrs	r3, r1
 8006122:	431a      	orrs	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	609a      	str	r2, [r3, #8]
 8006128:	e02f      	b.n	800618a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006132:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	68d2      	ldr	r2, [r2, #12]
 800613a:	3a01      	subs	r2, #1
 800613c:	0311      	lsls	r1, r2, #12
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	6952      	ldr	r2, [r2, #20]
 8006142:	3a01      	subs	r2, #1
 8006144:	0512      	lsls	r2, r2, #20
 8006146:	430a      	orrs	r2, r1
 8006148:	431a      	orrs	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	1e59      	subs	r1, r3, #1
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	3b01      	subs	r3, #1
 8006162:	011b      	lsls	r3, r3, #4
 8006164:	4319      	orrs	r1, r3
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	3b01      	subs	r3, #1
 800616c:	021b      	lsls	r3, r3, #8
 800616e:	4319      	orrs	r1, r3
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	3b01      	subs	r3, #1
 8006176:	041b      	lsls	r3, r3, #16
 8006178:	4319      	orrs	r1, r3
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	3b01      	subs	r3, #1
 8006180:	061b      	lsls	r3, r3, #24
 8006182:	430b      	orrs	r3, r1
 8006184:	431a      	orrs	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80061a4:	2300      	movs	r3, #0
 80061a6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	0d9b      	lsrs	r3, r3, #22
 80061ae:	059b      	lsls	r3, r3, #22
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	6811      	ldr	r1, [r2, #0]
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	6852      	ldr	r2, [r2, #4]
 80061b8:	4311      	orrs	r1, r2
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	6892      	ldr	r2, [r2, #8]
 80061be:	3a01      	subs	r2, #1
 80061c0:	0152      	lsls	r2, r2, #5
 80061c2:	4311      	orrs	r1, r2
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	68d2      	ldr	r2, [r2, #12]
 80061c8:	0252      	lsls	r2, r2, #9
 80061ca:	430a      	orrs	r2, r1
 80061cc:	431a      	orrs	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80061d2:	f7fb fdab 	bl	8001d2c <HAL_GetTick>
 80061d6:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80061d8:	e010      	b.n	80061fc <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e0:	d00c      	beq.n	80061fc <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d007      	beq.n	80061f8 <FMC_SDRAM_SendCommand+0x60>
 80061e8:	f7fb fda0 	bl	8001d2c <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d201      	bcs.n	80061fc <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e006      	b.n	800620a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	f003 0320 	and.w	r3, r3, #32
 8006204:	2b20      	cmp	r3, #32
 8006206:	d0e8      	beq.n	80061da <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3718      	adds	r7, #24
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006212:	b480      	push	{r7}
 8006214:	b083      	sub	sp, #12
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
 800621a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	695b      	ldr	r3, [r3, #20]
 8006220:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006224:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	0052      	lsls	r2, r2, #1
 800622c:	431a      	orrs	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006240:	b084      	sub	sp, #16
 8006242:	b580      	push	{r7, lr}
 8006244:	b084      	sub	sp, #16
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
 800624a:	f107 001c 	add.w	r0, r7, #28
 800624e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006254:	2b01      	cmp	r3, #1
 8006256:	d122      	bne.n	800629e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800626c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006282:	2b01      	cmp	r3, #1
 8006284:	d105      	bne.n	8006292 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f001 fbee 	bl	8007a74 <USB_CoreReset>
 8006298:	4603      	mov	r3, r0
 800629a:	73fb      	strb	r3, [r7, #15]
 800629c:	e01a      	b.n	80062d4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f001 fbe2 	bl	8007a74 <USB_CoreReset>
 80062b0:	4603      	mov	r3, r0
 80062b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80062b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d106      	bne.n	80062c8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	639a      	str	r2, [r3, #56]	; 0x38
 80062c6:	e005      	b.n	80062d4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80062d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d10b      	bne.n	80062f2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f043 0206 	orr.w	r2, r3, #6
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f043 0220 	orr.w	r2, r3, #32
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80062f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062fe:	b004      	add	sp, #16
 8006300:	4770      	bx	lr
	...

08006304 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	4613      	mov	r3, r2
 8006310:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006312:	79fb      	ldrb	r3, [r7, #7]
 8006314:	2b02      	cmp	r3, #2
 8006316:	d165      	bne.n	80063e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	4a41      	ldr	r2, [pc, #260]	; (8006420 <USB_SetTurnaroundTime+0x11c>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d906      	bls.n	800632e <USB_SetTurnaroundTime+0x2a>
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	4a40      	ldr	r2, [pc, #256]	; (8006424 <USB_SetTurnaroundTime+0x120>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d202      	bcs.n	800632e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006328:	230f      	movs	r3, #15
 800632a:	617b      	str	r3, [r7, #20]
 800632c:	e062      	b.n	80063f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	4a3c      	ldr	r2, [pc, #240]	; (8006424 <USB_SetTurnaroundTime+0x120>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d306      	bcc.n	8006344 <USB_SetTurnaroundTime+0x40>
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	4a3b      	ldr	r2, [pc, #236]	; (8006428 <USB_SetTurnaroundTime+0x124>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d202      	bcs.n	8006344 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800633e:	230e      	movs	r3, #14
 8006340:	617b      	str	r3, [r7, #20]
 8006342:	e057      	b.n	80063f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	4a38      	ldr	r2, [pc, #224]	; (8006428 <USB_SetTurnaroundTime+0x124>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d306      	bcc.n	800635a <USB_SetTurnaroundTime+0x56>
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	4a37      	ldr	r2, [pc, #220]	; (800642c <USB_SetTurnaroundTime+0x128>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d202      	bcs.n	800635a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006354:	230d      	movs	r3, #13
 8006356:	617b      	str	r3, [r7, #20]
 8006358:	e04c      	b.n	80063f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	4a33      	ldr	r2, [pc, #204]	; (800642c <USB_SetTurnaroundTime+0x128>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d306      	bcc.n	8006370 <USB_SetTurnaroundTime+0x6c>
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	4a32      	ldr	r2, [pc, #200]	; (8006430 <USB_SetTurnaroundTime+0x12c>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d802      	bhi.n	8006370 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800636a:	230c      	movs	r3, #12
 800636c:	617b      	str	r3, [r7, #20]
 800636e:	e041      	b.n	80063f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	4a2f      	ldr	r2, [pc, #188]	; (8006430 <USB_SetTurnaroundTime+0x12c>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d906      	bls.n	8006386 <USB_SetTurnaroundTime+0x82>
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	4a2e      	ldr	r2, [pc, #184]	; (8006434 <USB_SetTurnaroundTime+0x130>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d802      	bhi.n	8006386 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006380:	230b      	movs	r3, #11
 8006382:	617b      	str	r3, [r7, #20]
 8006384:	e036      	b.n	80063f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	4a2a      	ldr	r2, [pc, #168]	; (8006434 <USB_SetTurnaroundTime+0x130>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d906      	bls.n	800639c <USB_SetTurnaroundTime+0x98>
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	4a29      	ldr	r2, [pc, #164]	; (8006438 <USB_SetTurnaroundTime+0x134>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d802      	bhi.n	800639c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006396:	230a      	movs	r3, #10
 8006398:	617b      	str	r3, [r7, #20]
 800639a:	e02b      	b.n	80063f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	4a26      	ldr	r2, [pc, #152]	; (8006438 <USB_SetTurnaroundTime+0x134>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d906      	bls.n	80063b2 <USB_SetTurnaroundTime+0xae>
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	4a25      	ldr	r2, [pc, #148]	; (800643c <USB_SetTurnaroundTime+0x138>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d202      	bcs.n	80063b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80063ac:	2309      	movs	r3, #9
 80063ae:	617b      	str	r3, [r7, #20]
 80063b0:	e020      	b.n	80063f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	4a21      	ldr	r2, [pc, #132]	; (800643c <USB_SetTurnaroundTime+0x138>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d306      	bcc.n	80063c8 <USB_SetTurnaroundTime+0xc4>
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	4a20      	ldr	r2, [pc, #128]	; (8006440 <USB_SetTurnaroundTime+0x13c>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d802      	bhi.n	80063c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80063c2:	2308      	movs	r3, #8
 80063c4:	617b      	str	r3, [r7, #20]
 80063c6:	e015      	b.n	80063f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	4a1d      	ldr	r2, [pc, #116]	; (8006440 <USB_SetTurnaroundTime+0x13c>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d906      	bls.n	80063de <USB_SetTurnaroundTime+0xda>
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	4a1c      	ldr	r2, [pc, #112]	; (8006444 <USB_SetTurnaroundTime+0x140>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d202      	bcs.n	80063de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80063d8:	2307      	movs	r3, #7
 80063da:	617b      	str	r3, [r7, #20]
 80063dc:	e00a      	b.n	80063f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80063de:	2306      	movs	r3, #6
 80063e0:	617b      	str	r3, [r7, #20]
 80063e2:	e007      	b.n	80063f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80063e4:	79fb      	ldrb	r3, [r7, #7]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d102      	bne.n	80063f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80063ea:	2309      	movs	r3, #9
 80063ec:	617b      	str	r3, [r7, #20]
 80063ee:	e001      	b.n	80063f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80063f0:	2309      	movs	r3, #9
 80063f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	68da      	ldr	r2, [r3, #12]
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	029b      	lsls	r3, r3, #10
 8006408:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800640c:	431a      	orrs	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	371c      	adds	r7, #28
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr
 8006420:	00d8acbf 	.word	0x00d8acbf
 8006424:	00e4e1c0 	.word	0x00e4e1c0
 8006428:	00f42400 	.word	0x00f42400
 800642c:	01067380 	.word	0x01067380
 8006430:	011a499f 	.word	0x011a499f
 8006434:	01312cff 	.word	0x01312cff
 8006438:	014ca43f 	.word	0x014ca43f
 800643c:	016e3600 	.word	0x016e3600
 8006440:	01a6ab1f 	.word	0x01a6ab1f
 8006444:	01e84800 	.word	0x01e84800

08006448 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	f043 0201 	orr.w	r2, r3, #1
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	370c      	adds	r7, #12
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800646a:	b480      	push	{r7}
 800646c:	b083      	sub	sp, #12
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f023 0201 	bic.w	r2, r3, #1
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	460b      	mov	r3, r1
 8006496:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006498:	2300      	movs	r3, #0
 800649a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80064a8:	78fb      	ldrb	r3, [r7, #3]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d115      	bne.n	80064da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80064ba:	2001      	movs	r0, #1
 80064bc:	f7fb fc42 	bl	8001d44 <HAL_Delay>
      ms++;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	3301      	adds	r3, #1
 80064c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f001 fa45 	bl	8007956 <USB_GetMode>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d01e      	beq.n	8006510 <USB_SetCurrentMode+0x84>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2b31      	cmp	r3, #49	; 0x31
 80064d6:	d9f0      	bls.n	80064ba <USB_SetCurrentMode+0x2e>
 80064d8:	e01a      	b.n	8006510 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80064da:	78fb      	ldrb	r3, [r7, #3]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d115      	bne.n	800650c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80064ec:	2001      	movs	r0, #1
 80064ee:	f7fb fc29 	bl	8001d44 <HAL_Delay>
      ms++;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	3301      	adds	r3, #1
 80064f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f001 fa2c 	bl	8007956 <USB_GetMode>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d005      	beq.n	8006510 <USB_SetCurrentMode+0x84>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2b31      	cmp	r3, #49	; 0x31
 8006508:	d9f0      	bls.n	80064ec <USB_SetCurrentMode+0x60>
 800650a:	e001      	b.n	8006510 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e005      	b.n	800651c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2b32      	cmp	r3, #50	; 0x32
 8006514:	d101      	bne.n	800651a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e000      	b.n	800651c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006524:	b084      	sub	sp, #16
 8006526:	b580      	push	{r7, lr}
 8006528:	b086      	sub	sp, #24
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006532:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006536:	2300      	movs	r3, #0
 8006538:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800653e:	2300      	movs	r3, #0
 8006540:	613b      	str	r3, [r7, #16]
 8006542:	e009      	b.n	8006558 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	3340      	adds	r3, #64	; 0x40
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	2200      	movs	r2, #0
 8006550:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	3301      	adds	r3, #1
 8006556:	613b      	str	r3, [r7, #16]
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	2b0e      	cmp	r3, #14
 800655c:	d9f2      	bls.n	8006544 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800655e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006560:	2b00      	cmp	r3, #0
 8006562:	d11c      	bne.n	800659e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006572:	f043 0302 	orr.w	r3, r3, #2
 8006576:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006588:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006594:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	639a      	str	r2, [r3, #56]	; 0x38
 800659c:	e00b      	b.n	80065b6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065bc:	461a      	mov	r2, r3
 80065be:	2300      	movs	r3, #0
 80065c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065c8:	4619      	mov	r1, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d0:	461a      	mov	r2, r3
 80065d2:	680b      	ldr	r3, [r1, #0]
 80065d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d10c      	bne.n	80065f6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80065dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d104      	bne.n	80065ec <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80065e2:	2100      	movs	r1, #0
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 f965 	bl	80068b4 <USB_SetDevSpeed>
 80065ea:	e008      	b.n	80065fe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80065ec:	2101      	movs	r1, #1
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f960 	bl	80068b4 <USB_SetDevSpeed>
 80065f4:	e003      	b.n	80065fe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80065f6:	2103      	movs	r1, #3
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f95b 	bl	80068b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065fe:	2110      	movs	r1, #16
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 f8f3 	bl	80067ec <USB_FlushTxFifo>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d001      	beq.n	8006610 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 f91f 	bl	8006854 <USB_FlushRxFifo>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d001      	beq.n	8006620 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006626:	461a      	mov	r2, r3
 8006628:	2300      	movs	r3, #0
 800662a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006632:	461a      	mov	r2, r3
 8006634:	2300      	movs	r3, #0
 8006636:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800663e:	461a      	mov	r2, r3
 8006640:	2300      	movs	r3, #0
 8006642:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006644:	2300      	movs	r3, #0
 8006646:	613b      	str	r3, [r7, #16]
 8006648:	e043      	b.n	80066d2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	4413      	add	r3, r2
 8006652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800665c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006660:	d118      	bne.n	8006694 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10a      	bne.n	800667e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	015a      	lsls	r2, r3, #5
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4413      	add	r3, r2
 8006670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006674:	461a      	mov	r2, r3
 8006676:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800667a:	6013      	str	r3, [r2, #0]
 800667c:	e013      	b.n	80066a6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	015a      	lsls	r2, r3, #5
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	4413      	add	r3, r2
 8006686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800668a:	461a      	mov	r2, r3
 800668c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006690:	6013      	str	r3, [r2, #0]
 8006692:	e008      	b.n	80066a6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	4413      	add	r3, r2
 800669c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a0:	461a      	mov	r2, r3
 80066a2:	2300      	movs	r3, #0
 80066a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b2:	461a      	mov	r2, r3
 80066b4:	2300      	movs	r3, #0
 80066b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	015a      	lsls	r2, r3, #5
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c4:	461a      	mov	r2, r3
 80066c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	3301      	adds	r3, #1
 80066d0:	613b      	str	r3, [r7, #16]
 80066d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d3b7      	bcc.n	800664a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066da:	2300      	movs	r3, #0
 80066dc:	613b      	str	r3, [r7, #16]
 80066de:	e043      	b.n	8006768 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066f6:	d118      	bne.n	800672a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10a      	bne.n	8006714 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	015a      	lsls	r2, r3, #5
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	4413      	add	r3, r2
 8006706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800670a:	461a      	mov	r2, r3
 800670c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006710:	6013      	str	r3, [r2, #0]
 8006712:	e013      	b.n	800673c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006720:	461a      	mov	r2, r3
 8006722:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006726:	6013      	str	r3, [r2, #0]
 8006728:	e008      	b.n	800673c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	015a      	lsls	r2, r3, #5
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	4413      	add	r3, r2
 8006732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006736:	461a      	mov	r2, r3
 8006738:	2300      	movs	r3, #0
 800673a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	015a      	lsls	r2, r3, #5
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4413      	add	r3, r2
 8006744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006748:	461a      	mov	r2, r3
 800674a:	2300      	movs	r3, #0
 800674c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	4413      	add	r3, r2
 8006756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675a:	461a      	mov	r2, r3
 800675c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006760:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	3301      	adds	r3, #1
 8006766:	613b      	str	r3, [r7, #16]
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	429a      	cmp	r2, r3
 800676e:	d3b7      	bcc.n	80066e0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800677e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006782:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006790:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006794:	2b00      	cmp	r3, #0
 8006796:	d105      	bne.n	80067a4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	f043 0210 	orr.w	r2, r3, #16
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	699a      	ldr	r2, [r3, #24]
 80067a8:	4b0f      	ldr	r3, [pc, #60]	; (80067e8 <USB_DevInit+0x2c4>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80067b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d005      	beq.n	80067c2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	f043 0208 	orr.w	r2, r3, #8
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80067c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d107      	bne.n	80067d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067d0:	f043 0304 	orr.w	r3, r3, #4
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80067d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3718      	adds	r7, #24
 80067de:	46bd      	mov	sp, r7
 80067e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067e4:	b004      	add	sp, #16
 80067e6:	4770      	bx	lr
 80067e8:	803c3800 	.word	0x803c3800

080067ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067f6:	2300      	movs	r3, #0
 80067f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	3301      	adds	r3, #1
 80067fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4a13      	ldr	r2, [pc, #76]	; (8006850 <USB_FlushTxFifo+0x64>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d901      	bls.n	800680c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e01b      	b.n	8006844 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	daf2      	bge.n	80067fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006814:	2300      	movs	r3, #0
 8006816:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	019b      	lsls	r3, r3, #6
 800681c:	f043 0220 	orr.w	r2, r3, #32
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	3301      	adds	r3, #1
 8006828:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	4a08      	ldr	r2, [pc, #32]	; (8006850 <USB_FlushTxFifo+0x64>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d901      	bls.n	8006836 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e006      	b.n	8006844 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	f003 0320 	and.w	r3, r3, #32
 800683e:	2b20      	cmp	r3, #32
 8006840:	d0f0      	beq.n	8006824 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr
 8006850:	00030d40 	.word	0x00030d40

08006854 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800685c:	2300      	movs	r3, #0
 800685e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	3301      	adds	r3, #1
 8006864:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	4a11      	ldr	r2, [pc, #68]	; (80068b0 <USB_FlushRxFifo+0x5c>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d901      	bls.n	8006872 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e018      	b.n	80068a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	2b00      	cmp	r3, #0
 8006878:	daf2      	bge.n	8006860 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800687a:	2300      	movs	r3, #0
 800687c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2210      	movs	r2, #16
 8006882:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	3301      	adds	r3, #1
 8006888:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	4a08      	ldr	r2, [pc, #32]	; (80068b0 <USB_FlushRxFifo+0x5c>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d901      	bls.n	8006896 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e006      	b.n	80068a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	f003 0310 	and.w	r3, r3, #16
 800689e:	2b10      	cmp	r3, #16
 80068a0:	d0f0      	beq.n	8006884 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3714      	adds	r7, #20
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	00030d40 	.word	0x00030d40

080068b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	460b      	mov	r3, r1
 80068be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	78fb      	ldrb	r3, [r7, #3]
 80068ce:	68f9      	ldr	r1, [r7, #12]
 80068d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068d4:	4313      	orrs	r3, r2
 80068d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b087      	sub	sp, #28
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f003 0306 	and.w	r3, r3, #6
 80068fe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d102      	bne.n	800690c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006906:	2300      	movs	r3, #0
 8006908:	75fb      	strb	r3, [r7, #23]
 800690a:	e00a      	b.n	8006922 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2b02      	cmp	r3, #2
 8006910:	d002      	beq.n	8006918 <USB_GetDevSpeed+0x32>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2b06      	cmp	r3, #6
 8006916:	d102      	bne.n	800691e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006918:	2302      	movs	r3, #2
 800691a:	75fb      	strb	r3, [r7, #23]
 800691c:	e001      	b.n	8006922 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800691e:	230f      	movs	r3, #15
 8006920:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006922:	7dfb      	ldrb	r3, [r7, #23]
}
 8006924:	4618      	mov	r0, r3
 8006926:	371c      	adds	r7, #28
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	785b      	ldrb	r3, [r3, #1]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d13a      	bne.n	80069c2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006952:	69da      	ldr	r2, [r3, #28]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	f003 030f 	and.w	r3, r3, #15
 800695c:	2101      	movs	r1, #1
 800695e:	fa01 f303 	lsl.w	r3, r1, r3
 8006962:	b29b      	uxth	r3, r3
 8006964:	68f9      	ldr	r1, [r7, #12]
 8006966:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800696a:	4313      	orrs	r3, r2
 800696c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	015a      	lsls	r2, r3, #5
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	4413      	add	r3, r2
 8006976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d155      	bne.n	8006a30 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	4413      	add	r3, r2
 800698c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	791b      	ldrb	r3, [r3, #4]
 800699e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80069a0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	059b      	lsls	r3, r3, #22
 80069a6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80069a8:	4313      	orrs	r3, r2
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	0151      	lsls	r1, r2, #5
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	440a      	add	r2, r1
 80069b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069be:	6013      	str	r3, [r2, #0]
 80069c0:	e036      	b.n	8006a30 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069c8:	69da      	ldr	r2, [r3, #28]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	f003 030f 	and.w	r3, r3, #15
 80069d2:	2101      	movs	r1, #1
 80069d4:	fa01 f303 	lsl.w	r3, r1, r3
 80069d8:	041b      	lsls	r3, r3, #16
 80069da:	68f9      	ldr	r1, [r7, #12]
 80069dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069e0:	4313      	orrs	r3, r2
 80069e2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d11a      	bne.n	8006a30 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	791b      	ldrb	r3, [r3, #4]
 8006a14:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006a16:	430b      	orrs	r3, r1
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	0151      	lsls	r1, r2, #5
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	440a      	add	r2, r1
 8006a22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a2e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3714      	adds	r7, #20
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
	...

08006a40 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	785b      	ldrb	r3, [r3, #1]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d161      	bne.n	8006b20 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a72:	d11f      	bne.n	8006ab4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	0151      	lsls	r1, r2, #5
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	440a      	add	r2, r1
 8006a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a92:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	015a      	lsls	r2, r3, #5
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	0151      	lsls	r1, r2, #5
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	440a      	add	r2, r1
 8006aaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ab2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	f003 030f 	and.w	r3, r3, #15
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	43db      	mvns	r3, r3
 8006ace:	68f9      	ldr	r1, [r7, #12]
 8006ad0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ade:	69da      	ldr	r2, [r3, #28]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	f003 030f 	and.w	r3, r3, #15
 8006ae8:	2101      	movs	r1, #1
 8006aea:	fa01 f303 	lsl.w	r3, r1, r3
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	43db      	mvns	r3, r3
 8006af2:	68f9      	ldr	r1, [r7, #12]
 8006af4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006af8:	4013      	ands	r3, r2
 8006afa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	0159      	lsls	r1, r3, #5
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	440b      	add	r3, r1
 8006b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b16:	4619      	mov	r1, r3
 8006b18:	4b35      	ldr	r3, [pc, #212]	; (8006bf0 <USB_DeactivateEndpoint+0x1b0>)
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	600b      	str	r3, [r1, #0]
 8006b1e:	e060      	b.n	8006be2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	015a      	lsls	r2, r3, #5
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	4413      	add	r3, r2
 8006b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b36:	d11f      	bne.n	8006b78 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	015a      	lsls	r2, r3, #5
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	4413      	add	r3, r2
 8006b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	0151      	lsls	r1, r2, #5
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	440a      	add	r2, r1
 8006b4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b56:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	0151      	lsls	r1, r2, #5
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	440a      	add	r2, r1
 8006b6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	f003 030f 	and.w	r3, r3, #15
 8006b88:	2101      	movs	r1, #1
 8006b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b8e:	041b      	lsls	r3, r3, #16
 8006b90:	43db      	mvns	r3, r3
 8006b92:	68f9      	ldr	r1, [r7, #12]
 8006b94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b98:	4013      	ands	r3, r2
 8006b9a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba2:	69da      	ldr	r2, [r3, #28]
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	f003 030f 	and.w	r3, r3, #15
 8006bac:	2101      	movs	r1, #1
 8006bae:	fa01 f303 	lsl.w	r3, r1, r3
 8006bb2:	041b      	lsls	r3, r3, #16
 8006bb4:	43db      	mvns	r3, r3
 8006bb6:	68f9      	ldr	r1, [r7, #12]
 8006bb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	015a      	lsls	r2, r3, #5
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	0159      	lsls	r1, r3, #5
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	440b      	add	r3, r1
 8006bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bda:	4619      	mov	r1, r3
 8006bdc:	4b05      	ldr	r3, [pc, #20]	; (8006bf4 <USB_DeactivateEndpoint+0x1b4>)
 8006bde:	4013      	ands	r3, r2
 8006be0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3714      	adds	r7, #20
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	ec337800 	.word	0xec337800
 8006bf4:	eff37800 	.word	0xeff37800

08006bf8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b08a      	sub	sp, #40	; 0x28
 8006bfc:	af02      	add	r7, sp, #8
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	4613      	mov	r3, r2
 8006c04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	785b      	ldrb	r3, [r3, #1]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	f040 815c 	bne.w	8006ed2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d132      	bne.n	8006c88 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	015a      	lsls	r2, r3, #5
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	4413      	add	r3, r2
 8006c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	69ba      	ldr	r2, [r7, #24]
 8006c32:	0151      	lsls	r1, r2, #5
 8006c34:	69fa      	ldr	r2, [r7, #28]
 8006c36:	440a      	add	r2, r1
 8006c38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	015a      	lsls	r2, r3, #5
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	69ba      	ldr	r2, [r7, #24]
 8006c56:	0151      	lsls	r1, r2, #5
 8006c58:	69fa      	ldr	r2, [r7, #28]
 8006c5a:	440a      	add	r2, r1
 8006c5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	015a      	lsls	r2, r3, #5
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	69ba      	ldr	r2, [r7, #24]
 8006c76:	0151      	lsls	r1, r2, #5
 8006c78:	69fa      	ldr	r2, [r7, #28]
 8006c7a:	440a      	add	r2, r1
 8006c7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c80:	0cdb      	lsrs	r3, r3, #19
 8006c82:	04db      	lsls	r3, r3, #19
 8006c84:	6113      	str	r3, [r2, #16]
 8006c86:	e074      	b.n	8006d72 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	015a      	lsls	r2, r3, #5
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	69ba      	ldr	r2, [r7, #24]
 8006c98:	0151      	lsls	r1, r2, #5
 8006c9a:	69fa      	ldr	r2, [r7, #28]
 8006c9c:	440a      	add	r2, r1
 8006c9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ca2:	0cdb      	lsrs	r3, r3, #19
 8006ca4:	04db      	lsls	r3, r3, #19
 8006ca6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	015a      	lsls	r2, r3, #5
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	4413      	add	r3, r2
 8006cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	69ba      	ldr	r2, [r7, #24]
 8006cb8:	0151      	lsls	r1, r2, #5
 8006cba:	69fa      	ldr	r2, [r7, #28]
 8006cbc:	440a      	add	r2, r1
 8006cbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cc2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006cc6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006cca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	015a      	lsls	r2, r3, #5
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	6999      	ldr	r1, [r3, #24]
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	440b      	add	r3, r1
 8006ce4:	1e59      	subs	r1, r3, #1
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	fbb1 f3f3 	udiv	r3, r1, r3
 8006cee:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006cf0:	4b9d      	ldr	r3, [pc, #628]	; (8006f68 <USB_EPStartXfer+0x370>)
 8006cf2:	400b      	ands	r3, r1
 8006cf4:	69b9      	ldr	r1, [r7, #24]
 8006cf6:	0148      	lsls	r0, r1, #5
 8006cf8:	69f9      	ldr	r1, [r7, #28]
 8006cfa:	4401      	add	r1, r0
 8006cfc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006d00:	4313      	orrs	r3, r2
 8006d02:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	015a      	lsls	r2, r3, #5
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d10:	691a      	ldr	r2, [r3, #16]
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d1a:	69b9      	ldr	r1, [r7, #24]
 8006d1c:	0148      	lsls	r0, r1, #5
 8006d1e:	69f9      	ldr	r1, [r7, #28]
 8006d20:	4401      	add	r1, r0
 8006d22:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006d26:	4313      	orrs	r3, r2
 8006d28:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	791b      	ldrb	r3, [r3, #4]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d11f      	bne.n	8006d72 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	015a      	lsls	r2, r3, #5
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	4413      	add	r3, r2
 8006d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	69ba      	ldr	r2, [r7, #24]
 8006d42:	0151      	lsls	r1, r2, #5
 8006d44:	69fa      	ldr	r2, [r7, #28]
 8006d46:	440a      	add	r2, r1
 8006d48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d4c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006d50:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	015a      	lsls	r2, r3, #5
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	4413      	add	r3, r2
 8006d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	0151      	lsls	r1, r2, #5
 8006d64:	69fa      	ldr	r2, [r7, #28]
 8006d66:	440a      	add	r2, r1
 8006d68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d70:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006d72:	79fb      	ldrb	r3, [r7, #7]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d14b      	bne.n	8006e10 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d009      	beq.n	8006d94 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	015a      	lsls	r2, r3, #5
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	4413      	add	r3, r2
 8006d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	791b      	ldrb	r3, [r3, #4]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d128      	bne.n	8006dee <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d110      	bne.n	8006dce <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	015a      	lsls	r2, r3, #5
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	4413      	add	r3, r2
 8006db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	69ba      	ldr	r2, [r7, #24]
 8006dbc:	0151      	lsls	r1, r2, #5
 8006dbe:	69fa      	ldr	r2, [r7, #28]
 8006dc0:	440a      	add	r2, r1
 8006dc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006dca:	6013      	str	r3, [r2, #0]
 8006dcc:	e00f      	b.n	8006dee <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	015a      	lsls	r2, r3, #5
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	69ba      	ldr	r2, [r7, #24]
 8006dde:	0151      	lsls	r1, r2, #5
 8006de0:	69fa      	ldr	r2, [r7, #28]
 8006de2:	440a      	add	r2, r1
 8006de4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dec:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	015a      	lsls	r2, r3, #5
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	4413      	add	r3, r2
 8006df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	69ba      	ldr	r2, [r7, #24]
 8006dfe:	0151      	lsls	r1, r2, #5
 8006e00:	69fa      	ldr	r2, [r7, #28]
 8006e02:	440a      	add	r2, r1
 8006e04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e0c:	6013      	str	r3, [r2, #0]
 8006e0e:	e133      	b.n	8007078 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	015a      	lsls	r2, r3, #5
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	69ba      	ldr	r2, [r7, #24]
 8006e20:	0151      	lsls	r1, r2, #5
 8006e22:	69fa      	ldr	r2, [r7, #28]
 8006e24:	440a      	add	r2, r1
 8006e26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e2e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	791b      	ldrb	r3, [r3, #4]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d015      	beq.n	8006e64 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 811b 	beq.w	8007078 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	f003 030f 	and.w	r3, r3, #15
 8006e52:	2101      	movs	r1, #1
 8006e54:	fa01 f303 	lsl.w	r3, r1, r3
 8006e58:	69f9      	ldr	r1, [r7, #28]
 8006e5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	634b      	str	r3, [r1, #52]	; 0x34
 8006e62:	e109      	b.n	8007078 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d110      	bne.n	8006e96 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	015a      	lsls	r2, r3, #5
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	69ba      	ldr	r2, [r7, #24]
 8006e84:	0151      	lsls	r1, r2, #5
 8006e86:	69fa      	ldr	r2, [r7, #28]
 8006e88:	440a      	add	r2, r1
 8006e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e92:	6013      	str	r3, [r2, #0]
 8006e94:	e00f      	b.n	8006eb6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	015a      	lsls	r2, r3, #5
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	69ba      	ldr	r2, [r7, #24]
 8006ea6:	0151      	lsls	r1, r2, #5
 8006ea8:	69fa      	ldr	r2, [r7, #28]
 8006eaa:	440a      	add	r2, r1
 8006eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eb4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	6919      	ldr	r1, [r3, #16]
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	781a      	ldrb	r2, [r3, #0]
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	b298      	uxth	r0, r3
 8006ec4:	79fb      	ldrb	r3, [r7, #7]
 8006ec6:	9300      	str	r3, [sp, #0]
 8006ec8:	4603      	mov	r3, r0
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	f000 fade 	bl	800748c <USB_WritePacket>
 8006ed0:	e0d2      	b.n	8007078 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	69ba      	ldr	r2, [r7, #24]
 8006ee2:	0151      	lsls	r1, r2, #5
 8006ee4:	69fa      	ldr	r2, [r7, #28]
 8006ee6:	440a      	add	r2, r1
 8006ee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eec:	0cdb      	lsrs	r3, r3, #19
 8006eee:	04db      	lsls	r3, r3, #19
 8006ef0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	015a      	lsls	r2, r3, #5
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	4413      	add	r3, r2
 8006efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	69ba      	ldr	r2, [r7, #24]
 8006f02:	0151      	lsls	r1, r2, #5
 8006f04:	69fa      	ldr	r2, [r7, #28]
 8006f06:	440a      	add	r2, r1
 8006f08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f14:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d126      	bne.n	8006f6c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	015a      	lsls	r2, r3, #5
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f2a:	691a      	ldr	r2, [r3, #16]
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f34:	69b9      	ldr	r1, [r7, #24]
 8006f36:	0148      	lsls	r0, r1, #5
 8006f38:	69f9      	ldr	r1, [r7, #28]
 8006f3a:	4401      	add	r1, r0
 8006f3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f40:	4313      	orrs	r3, r2
 8006f42:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	69ba      	ldr	r2, [r7, #24]
 8006f54:	0151      	lsls	r1, r2, #5
 8006f56:	69fa      	ldr	r2, [r7, #28]
 8006f58:	440a      	add	r2, r1
 8006f5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f62:	6113      	str	r3, [r2, #16]
 8006f64:	e03a      	b.n	8006fdc <USB_EPStartXfer+0x3e4>
 8006f66:	bf00      	nop
 8006f68:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	699a      	ldr	r2, [r3, #24]
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	4413      	add	r3, r2
 8006f76:	1e5a      	subs	r2, r3, #1
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f80:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	8afa      	ldrh	r2, [r7, #22]
 8006f88:	fb03 f202 	mul.w	r2, r3, r2
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	015a      	lsls	r2, r3, #5
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	4413      	add	r3, r2
 8006f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f9c:	691a      	ldr	r2, [r3, #16]
 8006f9e:	8afb      	ldrh	r3, [r7, #22]
 8006fa0:	04d9      	lsls	r1, r3, #19
 8006fa2:	4b38      	ldr	r3, [pc, #224]	; (8007084 <USB_EPStartXfer+0x48c>)
 8006fa4:	400b      	ands	r3, r1
 8006fa6:	69b9      	ldr	r1, [r7, #24]
 8006fa8:	0148      	lsls	r0, r1, #5
 8006faa:	69f9      	ldr	r1, [r7, #28]
 8006fac:	4401      	add	r1, r0
 8006fae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc2:	691a      	ldr	r2, [r3, #16]
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	69db      	ldr	r3, [r3, #28]
 8006fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fcc:	69b9      	ldr	r1, [r7, #24]
 8006fce:	0148      	lsls	r0, r1, #5
 8006fd0:	69f9      	ldr	r1, [r7, #28]
 8006fd2:	4401      	add	r1, r0
 8006fd4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006fdc:	79fb      	ldrb	r3, [r7, #7]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d10d      	bne.n	8006ffe <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d009      	beq.n	8006ffe <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	6919      	ldr	r1, [r3, #16]
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	015a      	lsls	r2, r3, #5
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ffa:	460a      	mov	r2, r1
 8006ffc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	791b      	ldrb	r3, [r3, #4]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d128      	bne.n	8007058 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007012:	2b00      	cmp	r3, #0
 8007014:	d110      	bne.n	8007038 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	015a      	lsls	r2, r3, #5
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	4413      	add	r3, r2
 800701e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	0151      	lsls	r1, r2, #5
 8007028:	69fa      	ldr	r2, [r7, #28]
 800702a:	440a      	add	r2, r1
 800702c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007030:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007034:	6013      	str	r3, [r2, #0]
 8007036:	e00f      	b.n	8007058 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	015a      	lsls	r2, r3, #5
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	4413      	add	r3, r2
 8007040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	69ba      	ldr	r2, [r7, #24]
 8007048:	0151      	lsls	r1, r2, #5
 800704a:	69fa      	ldr	r2, [r7, #28]
 800704c:	440a      	add	r2, r1
 800704e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007056:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	015a      	lsls	r2, r3, #5
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	4413      	add	r3, r2
 8007060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	69ba      	ldr	r2, [r7, #24]
 8007068:	0151      	lsls	r1, r2, #5
 800706a:	69fa      	ldr	r2, [r7, #28]
 800706c:	440a      	add	r2, r1
 800706e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007072:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007076:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3720      	adds	r7, #32
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	1ff80000 	.word	0x1ff80000

08007088 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007088:	b480      	push	{r7}
 800708a:	b087      	sub	sp, #28
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	4613      	mov	r3, r2
 8007094:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	785b      	ldrb	r3, [r3, #1]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	f040 80ce 	bne.w	8007246 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d132      	bne.n	8007118 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	015a      	lsls	r2, r3, #5
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	4413      	add	r3, r2
 80070ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	0151      	lsls	r1, r2, #5
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	440a      	add	r2, r1
 80070c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80070d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80070d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	015a      	lsls	r2, r3, #5
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	4413      	add	r3, r2
 80070de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	0151      	lsls	r1, r2, #5
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	440a      	add	r2, r1
 80070ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	015a      	lsls	r2, r3, #5
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	4413      	add	r3, r2
 80070fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	0151      	lsls	r1, r2, #5
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	440a      	add	r2, r1
 800710c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007110:	0cdb      	lsrs	r3, r3, #19
 8007112:	04db      	lsls	r3, r3, #19
 8007114:	6113      	str	r3, [r2, #16]
 8007116:	e04e      	b.n	80071b6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	015a      	lsls	r2, r3, #5
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	4413      	add	r3, r2
 8007120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	693a      	ldr	r2, [r7, #16]
 8007128:	0151      	lsls	r1, r2, #5
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	440a      	add	r2, r1
 800712e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007132:	0cdb      	lsrs	r3, r3, #19
 8007134:	04db      	lsls	r3, r3, #19
 8007136:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	4413      	add	r3, r2
 8007140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	0151      	lsls	r1, r2, #5
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	440a      	add	r2, r1
 800714e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007152:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007156:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800715a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	699a      	ldr	r2, [r3, #24]
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	429a      	cmp	r2, r3
 8007166:	d903      	bls.n	8007170 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	68da      	ldr	r2, [r3, #12]
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	015a      	lsls	r2, r3, #5
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	4413      	add	r3, r2
 8007178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	0151      	lsls	r1, r2, #5
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	440a      	add	r2, r1
 8007186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800718a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800718e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	015a      	lsls	r2, r3, #5
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	4413      	add	r3, r2
 8007198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800719c:	691a      	ldr	r2, [r3, #16]
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071a6:	6939      	ldr	r1, [r7, #16]
 80071a8:	0148      	lsls	r0, r1, #5
 80071aa:	6979      	ldr	r1, [r7, #20]
 80071ac:	4401      	add	r1, r0
 80071ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80071b2:	4313      	orrs	r3, r2
 80071b4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80071b6:	79fb      	ldrb	r3, [r7, #7]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d11e      	bne.n	80071fa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d009      	beq.n	80071d8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	015a      	lsls	r2, r3, #5
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	4413      	add	r3, r2
 80071cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d0:	461a      	mov	r2, r3
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	015a      	lsls	r2, r3, #5
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	4413      	add	r3, r2
 80071e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	693a      	ldr	r2, [r7, #16]
 80071e8:	0151      	lsls	r1, r2, #5
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	440a      	add	r2, r1
 80071ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071f6:	6013      	str	r3, [r2, #0]
 80071f8:	e097      	b.n	800732a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	015a      	lsls	r2, r3, #5
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	4413      	add	r3, r2
 8007202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	0151      	lsls	r1, r2, #5
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	440a      	add	r2, r1
 8007210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007214:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007218:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	2b00      	cmp	r3, #0
 8007220:	f000 8083 	beq.w	800732a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800722a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	f003 030f 	and.w	r3, r3, #15
 8007234:	2101      	movs	r1, #1
 8007236:	fa01 f303 	lsl.w	r3, r1, r3
 800723a:	6979      	ldr	r1, [r7, #20]
 800723c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007240:	4313      	orrs	r3, r2
 8007242:	634b      	str	r3, [r1, #52]	; 0x34
 8007244:	e071      	b.n	800732a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	015a      	lsls	r2, r3, #5
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	4413      	add	r3, r2
 800724e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	0151      	lsls	r1, r2, #5
 8007258:	697a      	ldr	r2, [r7, #20]
 800725a:	440a      	add	r2, r1
 800725c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007260:	0cdb      	lsrs	r3, r3, #19
 8007262:	04db      	lsls	r3, r3, #19
 8007264:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	015a      	lsls	r2, r3, #5
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	4413      	add	r3, r2
 800726e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	0151      	lsls	r1, r2, #5
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	440a      	add	r2, r1
 800727c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007280:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007284:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007288:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d003      	beq.n	800729a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	68da      	ldr	r2, [r3, #12]
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	68da      	ldr	r2, [r3, #12]
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	015a      	lsls	r2, r3, #5
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	4413      	add	r3, r2
 80072aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	0151      	lsls	r1, r2, #5
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	440a      	add	r2, r1
 80072b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ce:	691a      	ldr	r2, [r3, #16]
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	69db      	ldr	r3, [r3, #28]
 80072d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072d8:	6939      	ldr	r1, [r7, #16]
 80072da:	0148      	lsls	r0, r1, #5
 80072dc:	6979      	ldr	r1, [r7, #20]
 80072de:	4401      	add	r1, r0
 80072e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80072e4:	4313      	orrs	r3, r2
 80072e6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80072e8:	79fb      	ldrb	r3, [r7, #7]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d10d      	bne.n	800730a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d009      	beq.n	800730a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	6919      	ldr	r1, [r3, #16]
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	015a      	lsls	r2, r3, #5
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	4413      	add	r3, r2
 8007302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007306:	460a      	mov	r2, r1
 8007308:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	015a      	lsls	r2, r3, #5
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	4413      	add	r3, r2
 8007312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	693a      	ldr	r2, [r7, #16]
 800731a:	0151      	lsls	r1, r2, #5
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	440a      	add	r2, r1
 8007320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007324:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007328:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	371c      	adds	r7, #28
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007338:	b480      	push	{r7}
 800733a:	b087      	sub	sp, #28
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007342:	2300      	movs	r3, #0
 8007344:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	785b      	ldrb	r3, [r3, #1]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d14a      	bne.n	80073ec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	015a      	lsls	r2, r3, #5
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	4413      	add	r3, r2
 8007360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800736a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800736e:	f040 8086 	bne.w	800747e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	4413      	add	r3, r2
 800737c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	683a      	ldr	r2, [r7, #0]
 8007384:	7812      	ldrb	r2, [r2, #0]
 8007386:	0151      	lsls	r1, r2, #5
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	440a      	add	r2, r1
 800738c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007390:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007394:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	015a      	lsls	r2, r3, #5
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	4413      	add	r3, r2
 80073a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	7812      	ldrb	r2, [r2, #0]
 80073aa:	0151      	lsls	r1, r2, #5
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	440a      	add	r2, r1
 80073b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	3301      	adds	r3, #1
 80073be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d902      	bls.n	80073d0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	75fb      	strb	r3, [r7, #23]
          break;
 80073ce:	e056      	b.n	800747e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	015a      	lsls	r2, r3, #5
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	4413      	add	r3, r2
 80073da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073e8:	d0e7      	beq.n	80073ba <USB_EPStopXfer+0x82>
 80073ea:	e048      	b.n	800747e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	015a      	lsls	r2, r3, #5
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	4413      	add	r3, r2
 80073f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007400:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007404:	d13b      	bne.n	800747e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	015a      	lsls	r2, r3, #5
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	4413      	add	r3, r2
 8007410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	683a      	ldr	r2, [r7, #0]
 8007418:	7812      	ldrb	r2, [r2, #0]
 800741a:	0151      	lsls	r1, r2, #5
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	440a      	add	r2, r1
 8007420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007424:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007428:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	015a      	lsls	r2, r3, #5
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	4413      	add	r3, r2
 8007434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	7812      	ldrb	r2, [r2, #0]
 800743e:	0151      	lsls	r1, r2, #5
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	440a      	add	r2, r1
 8007444:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007448:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800744c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	3301      	adds	r3, #1
 8007452:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f242 7210 	movw	r2, #10000	; 0x2710
 800745a:	4293      	cmp	r3, r2
 800745c:	d902      	bls.n	8007464 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	75fb      	strb	r3, [r7, #23]
          break;
 8007462:	e00c      	b.n	800747e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	015a      	lsls	r2, r3, #5
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	4413      	add	r3, r2
 800746e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007478:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800747c:	d0e7      	beq.n	800744e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800747e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007480:	4618      	mov	r0, r3
 8007482:	371c      	adds	r7, #28
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800748c:	b480      	push	{r7}
 800748e:	b089      	sub	sp, #36	; 0x24
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	4611      	mov	r1, r2
 8007498:	461a      	mov	r2, r3
 800749a:	460b      	mov	r3, r1
 800749c:	71fb      	strb	r3, [r7, #7]
 800749e:	4613      	mov	r3, r2
 80074a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80074aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d123      	bne.n	80074fa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80074b2:	88bb      	ldrh	r3, [r7, #4]
 80074b4:	3303      	adds	r3, #3
 80074b6:	089b      	lsrs	r3, r3, #2
 80074b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80074ba:	2300      	movs	r3, #0
 80074bc:	61bb      	str	r3, [r7, #24]
 80074be:	e018      	b.n	80074f2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80074c0:	79fb      	ldrb	r3, [r7, #7]
 80074c2:	031a      	lsls	r2, r3, #12
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	4413      	add	r3, r2
 80074c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074cc:	461a      	mov	r2, r3
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	3301      	adds	r3, #1
 80074d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	3301      	adds	r3, #1
 80074de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	3301      	adds	r3, #1
 80074e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	3301      	adds	r3, #1
 80074ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	3301      	adds	r3, #1
 80074f0:	61bb      	str	r3, [r7, #24]
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d3e2      	bcc.n	80074c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3724      	adds	r7, #36	; 0x24
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007508:	b480      	push	{r7}
 800750a:	b08b      	sub	sp, #44	; 0x2c
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	4613      	mov	r3, r2
 8007514:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800751e:	88fb      	ldrh	r3, [r7, #6]
 8007520:	089b      	lsrs	r3, r3, #2
 8007522:	b29b      	uxth	r3, r3
 8007524:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007526:	88fb      	ldrh	r3, [r7, #6]
 8007528:	f003 0303 	and.w	r3, r3, #3
 800752c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800752e:	2300      	movs	r3, #0
 8007530:	623b      	str	r3, [r7, #32]
 8007532:	e014      	b.n	800755e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007542:	3301      	adds	r3, #1
 8007544:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007548:	3301      	adds	r3, #1
 800754a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754e:	3301      	adds	r3, #1
 8007550:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007554:	3301      	adds	r3, #1
 8007556:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007558:	6a3b      	ldr	r3, [r7, #32]
 800755a:	3301      	adds	r3, #1
 800755c:	623b      	str	r3, [r7, #32]
 800755e:	6a3a      	ldr	r2, [r7, #32]
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	429a      	cmp	r2, r3
 8007564:	d3e6      	bcc.n	8007534 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007566:	8bfb      	ldrh	r3, [r7, #30]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d01e      	beq.n	80075aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800756c:	2300      	movs	r3, #0
 800756e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007576:	461a      	mov	r2, r3
 8007578:	f107 0310 	add.w	r3, r7, #16
 800757c:	6812      	ldr	r2, [r2, #0]
 800757e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	6a3b      	ldr	r3, [r7, #32]
 8007584:	b2db      	uxtb	r3, r3
 8007586:	00db      	lsls	r3, r3, #3
 8007588:	fa22 f303 	lsr.w	r3, r2, r3
 800758c:	b2da      	uxtb	r2, r3
 800758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007590:	701a      	strb	r2, [r3, #0]
      i++;
 8007592:	6a3b      	ldr	r3, [r7, #32]
 8007594:	3301      	adds	r3, #1
 8007596:	623b      	str	r3, [r7, #32]
      pDest++;
 8007598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759a:	3301      	adds	r3, #1
 800759c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800759e:	8bfb      	ldrh	r3, [r7, #30]
 80075a0:	3b01      	subs	r3, #1
 80075a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80075a4:	8bfb      	ldrh	r3, [r7, #30]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1ea      	bne.n	8007580 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80075aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	372c      	adds	r7, #44	; 0x2c
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	785b      	ldrb	r3, [r3, #1]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d12c      	bne.n	800762e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	015a      	lsls	r2, r3, #5
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	4413      	add	r3, r2
 80075dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	db12      	blt.n	800760c <USB_EPSetStall+0x54>
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00f      	beq.n	800760c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	015a      	lsls	r2, r3, #5
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	0151      	lsls	r1, r2, #5
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	440a      	add	r2, r1
 8007602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007606:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800760a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	015a      	lsls	r2, r3, #5
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4413      	add	r3, r2
 8007614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	0151      	lsls	r1, r2, #5
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	440a      	add	r2, r1
 8007622:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007626:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800762a:	6013      	str	r3, [r2, #0]
 800762c:	e02b      	b.n	8007686 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	015a      	lsls	r2, r3, #5
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	4413      	add	r3, r2
 8007636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	db12      	blt.n	8007666 <USB_EPSetStall+0xae>
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00f      	beq.n	8007666 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	015a      	lsls	r2, r3, #5
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	4413      	add	r3, r2
 800764e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	0151      	lsls	r1, r2, #5
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	440a      	add	r2, r1
 800765c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007660:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007664:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	015a      	lsls	r2, r3, #5
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	4413      	add	r3, r2
 800766e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	0151      	lsls	r1, r2, #5
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	440a      	add	r2, r1
 800767c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007684:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3714      	adds	r7, #20
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	785b      	ldrb	r3, [r3, #1]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d128      	bne.n	8007702 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	015a      	lsls	r2, r3, #5
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	4413      	add	r3, r2
 80076b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68ba      	ldr	r2, [r7, #8]
 80076c0:	0151      	lsls	r1, r2, #5
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	440a      	add	r2, r1
 80076c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	791b      	ldrb	r3, [r3, #4]
 80076d4:	2b03      	cmp	r3, #3
 80076d6:	d003      	beq.n	80076e0 <USB_EPClearStall+0x4c>
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	791b      	ldrb	r3, [r3, #4]
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d138      	bne.n	8007752 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	015a      	lsls	r2, r3, #5
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	4413      	add	r3, r2
 80076e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	0151      	lsls	r1, r2, #5
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	440a      	add	r2, r1
 80076f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076fe:	6013      	str	r3, [r2, #0]
 8007700:	e027      	b.n	8007752 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	015a      	lsls	r2, r3, #5
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	4413      	add	r3, r2
 800770a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	0151      	lsls	r1, r2, #5
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	440a      	add	r2, r1
 8007718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800771c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007720:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	791b      	ldrb	r3, [r3, #4]
 8007726:	2b03      	cmp	r3, #3
 8007728:	d003      	beq.n	8007732 <USB_EPClearStall+0x9e>
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	791b      	ldrb	r3, [r3, #4]
 800772e:	2b02      	cmp	r3, #2
 8007730:	d10f      	bne.n	8007752 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	015a      	lsls	r2, r3, #5
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	4413      	add	r3, r2
 800773a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68ba      	ldr	r2, [r7, #8]
 8007742:	0151      	lsls	r1, r2, #5
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	440a      	add	r2, r1
 8007748:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800774c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007750:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3714      	adds	r7, #20
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	460b      	mov	r3, r1
 800776a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800777e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007782:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	78fb      	ldrb	r3, [r7, #3]
 800778e:	011b      	lsls	r3, r3, #4
 8007790:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007794:	68f9      	ldr	r1, [r7, #12]
 8007796:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800779a:	4313      	orrs	r3, r2
 800779c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077c6:	f023 0303 	bic.w	r3, r3, #3
 80077ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077da:	f023 0302 	bic.w	r3, r3, #2
 80077de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3714      	adds	r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr

080077ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80077ee:	b480      	push	{r7}
 80077f0:	b085      	sub	sp, #20
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007808:	f023 0303 	bic.w	r3, r3, #3
 800780c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800781c:	f043 0302 	orr.w	r3, r3, #2
 8007820:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3714      	adds	r7, #20
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	695b      	ldr	r3, [r3, #20]
 800783c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	699b      	ldr	r3, [r3, #24]
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	4013      	ands	r3, r2
 8007846:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007848:	68fb      	ldr	r3, [r7, #12]
}
 800784a:	4618      	mov	r0, r3
 800784c:	3714      	adds	r7, #20
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007856:	b480      	push	{r7}
 8007858:	b085      	sub	sp, #20
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007872:	69db      	ldr	r3, [r3, #28]
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	4013      	ands	r3, r2
 8007878:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	0c1b      	lsrs	r3, r3, #16
}
 800787e:	4618      	mov	r0, r3
 8007880:	3714      	adds	r7, #20
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800788a:	b480      	push	{r7}
 800788c:	b085      	sub	sp, #20
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078a6:	69db      	ldr	r3, [r3, #28]
 80078a8:	68ba      	ldr	r2, [r7, #8]
 80078aa:	4013      	ands	r3, r2
 80078ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	b29b      	uxth	r3, r3
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3714      	adds	r7, #20
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr

080078be <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078be:	b480      	push	{r7}
 80078c0:	b085      	sub	sp, #20
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
 80078c6:	460b      	mov	r3, r1
 80078c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80078ce:	78fb      	ldrb	r3, [r7, #3]
 80078d0:	015a      	lsls	r2, r3, #5
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	4413      	add	r3, r2
 80078d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	4013      	ands	r3, r2
 80078ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80078ec:	68bb      	ldr	r3, [r7, #8]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr

080078fa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b087      	sub	sp, #28
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
 8007902:	460b      	mov	r3, r1
 8007904:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800791a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800791c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800791e:	78fb      	ldrb	r3, [r7, #3]
 8007920:	f003 030f 	and.w	r3, r3, #15
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	fa22 f303 	lsr.w	r3, r2, r3
 800792a:	01db      	lsls	r3, r3, #7
 800792c:	b2db      	uxtb	r3, r3
 800792e:	693a      	ldr	r2, [r7, #16]
 8007930:	4313      	orrs	r3, r2
 8007932:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007934:	78fb      	ldrb	r3, [r7, #3]
 8007936:	015a      	lsls	r2, r3, #5
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	4413      	add	r3, r2
 800793c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	693a      	ldr	r2, [r7, #16]
 8007944:	4013      	ands	r3, r2
 8007946:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007948:	68bb      	ldr	r3, [r7, #8]
}
 800794a:	4618      	mov	r0, r3
 800794c:	371c      	adds	r7, #28
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007956:	b480      	push	{r7}
 8007958:	b083      	sub	sp, #12
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	695b      	ldr	r3, [r3, #20]
 8007962:	f003 0301 	and.w	r3, r3, #1
}
 8007966:	4618      	mov	r0, r3
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007972:	b480      	push	{r7}
 8007974:	b085      	sub	sp, #20
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800798c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007990:	f023 0307 	bic.w	r3, r3, #7
 8007994:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3714      	adds	r7, #20
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b087      	sub	sp, #28
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	460b      	mov	r3, r1
 80079c2:	607a      	str	r2, [r7, #4]
 80079c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	333c      	adds	r3, #60	; 0x3c
 80079ce:	3304      	adds	r3, #4
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	4a26      	ldr	r2, [pc, #152]	; (8007a70 <USB_EP0_OutStart+0xb8>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d90a      	bls.n	80079f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079ec:	d101      	bne.n	80079f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	e037      	b.n	8007a62 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f8:	461a      	mov	r2, r3
 80079fa:	2300      	movs	r3, #0
 80079fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a20:	f043 0318 	orr.w	r3, r3, #24
 8007a24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a34:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007a38:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007a3a:	7afb      	ldrb	r3, [r7, #11]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d10f      	bne.n	8007a60 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a46:	461a      	mov	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	697a      	ldr	r2, [r7, #20]
 8007a56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a5a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007a5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	371c      	adds	r7, #28
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	4f54300a 	.word	0x4f54300a

08007a74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	3301      	adds	r3, #1
 8007a84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	4a13      	ldr	r2, [pc, #76]	; (8007ad8 <USB_CoreReset+0x64>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d901      	bls.n	8007a92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	e01b      	b.n	8007aca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	daf2      	bge.n	8007a80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	f043 0201 	orr.w	r2, r3, #1
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	3301      	adds	r3, #1
 8007aae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	4a09      	ldr	r2, [pc, #36]	; (8007ad8 <USB_CoreReset+0x64>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d901      	bls.n	8007abc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	e006      	b.n	8007aca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	f003 0301 	and.w	r3, r3, #1
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d0f0      	beq.n	8007aaa <USB_CoreReset+0x36>

  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3714      	adds	r7, #20
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	00030d40 	.word	0x00030d40

08007adc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007ae8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007aec:	f002 fc40 	bl	800a370 <USBD_static_malloc>
 8007af0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d109      	bne.n	8007b0c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	32b0      	adds	r2, #176	; 0xb0
 8007b02:	2100      	movs	r1, #0
 8007b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007b08:	2302      	movs	r3, #2
 8007b0a:	e0d4      	b.n	8007cb6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007b0c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007b10:	2100      	movs	r1, #0
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f002 fca2 	bl	800a45c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	32b0      	adds	r2, #176	; 0xb0
 8007b22:	68f9      	ldr	r1, [r7, #12]
 8007b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	32b0      	adds	r2, #176	; 0xb0
 8007b32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	7c1b      	ldrb	r3, [r3, #16]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d138      	bne.n	8007bb6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007b44:	4b5e      	ldr	r3, [pc, #376]	; (8007cc0 <USBD_CDC_Init+0x1e4>)
 8007b46:	7819      	ldrb	r1, [r3, #0]
 8007b48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b4c:	2202      	movs	r2, #2
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f002 faeb 	bl	800a12a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007b54:	4b5a      	ldr	r3, [pc, #360]	; (8007cc0 <USBD_CDC_Init+0x1e4>)
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	f003 020f 	and.w	r2, r3, #15
 8007b5c:	6879      	ldr	r1, [r7, #4]
 8007b5e:	4613      	mov	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4413      	add	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	440b      	add	r3, r1
 8007b68:	3324      	adds	r3, #36	; 0x24
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007b6e:	4b55      	ldr	r3, [pc, #340]	; (8007cc4 <USBD_CDC_Init+0x1e8>)
 8007b70:	7819      	ldrb	r1, [r3, #0]
 8007b72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b76:	2202      	movs	r2, #2
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f002 fad6 	bl	800a12a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007b7e:	4b51      	ldr	r3, [pc, #324]	; (8007cc4 <USBD_CDC_Init+0x1e8>)
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	f003 020f 	and.w	r2, r3, #15
 8007b86:	6879      	ldr	r1, [r7, #4]
 8007b88:	4613      	mov	r3, r2
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	4413      	add	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	440b      	add	r3, r1
 8007b92:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b96:	2201      	movs	r2, #1
 8007b98:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007b9a:	4b4b      	ldr	r3, [pc, #300]	; (8007cc8 <USBD_CDC_Init+0x1ec>)
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	f003 020f 	and.w	r2, r3, #15
 8007ba2:	6879      	ldr	r1, [r7, #4]
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	4413      	add	r3, r2
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	440b      	add	r3, r1
 8007bae:	3326      	adds	r3, #38	; 0x26
 8007bb0:	2210      	movs	r2, #16
 8007bb2:	801a      	strh	r2, [r3, #0]
 8007bb4:	e035      	b.n	8007c22 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007bb6:	4b42      	ldr	r3, [pc, #264]	; (8007cc0 <USBD_CDC_Init+0x1e4>)
 8007bb8:	7819      	ldrb	r1, [r3, #0]
 8007bba:	2340      	movs	r3, #64	; 0x40
 8007bbc:	2202      	movs	r2, #2
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f002 fab3 	bl	800a12a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007bc4:	4b3e      	ldr	r3, [pc, #248]	; (8007cc0 <USBD_CDC_Init+0x1e4>)
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	f003 020f 	and.w	r2, r3, #15
 8007bcc:	6879      	ldr	r1, [r7, #4]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	4413      	add	r3, r2
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	440b      	add	r3, r1
 8007bd8:	3324      	adds	r3, #36	; 0x24
 8007bda:	2201      	movs	r2, #1
 8007bdc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007bde:	4b39      	ldr	r3, [pc, #228]	; (8007cc4 <USBD_CDC_Init+0x1e8>)
 8007be0:	7819      	ldrb	r1, [r3, #0]
 8007be2:	2340      	movs	r3, #64	; 0x40
 8007be4:	2202      	movs	r2, #2
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f002 fa9f 	bl	800a12a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007bec:	4b35      	ldr	r3, [pc, #212]	; (8007cc4 <USBD_CDC_Init+0x1e8>)
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	f003 020f 	and.w	r2, r3, #15
 8007bf4:	6879      	ldr	r1, [r7, #4]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4413      	add	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	440b      	add	r3, r1
 8007c00:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c04:	2201      	movs	r2, #1
 8007c06:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007c08:	4b2f      	ldr	r3, [pc, #188]	; (8007cc8 <USBD_CDC_Init+0x1ec>)
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	f003 020f 	and.w	r2, r3, #15
 8007c10:	6879      	ldr	r1, [r7, #4]
 8007c12:	4613      	mov	r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	440b      	add	r3, r1
 8007c1c:	3326      	adds	r3, #38	; 0x26
 8007c1e:	2210      	movs	r2, #16
 8007c20:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007c22:	4b29      	ldr	r3, [pc, #164]	; (8007cc8 <USBD_CDC_Init+0x1ec>)
 8007c24:	7819      	ldrb	r1, [r3, #0]
 8007c26:	2308      	movs	r3, #8
 8007c28:	2203      	movs	r2, #3
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f002 fa7d 	bl	800a12a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007c30:	4b25      	ldr	r3, [pc, #148]	; (8007cc8 <USBD_CDC_Init+0x1ec>)
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	f003 020f 	and.w	r2, r3, #15
 8007c38:	6879      	ldr	r1, [r7, #4]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	4413      	add	r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	440b      	add	r3, r1
 8007c44:	3324      	adds	r3, #36	; 0x24
 8007c46:	2201      	movs	r2, #1
 8007c48:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	33b0      	adds	r3, #176	; 0xb0
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	4413      	add	r3, r2
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d101      	bne.n	8007c84 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007c80:	2302      	movs	r3, #2
 8007c82:	e018      	b.n	8007cb6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	7c1b      	ldrb	r3, [r3, #16]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10a      	bne.n	8007ca2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c8c:	4b0d      	ldr	r3, [pc, #52]	; (8007cc4 <USBD_CDC_Init+0x1e8>)
 8007c8e:	7819      	ldrb	r1, [r3, #0]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f002 fb34 	bl	800a308 <USBD_LL_PrepareReceive>
 8007ca0:	e008      	b.n	8007cb4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ca2:	4b08      	ldr	r3, [pc, #32]	; (8007cc4 <USBD_CDC_Init+0x1e8>)
 8007ca4:	7819      	ldrb	r1, [r3, #0]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cac:	2340      	movs	r3, #64	; 0x40
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f002 fb2a 	bl	800a308 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	200000db 	.word	0x200000db
 8007cc4:	200000dc 	.word	0x200000dc
 8007cc8:	200000dd 	.word	0x200000dd

08007ccc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007cd8:	4b3a      	ldr	r3, [pc, #232]	; (8007dc4 <USBD_CDC_DeInit+0xf8>)
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	4619      	mov	r1, r3
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f002 fa49 	bl	800a176 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007ce4:	4b37      	ldr	r3, [pc, #220]	; (8007dc4 <USBD_CDC_DeInit+0xf8>)
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	f003 020f 	and.w	r2, r3, #15
 8007cec:	6879      	ldr	r1, [r7, #4]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	4413      	add	r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	440b      	add	r3, r1
 8007cf8:	3324      	adds	r3, #36	; 0x24
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007cfe:	4b32      	ldr	r3, [pc, #200]	; (8007dc8 <USBD_CDC_DeInit+0xfc>)
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	4619      	mov	r1, r3
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f002 fa36 	bl	800a176 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007d0a:	4b2f      	ldr	r3, [pc, #188]	; (8007dc8 <USBD_CDC_DeInit+0xfc>)
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	f003 020f 	and.w	r2, r3, #15
 8007d12:	6879      	ldr	r1, [r7, #4]
 8007d14:	4613      	mov	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	440b      	add	r3, r1
 8007d1e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007d22:	2200      	movs	r2, #0
 8007d24:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007d26:	4b29      	ldr	r3, [pc, #164]	; (8007dcc <USBD_CDC_DeInit+0x100>)
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f002 fa22 	bl	800a176 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007d32:	4b26      	ldr	r3, [pc, #152]	; (8007dcc <USBD_CDC_DeInit+0x100>)
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	f003 020f 	and.w	r2, r3, #15
 8007d3a:	6879      	ldr	r1, [r7, #4]
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	4413      	add	r3, r2
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	440b      	add	r3, r1
 8007d46:	3324      	adds	r3, #36	; 0x24
 8007d48:	2200      	movs	r2, #0
 8007d4a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007d4c:	4b1f      	ldr	r3, [pc, #124]	; (8007dcc <USBD_CDC_DeInit+0x100>)
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	f003 020f 	and.w	r2, r3, #15
 8007d54:	6879      	ldr	r1, [r7, #4]
 8007d56:	4613      	mov	r3, r2
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	4413      	add	r3, r2
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	440b      	add	r3, r1
 8007d60:	3326      	adds	r3, #38	; 0x26
 8007d62:	2200      	movs	r2, #0
 8007d64:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	32b0      	adds	r2, #176	; 0xb0
 8007d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d01f      	beq.n	8007db8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	33b0      	adds	r3, #176	; 0xb0
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	4413      	add	r3, r2
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	32b0      	adds	r2, #176	; 0xb0
 8007d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f002 faf6 	bl	800a38c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	32b0      	adds	r2, #176	; 0xb0
 8007daa:	2100      	movs	r1, #0
 8007dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007db8:	2300      	movs	r3, #0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	200000db 	.word	0x200000db
 8007dc8:	200000dc 	.word	0x200000dc
 8007dcc:	200000dd 	.word	0x200000dd

08007dd0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	32b0      	adds	r2, #176	; 0xb0
 8007de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007dea:	2300      	movs	r3, #0
 8007dec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007dee:	2300      	movs	r3, #0
 8007df0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007df2:	2300      	movs	r3, #0
 8007df4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d101      	bne.n	8007e00 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	e0bf      	b.n	8007f80 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d050      	beq.n	8007eae <USBD_CDC_Setup+0xde>
 8007e0c:	2b20      	cmp	r3, #32
 8007e0e:	f040 80af 	bne.w	8007f70 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	88db      	ldrh	r3, [r3, #6]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d03a      	beq.n	8007e90 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	b25b      	sxtb	r3, r3
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	da1b      	bge.n	8007e5c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	33b0      	adds	r3, #176	; 0xb0
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	4413      	add	r3, r2
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	683a      	ldr	r2, [r7, #0]
 8007e38:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007e3a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e3c:	683a      	ldr	r2, [r7, #0]
 8007e3e:	88d2      	ldrh	r2, [r2, #6]
 8007e40:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	88db      	ldrh	r3, [r3, #6]
 8007e46:	2b07      	cmp	r3, #7
 8007e48:	bf28      	it	cs
 8007e4a:	2307      	movcs	r3, #7
 8007e4c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	89fa      	ldrh	r2, [r7, #14]
 8007e52:	4619      	mov	r1, r3
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f001 fd43 	bl	80098e0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007e5a:	e090      	b.n	8007f7e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	785a      	ldrb	r2, [r3, #1]
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	88db      	ldrh	r3, [r3, #6]
 8007e6a:	2b3f      	cmp	r3, #63	; 0x3f
 8007e6c:	d803      	bhi.n	8007e76 <USBD_CDC_Setup+0xa6>
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	88db      	ldrh	r3, [r3, #6]
 8007e72:	b2da      	uxtb	r2, r3
 8007e74:	e000      	b.n	8007e78 <USBD_CDC_Setup+0xa8>
 8007e76:	2240      	movs	r2, #64	; 0x40
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007e7e:	6939      	ldr	r1, [r7, #16]
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007e86:	461a      	mov	r2, r3
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f001 fd55 	bl	8009938 <USBD_CtlPrepareRx>
      break;
 8007e8e:	e076      	b.n	8007f7e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	33b0      	adds	r3, #176	; 0xb0
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	4413      	add	r3, r2
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	683a      	ldr	r2, [r7, #0]
 8007ea4:	7850      	ldrb	r0, [r2, #1]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	6839      	ldr	r1, [r7, #0]
 8007eaa:	4798      	blx	r3
      break;
 8007eac:	e067      	b.n	8007f7e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	785b      	ldrb	r3, [r3, #1]
 8007eb2:	2b0b      	cmp	r3, #11
 8007eb4:	d851      	bhi.n	8007f5a <USBD_CDC_Setup+0x18a>
 8007eb6:	a201      	add	r2, pc, #4	; (adr r2, 8007ebc <USBD_CDC_Setup+0xec>)
 8007eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ebc:	08007eed 	.word	0x08007eed
 8007ec0:	08007f69 	.word	0x08007f69
 8007ec4:	08007f5b 	.word	0x08007f5b
 8007ec8:	08007f5b 	.word	0x08007f5b
 8007ecc:	08007f5b 	.word	0x08007f5b
 8007ed0:	08007f5b 	.word	0x08007f5b
 8007ed4:	08007f5b 	.word	0x08007f5b
 8007ed8:	08007f5b 	.word	0x08007f5b
 8007edc:	08007f5b 	.word	0x08007f5b
 8007ee0:	08007f5b 	.word	0x08007f5b
 8007ee4:	08007f17 	.word	0x08007f17
 8007ee8:	08007f41 	.word	0x08007f41
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	2b03      	cmp	r3, #3
 8007ef6:	d107      	bne.n	8007f08 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007ef8:	f107 030a 	add.w	r3, r7, #10
 8007efc:	2202      	movs	r2, #2
 8007efe:	4619      	mov	r1, r3
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f001 fced 	bl	80098e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f06:	e032      	b.n	8007f6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007f08:	6839      	ldr	r1, [r7, #0]
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f001 fc77 	bl	80097fe <USBD_CtlError>
            ret = USBD_FAIL;
 8007f10:	2303      	movs	r3, #3
 8007f12:	75fb      	strb	r3, [r7, #23]
          break;
 8007f14:	e02b      	b.n	8007f6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b03      	cmp	r3, #3
 8007f20:	d107      	bne.n	8007f32 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007f22:	f107 030d 	add.w	r3, r7, #13
 8007f26:	2201      	movs	r2, #1
 8007f28:	4619      	mov	r1, r3
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f001 fcd8 	bl	80098e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f30:	e01d      	b.n	8007f6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007f32:	6839      	ldr	r1, [r7, #0]
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f001 fc62 	bl	80097fe <USBD_CtlError>
            ret = USBD_FAIL;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	75fb      	strb	r3, [r7, #23]
          break;
 8007f3e:	e016      	b.n	8007f6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	2b03      	cmp	r3, #3
 8007f4a:	d00f      	beq.n	8007f6c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f001 fc55 	bl	80097fe <USBD_CtlError>
            ret = USBD_FAIL;
 8007f54:	2303      	movs	r3, #3
 8007f56:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007f58:	e008      	b.n	8007f6c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007f5a:	6839      	ldr	r1, [r7, #0]
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f001 fc4e 	bl	80097fe <USBD_CtlError>
          ret = USBD_FAIL;
 8007f62:	2303      	movs	r3, #3
 8007f64:	75fb      	strb	r3, [r7, #23]
          break;
 8007f66:	e002      	b.n	8007f6e <USBD_CDC_Setup+0x19e>
          break;
 8007f68:	bf00      	nop
 8007f6a:	e008      	b.n	8007f7e <USBD_CDC_Setup+0x1ae>
          break;
 8007f6c:	bf00      	nop
      }
      break;
 8007f6e:	e006      	b.n	8007f7e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007f70:	6839      	ldr	r1, [r7, #0]
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f001 fc43 	bl	80097fe <USBD_CtlError>
      ret = USBD_FAIL;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f7c:	bf00      	nop
  }

  return (uint8_t)ret;
 8007f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3718      	adds	r7, #24
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	460b      	mov	r3, r1
 8007f92:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	32b0      	adds	r2, #176	; 0xb0
 8007fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d101      	bne.n	8007fb2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	e065      	b.n	800807e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	32b0      	adds	r2, #176	; 0xb0
 8007fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fc0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007fc2:	78fb      	ldrb	r3, [r7, #3]
 8007fc4:	f003 020f 	and.w	r2, r3, #15
 8007fc8:	6879      	ldr	r1, [r7, #4]
 8007fca:	4613      	mov	r3, r2
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	4413      	add	r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	440b      	add	r3, r1
 8007fd4:	3318      	adds	r3, #24
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d02f      	beq.n	800803c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007fdc:	78fb      	ldrb	r3, [r7, #3]
 8007fde:	f003 020f 	and.w	r2, r3, #15
 8007fe2:	6879      	ldr	r1, [r7, #4]
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	4413      	add	r3, r2
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	440b      	add	r3, r1
 8007fee:	3318      	adds	r3, #24
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	78fb      	ldrb	r3, [r7, #3]
 8007ff4:	f003 010f 	and.w	r1, r3, #15
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	00db      	lsls	r3, r3, #3
 8007ffe:	440b      	add	r3, r1
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4403      	add	r3, r0
 8008004:	3348      	adds	r3, #72	; 0x48
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	fbb2 f1f3 	udiv	r1, r2, r3
 800800c:	fb01 f303 	mul.w	r3, r1, r3
 8008010:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008012:	2b00      	cmp	r3, #0
 8008014:	d112      	bne.n	800803c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008016:	78fb      	ldrb	r3, [r7, #3]
 8008018:	f003 020f 	and.w	r2, r3, #15
 800801c:	6879      	ldr	r1, [r7, #4]
 800801e:	4613      	mov	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	4413      	add	r3, r2
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	440b      	add	r3, r1
 8008028:	3318      	adds	r3, #24
 800802a:	2200      	movs	r2, #0
 800802c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800802e:	78f9      	ldrb	r1, [r7, #3]
 8008030:	2300      	movs	r3, #0
 8008032:	2200      	movs	r2, #0
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f002 f946 	bl	800a2c6 <USBD_LL_Transmit>
 800803a:	e01f      	b.n	800807c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	2200      	movs	r2, #0
 8008040:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	33b0      	adds	r3, #176	; 0xb0
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	4413      	add	r3, r2
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d010      	beq.n	800807c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	33b0      	adds	r3, #176	; 0xb0
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	4413      	add	r3, r2
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	68ba      	ldr	r2, [r7, #8]
 800806e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008078:	78fa      	ldrb	r2, [r7, #3]
 800807a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b084      	sub	sp, #16
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
 800808e:	460b      	mov	r3, r1
 8008090:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	32b0      	adds	r2, #176	; 0xb0
 800809c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	32b0      	adds	r2, #176	; 0xb0
 80080ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d101      	bne.n	80080b8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e01a      	b.n	80080ee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80080b8:	78fb      	ldrb	r3, [r7, #3]
 80080ba:	4619      	mov	r1, r3
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f002 f944 	bl	800a34a <USBD_LL_GetRxDataSize>
 80080c2:	4602      	mov	r2, r0
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	33b0      	adds	r3, #176	; 0xb0
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	4413      	add	r3, r2
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80080e8:	4611      	mov	r1, r2
 80080ea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b084      	sub	sp, #16
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	32b0      	adds	r2, #176	; 0xb0
 8008108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800810c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008114:	2303      	movs	r3, #3
 8008116:	e025      	b.n	8008164 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	33b0      	adds	r3, #176	; 0xb0
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	4413      	add	r3, r2
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d01a      	beq.n	8008162 <USBD_CDC_EP0_RxReady+0x6c>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008132:	2bff      	cmp	r3, #255	; 0xff
 8008134:	d015      	beq.n	8008162 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	33b0      	adds	r3, #176	; 0xb0
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	4413      	add	r3, r2
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800814e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008156:	b292      	uxth	r2, r2
 8008158:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	22ff      	movs	r2, #255	; 0xff
 800815e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b086      	sub	sp, #24
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008174:	2182      	movs	r1, #130	; 0x82
 8008176:	4818      	ldr	r0, [pc, #96]	; (80081d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008178:	f000 fd09 	bl	8008b8e <USBD_GetEpDesc>
 800817c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800817e:	2101      	movs	r1, #1
 8008180:	4815      	ldr	r0, [pc, #84]	; (80081d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008182:	f000 fd04 	bl	8008b8e <USBD_GetEpDesc>
 8008186:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008188:	2181      	movs	r1, #129	; 0x81
 800818a:	4813      	ldr	r0, [pc, #76]	; (80081d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800818c:	f000 fcff 	bl	8008b8e <USBD_GetEpDesc>
 8008190:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d002      	beq.n	800819e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	2210      	movs	r2, #16
 800819c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d006      	beq.n	80081b2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081ac:	711a      	strb	r2, [r3, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d006      	beq.n	80081c6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081c0:	711a      	strb	r2, [r3, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2243      	movs	r2, #67	; 0x43
 80081ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80081cc:	4b02      	ldr	r3, [pc, #8]	; (80081d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3718      	adds	r7, #24
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	20000098 	.word	0x20000098

080081dc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b086      	sub	sp, #24
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80081e4:	2182      	movs	r1, #130	; 0x82
 80081e6:	4818      	ldr	r0, [pc, #96]	; (8008248 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081e8:	f000 fcd1 	bl	8008b8e <USBD_GetEpDesc>
 80081ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80081ee:	2101      	movs	r1, #1
 80081f0:	4815      	ldr	r0, [pc, #84]	; (8008248 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081f2:	f000 fccc 	bl	8008b8e <USBD_GetEpDesc>
 80081f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80081f8:	2181      	movs	r1, #129	; 0x81
 80081fa:	4813      	ldr	r0, [pc, #76]	; (8008248 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081fc:	f000 fcc7 	bl	8008b8e <USBD_GetEpDesc>
 8008200:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d002      	beq.n	800820e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	2210      	movs	r2, #16
 800820c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d006      	beq.n	8008222 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	2200      	movs	r2, #0
 8008218:	711a      	strb	r2, [r3, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	f042 0202 	orr.w	r2, r2, #2
 8008220:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d006      	beq.n	8008236 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2200      	movs	r2, #0
 800822c:	711a      	strb	r2, [r3, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	f042 0202 	orr.w	r2, r2, #2
 8008234:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2243      	movs	r2, #67	; 0x43
 800823a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800823c:	4b02      	ldr	r3, [pc, #8]	; (8008248 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800823e:	4618      	mov	r0, r3
 8008240:	3718      	adds	r7, #24
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	20000098 	.word	0x20000098

0800824c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008254:	2182      	movs	r1, #130	; 0x82
 8008256:	4818      	ldr	r0, [pc, #96]	; (80082b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008258:	f000 fc99 	bl	8008b8e <USBD_GetEpDesc>
 800825c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800825e:	2101      	movs	r1, #1
 8008260:	4815      	ldr	r0, [pc, #84]	; (80082b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008262:	f000 fc94 	bl	8008b8e <USBD_GetEpDesc>
 8008266:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008268:	2181      	movs	r1, #129	; 0x81
 800826a:	4813      	ldr	r0, [pc, #76]	; (80082b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800826c:	f000 fc8f 	bl	8008b8e <USBD_GetEpDesc>
 8008270:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d002      	beq.n	800827e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	2210      	movs	r2, #16
 800827c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d006      	beq.n	8008292 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	2200      	movs	r2, #0
 8008288:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800828c:	711a      	strb	r2, [r3, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d006      	beq.n	80082a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2200      	movs	r2, #0
 800829c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082a0:	711a      	strb	r2, [r3, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2243      	movs	r2, #67	; 0x43
 80082aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80082ac:	4b02      	ldr	r3, [pc, #8]	; (80082b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3718      	adds	r7, #24
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	20000098 	.word	0x20000098

080082bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	220a      	movs	r2, #10
 80082c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80082ca:	4b03      	ldr	r3, [pc, #12]	; (80082d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr
 80082d8:	20000054 	.word	0x20000054

080082dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d101      	bne.n	80082f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e009      	b.n	8008304 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	33b0      	adds	r3, #176	; 0xb0
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4413      	add	r3, r2
 80082fe:	683a      	ldr	r2, [r7, #0]
 8008300:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008310:	b480      	push	{r7}
 8008312:	b087      	sub	sp, #28
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	32b0      	adds	r2, #176	; 0xb0
 8008326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800832a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d101      	bne.n	8008336 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008332:	2303      	movs	r3, #3
 8008334:	e008      	b.n	8008348 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	68ba      	ldr	r2, [r7, #8]
 800833a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	371c      	adds	r7, #28
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008354:	b480      	push	{r7}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	32b0      	adds	r2, #176	; 0xb0
 8008368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800836c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d101      	bne.n	8008378 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008374:	2303      	movs	r3, #3
 8008376:	e004      	b.n	8008382 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	683a      	ldr	r2, [r7, #0]
 800837c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	4618      	mov	r0, r3
 8008384:	3714      	adds	r7, #20
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
	...

08008390 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	32b0      	adds	r2, #176	; 0xb0
 80083a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	32b0      	adds	r2, #176	; 0xb0
 80083b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d101      	bne.n	80083be <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80083ba:	2303      	movs	r3, #3
 80083bc:	e018      	b.n	80083f0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	7c1b      	ldrb	r3, [r3, #16]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d10a      	bne.n	80083dc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80083c6:	4b0c      	ldr	r3, [pc, #48]	; (80083f8 <USBD_CDC_ReceivePacket+0x68>)
 80083c8:	7819      	ldrb	r1, [r3, #0]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f001 ff97 	bl	800a308 <USBD_LL_PrepareReceive>
 80083da:	e008      	b.n	80083ee <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80083dc:	4b06      	ldr	r3, [pc, #24]	; (80083f8 <USBD_CDC_ReceivePacket+0x68>)
 80083de:	7819      	ldrb	r1, [r3, #0]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083e6:	2340      	movs	r3, #64	; 0x40
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f001 ff8d 	bl	800a308 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	200000dc 	.word	0x200000dc

080083fc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b086      	sub	sp, #24
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	4613      	mov	r3, r2
 8008408:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d101      	bne.n	8008414 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008410:	2303      	movs	r3, #3
 8008412:	e01f      	b.n	8008454 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2200      	movs	r2, #0
 8008418:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2200      	movs	r2, #0
 8008420:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2200      	movs	r2, #0
 8008428:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d003      	beq.n	800843a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	68ba      	ldr	r2, [r7, #8]
 8008436:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2201      	movs	r2, #1
 800843e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	79fa      	ldrb	r2, [r7, #7]
 8008446:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	f001 fe01 	bl	800a050 <USBD_LL_Init>
 800844e:	4603      	mov	r3, r0
 8008450:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008452:	7dfb      	ldrb	r3, [r7, #23]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3718      	adds	r7, #24
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008466:	2300      	movs	r3, #0
 8008468:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d101      	bne.n	8008474 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008470:	2303      	movs	r3, #3
 8008472:	e025      	b.n	80084c0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	683a      	ldr	r2, [r7, #0]
 8008478:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	32ae      	adds	r2, #174	; 0xae
 8008486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800848a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848c:	2b00      	cmp	r3, #0
 800848e:	d00f      	beq.n	80084b0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	32ae      	adds	r2, #174	; 0xae
 800849a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800849e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a0:	f107 020e 	add.w	r2, r7, #14
 80084a4:	4610      	mov	r0, r2
 80084a6:	4798      	blx	r3
 80084a8:	4602      	mov	r2, r0
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80084b6:	1c5a      	adds	r2, r3, #1
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f001 fe0f 	bl	800a0f4 <USBD_LL_Start>
 80084d6:	4603      	mov	r3, r0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3708      	adds	r7, #8
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80084e8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	370c      	adds	r7, #12
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr

080084f6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b084      	sub	sp, #16
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
 80084fe:	460b      	mov	r3, r1
 8008500:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008502:	2300      	movs	r3, #0
 8008504:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800850c:	2b00      	cmp	r3, #0
 800850e:	d009      	beq.n	8008524 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	78fa      	ldrb	r2, [r7, #3]
 800851a:	4611      	mov	r1, r2
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	4798      	blx	r3
 8008520:	4603      	mov	r3, r0
 8008522:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008524:	7bfb      	ldrb	r3, [r7, #15]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b084      	sub	sp, #16
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
 8008536:	460b      	mov	r3, r1
 8008538:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800853a:	2300      	movs	r3, #0
 800853c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	78fa      	ldrb	r2, [r7, #3]
 8008548:	4611      	mov	r1, r2
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	4798      	blx	r3
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d001      	beq.n	8008558 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008554:	2303      	movs	r3, #3
 8008556:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008558:	7bfb      	ldrb	r3, [r7, #15]
}
 800855a:	4618      	mov	r0, r3
 800855c:	3710      	adds	r7, #16
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b084      	sub	sp, #16
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
 800856a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008572:	6839      	ldr	r1, [r7, #0]
 8008574:	4618      	mov	r0, r3
 8008576:	f001 f908 	bl	800978a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2201      	movs	r2, #1
 800857e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008588:	461a      	mov	r2, r3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008596:	f003 031f 	and.w	r3, r3, #31
 800859a:	2b02      	cmp	r3, #2
 800859c:	d01a      	beq.n	80085d4 <USBD_LL_SetupStage+0x72>
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d822      	bhi.n	80085e8 <USBD_LL_SetupStage+0x86>
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d002      	beq.n	80085ac <USBD_LL_SetupStage+0x4a>
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d00a      	beq.n	80085c0 <USBD_LL_SetupStage+0x5e>
 80085aa:	e01d      	b.n	80085e8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80085b2:	4619      	mov	r1, r3
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 fb5f 	bl	8008c78 <USBD_StdDevReq>
 80085ba:	4603      	mov	r3, r0
 80085bc:	73fb      	strb	r3, [r7, #15]
      break;
 80085be:	e020      	b.n	8008602 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80085c6:	4619      	mov	r1, r3
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 fbc7 	bl	8008d5c <USBD_StdItfReq>
 80085ce:	4603      	mov	r3, r0
 80085d0:	73fb      	strb	r3, [r7, #15]
      break;
 80085d2:	e016      	b.n	8008602 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80085da:	4619      	mov	r1, r3
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 fc29 	bl	8008e34 <USBD_StdEPReq>
 80085e2:	4603      	mov	r3, r0
 80085e4:	73fb      	strb	r3, [r7, #15]
      break;
 80085e6:	e00c      	b.n	8008602 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80085ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	4619      	mov	r1, r3
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f001 fddc 	bl	800a1b4 <USBD_LL_StallEP>
 80085fc:	4603      	mov	r3, r0
 80085fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008600:	bf00      	nop
  }

  return ret;
 8008602:	7bfb      	ldrb	r3, [r7, #15]
}
 8008604:	4618      	mov	r0, r3
 8008606:	3710      	adds	r7, #16
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b086      	sub	sp, #24
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	460b      	mov	r3, r1
 8008616:	607a      	str	r2, [r7, #4]
 8008618:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800861a:	2300      	movs	r3, #0
 800861c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800861e:	7afb      	ldrb	r3, [r7, #11]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d16e      	bne.n	8008702 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800862a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008632:	2b03      	cmp	r3, #3
 8008634:	f040 8098 	bne.w	8008768 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	689a      	ldr	r2, [r3, #8]
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	429a      	cmp	r2, r3
 8008642:	d913      	bls.n	800866c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	689a      	ldr	r2, [r3, #8]
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	1ad2      	subs	r2, r2, r3
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	68da      	ldr	r2, [r3, #12]
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	4293      	cmp	r3, r2
 800865c:	bf28      	it	cs
 800865e:	4613      	movcs	r3, r2
 8008660:	461a      	mov	r2, r3
 8008662:	6879      	ldr	r1, [r7, #4]
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f001 f984 	bl	8009972 <USBD_CtlContinueRx>
 800866a:	e07d      	b.n	8008768 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008672:	f003 031f 	and.w	r3, r3, #31
 8008676:	2b02      	cmp	r3, #2
 8008678:	d014      	beq.n	80086a4 <USBD_LL_DataOutStage+0x98>
 800867a:	2b02      	cmp	r3, #2
 800867c:	d81d      	bhi.n	80086ba <USBD_LL_DataOutStage+0xae>
 800867e:	2b00      	cmp	r3, #0
 8008680:	d002      	beq.n	8008688 <USBD_LL_DataOutStage+0x7c>
 8008682:	2b01      	cmp	r3, #1
 8008684:	d003      	beq.n	800868e <USBD_LL_DataOutStage+0x82>
 8008686:	e018      	b.n	80086ba <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008688:	2300      	movs	r3, #0
 800868a:	75bb      	strb	r3, [r7, #22]
            break;
 800868c:	e018      	b.n	80086c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008694:	b2db      	uxtb	r3, r3
 8008696:	4619      	mov	r1, r3
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f000 fa5e 	bl	8008b5a <USBD_CoreFindIF>
 800869e:	4603      	mov	r3, r0
 80086a0:	75bb      	strb	r3, [r7, #22]
            break;
 80086a2:	e00d      	b.n	80086c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	4619      	mov	r1, r3
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	f000 fa60 	bl	8008b74 <USBD_CoreFindEP>
 80086b4:	4603      	mov	r3, r0
 80086b6:	75bb      	strb	r3, [r7, #22]
            break;
 80086b8:	e002      	b.n	80086c0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80086ba:	2300      	movs	r3, #0
 80086bc:	75bb      	strb	r3, [r7, #22]
            break;
 80086be:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80086c0:	7dbb      	ldrb	r3, [r7, #22]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d119      	bne.n	80086fa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	2b03      	cmp	r3, #3
 80086d0:	d113      	bne.n	80086fa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80086d2:	7dba      	ldrb	r2, [r7, #22]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	32ae      	adds	r2, #174	; 0xae
 80086d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00b      	beq.n	80086fa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80086e2:	7dba      	ldrb	r2, [r7, #22]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80086ea:	7dba      	ldrb	r2, [r7, #22]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	32ae      	adds	r2, #174	; 0xae
 80086f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	68f8      	ldr	r0, [r7, #12]
 80086f8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f001 f94a 	bl	8009994 <USBD_CtlSendStatus>
 8008700:	e032      	b.n	8008768 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008702:	7afb      	ldrb	r3, [r7, #11]
 8008704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008708:	b2db      	uxtb	r3, r3
 800870a:	4619      	mov	r1, r3
 800870c:	68f8      	ldr	r0, [r7, #12]
 800870e:	f000 fa31 	bl	8008b74 <USBD_CoreFindEP>
 8008712:	4603      	mov	r3, r0
 8008714:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008716:	7dbb      	ldrb	r3, [r7, #22]
 8008718:	2bff      	cmp	r3, #255	; 0xff
 800871a:	d025      	beq.n	8008768 <USBD_LL_DataOutStage+0x15c>
 800871c:	7dbb      	ldrb	r3, [r7, #22]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d122      	bne.n	8008768 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008728:	b2db      	uxtb	r3, r3
 800872a:	2b03      	cmp	r3, #3
 800872c:	d117      	bne.n	800875e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800872e:	7dba      	ldrb	r2, [r7, #22]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	32ae      	adds	r2, #174	; 0xae
 8008734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00f      	beq.n	800875e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800873e:	7dba      	ldrb	r2, [r7, #22]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008746:	7dba      	ldrb	r2, [r7, #22]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	32ae      	adds	r2, #174	; 0xae
 800874c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008750:	699b      	ldr	r3, [r3, #24]
 8008752:	7afa      	ldrb	r2, [r7, #11]
 8008754:	4611      	mov	r1, r2
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	4798      	blx	r3
 800875a:	4603      	mov	r3, r0
 800875c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800875e:	7dfb      	ldrb	r3, [r7, #23]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d001      	beq.n	8008768 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008764:	7dfb      	ldrb	r3, [r7, #23]
 8008766:	e000      	b.n	800876a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3718      	adds	r7, #24
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008772:	b580      	push	{r7, lr}
 8008774:	b086      	sub	sp, #24
 8008776:	af00      	add	r7, sp, #0
 8008778:	60f8      	str	r0, [r7, #12]
 800877a:	460b      	mov	r3, r1
 800877c:	607a      	str	r2, [r7, #4]
 800877e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008780:	7afb      	ldrb	r3, [r7, #11]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d16f      	bne.n	8008866 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	3314      	adds	r3, #20
 800878a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008792:	2b02      	cmp	r3, #2
 8008794:	d15a      	bne.n	800884c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	689a      	ldr	r2, [r3, #8]
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d914      	bls.n	80087cc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	689a      	ldr	r2, [r3, #8]
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	1ad2      	subs	r2, r2, r3
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	461a      	mov	r2, r3
 80087b6:	6879      	ldr	r1, [r7, #4]
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f001 f8ac 	bl	8009916 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087be:	2300      	movs	r3, #0
 80087c0:	2200      	movs	r2, #0
 80087c2:	2100      	movs	r1, #0
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f001 fd9f 	bl	800a308 <USBD_LL_PrepareReceive>
 80087ca:	e03f      	b.n	800884c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	68da      	ldr	r2, [r3, #12]
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d11c      	bne.n	8008812 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	685a      	ldr	r2, [r3, #4]
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d316      	bcc.n	8008812 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	685a      	ldr	r2, [r3, #4]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d20f      	bcs.n	8008812 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80087f2:	2200      	movs	r2, #0
 80087f4:	2100      	movs	r1, #0
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	f001 f88d 	bl	8009916 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2200      	movs	r2, #0
 8008800:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008804:	2300      	movs	r3, #0
 8008806:	2200      	movs	r2, #0
 8008808:	2100      	movs	r1, #0
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f001 fd7c 	bl	800a308 <USBD_LL_PrepareReceive>
 8008810:	e01c      	b.n	800884c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008818:	b2db      	uxtb	r3, r3
 800881a:	2b03      	cmp	r3, #3
 800881c:	d10f      	bne.n	800883e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d009      	beq.n	800883e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2200      	movs	r2, #0
 800882e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	68f8      	ldr	r0, [r7, #12]
 800883c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800883e:	2180      	movs	r1, #128	; 0x80
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f001 fcb7 	bl	800a1b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f001 f8b7 	bl	80099ba <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d03a      	beq.n	80088cc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008856:	68f8      	ldr	r0, [r7, #12]
 8008858:	f7ff fe42 	bl	80084e0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2200      	movs	r2, #0
 8008860:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008864:	e032      	b.n	80088cc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008866:	7afb      	ldrb	r3, [r7, #11]
 8008868:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800886c:	b2db      	uxtb	r3, r3
 800886e:	4619      	mov	r1, r3
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f000 f97f 	bl	8008b74 <USBD_CoreFindEP>
 8008876:	4603      	mov	r3, r0
 8008878:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800887a:	7dfb      	ldrb	r3, [r7, #23]
 800887c:	2bff      	cmp	r3, #255	; 0xff
 800887e:	d025      	beq.n	80088cc <USBD_LL_DataInStage+0x15a>
 8008880:	7dfb      	ldrb	r3, [r7, #23]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d122      	bne.n	80088cc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800888c:	b2db      	uxtb	r3, r3
 800888e:	2b03      	cmp	r3, #3
 8008890:	d11c      	bne.n	80088cc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008892:	7dfa      	ldrb	r2, [r7, #23]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	32ae      	adds	r2, #174	; 0xae
 8008898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800889c:	695b      	ldr	r3, [r3, #20]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d014      	beq.n	80088cc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80088a2:	7dfa      	ldrb	r2, [r7, #23]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80088aa:	7dfa      	ldrb	r2, [r7, #23]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	32ae      	adds	r2, #174	; 0xae
 80088b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088b4:	695b      	ldr	r3, [r3, #20]
 80088b6:	7afa      	ldrb	r2, [r7, #11]
 80088b8:	4611      	mov	r1, r2
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	4798      	blx	r3
 80088be:	4603      	mov	r3, r0
 80088c0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80088c2:	7dbb      	ldrb	r3, [r7, #22]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d001      	beq.n	80088cc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80088c8:	7dbb      	ldrb	r3, [r7, #22]
 80088ca:	e000      	b.n	80088ce <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3718      	adds	r7, #24
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b084      	sub	sp, #16
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2201      	movs	r2, #1
 80088e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800890e:	2b00      	cmp	r3, #0
 8008910:	d014      	beq.n	800893c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00e      	beq.n	800893c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	6852      	ldr	r2, [r2, #4]
 800892a:	b2d2      	uxtb	r2, r2
 800892c:	4611      	mov	r1, r2
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	4798      	blx	r3
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d001      	beq.n	800893c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008938:	2303      	movs	r3, #3
 800893a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800893c:	2340      	movs	r3, #64	; 0x40
 800893e:	2200      	movs	r2, #0
 8008940:	2100      	movs	r1, #0
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f001 fbf1 	bl	800a12a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2240      	movs	r2, #64	; 0x40
 8008954:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008958:	2340      	movs	r3, #64	; 0x40
 800895a:	2200      	movs	r2, #0
 800895c:	2180      	movs	r1, #128	; 0x80
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f001 fbe3 	bl	800a12a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2240      	movs	r2, #64	; 0x40
 800896e:	621a      	str	r2, [r3, #32]

  return ret;
 8008970:	7bfb      	ldrb	r3, [r7, #15]
}
 8008972:	4618      	mov	r0, r3
 8008974:	3710      	adds	r7, #16
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}

0800897a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800897a:	b480      	push	{r7}
 800897c:	b083      	sub	sp, #12
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
 8008982:	460b      	mov	r3, r1
 8008984:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	78fa      	ldrb	r2, [r7, #3]
 800898a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	370c      	adds	r7, #12
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr

0800899a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800899a:	b480      	push	{r7}
 800899c:	b083      	sub	sp, #12
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089a8:	b2da      	uxtb	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2204      	movs	r2, #4
 80089b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	370c      	adds	r7, #12
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr

080089c6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80089c6:	b480      	push	{r7}
 80089c8:	b083      	sub	sp, #12
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	2b04      	cmp	r3, #4
 80089d8:	d106      	bne.n	80089e8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80089e0:	b2da      	uxtb	r2, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80089e8:	2300      	movs	r3, #0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	370c      	adds	r7, #12
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr

080089f6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b082      	sub	sp, #8
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	2b03      	cmp	r3, #3
 8008a08:	d110      	bne.n	8008a2c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00b      	beq.n	8008a2c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a1a:	69db      	ldr	r3, [r3, #28]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d005      	beq.n	8008a2c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a26:	69db      	ldr	r3, [r3, #28]
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3708      	adds	r7, #8
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b082      	sub	sp, #8
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
 8008a3e:	460b      	mov	r3, r1
 8008a40:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	32ae      	adds	r2, #174	; 0xae
 8008a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d101      	bne.n	8008a58 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008a54:	2303      	movs	r3, #3
 8008a56:	e01c      	b.n	8008a92 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	2b03      	cmp	r3, #3
 8008a62:	d115      	bne.n	8008a90 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	32ae      	adds	r2, #174	; 0xae
 8008a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a72:	6a1b      	ldr	r3, [r3, #32]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00b      	beq.n	8008a90 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	32ae      	adds	r2, #174	; 0xae
 8008a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a86:	6a1b      	ldr	r3, [r3, #32]
 8008a88:	78fa      	ldrb	r2, [r7, #3]
 8008a8a:	4611      	mov	r1, r2
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3708      	adds	r7, #8
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b082      	sub	sp, #8
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	32ae      	adds	r2, #174	; 0xae
 8008ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d101      	bne.n	8008abc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	e01c      	b.n	8008af6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	2b03      	cmp	r3, #3
 8008ac6:	d115      	bne.n	8008af4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	32ae      	adds	r2, #174	; 0xae
 8008ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d00b      	beq.n	8008af4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	32ae      	adds	r2, #174	; 0xae
 8008ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aec:	78fa      	ldrb	r2, [r7, #3]
 8008aee:	4611      	mov	r1, r2
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3708      	adds	r7, #8
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008afe:	b480      	push	{r7}
 8008b00:	b083      	sub	sp, #12
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00e      	beq.n	8008b50 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	6852      	ldr	r2, [r2, #4]
 8008b3e:	b2d2      	uxtb	r2, r2
 8008b40:	4611      	mov	r1, r2
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	4798      	blx	r3
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d001      	beq.n	8008b50 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008b4c:	2303      	movs	r3, #3
 8008b4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	b083      	sub	sp, #12
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
 8008b62:	460b      	mov	r3, r1
 8008b64:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008b66:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008b80:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	370c      	adds	r7, #12
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr

08008b8e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b086      	sub	sp, #24
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
 8008b96:	460b      	mov	r3, r1
 8008b98:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	885b      	ldrh	r3, [r3, #2]
 8008baa:	b29a      	uxth	r2, r3
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d920      	bls.n	8008bf8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008bbe:	e013      	b.n	8008be8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008bc0:	f107 030a 	add.w	r3, r7, #10
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	6978      	ldr	r0, [r7, #20]
 8008bc8:	f000 f81b 	bl	8008c02 <USBD_GetNextDesc>
 8008bcc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	785b      	ldrb	r3, [r3, #1]
 8008bd2:	2b05      	cmp	r3, #5
 8008bd4:	d108      	bne.n	8008be8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	789b      	ldrb	r3, [r3, #2]
 8008bde:	78fa      	ldrb	r2, [r7, #3]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d008      	beq.n	8008bf6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008be4:	2300      	movs	r3, #0
 8008be6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	885b      	ldrh	r3, [r3, #2]
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	897b      	ldrh	r3, [r7, #10]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d8e5      	bhi.n	8008bc0 <USBD_GetEpDesc+0x32>
 8008bf4:	e000      	b.n	8008bf8 <USBD_GetEpDesc+0x6a>
          break;
 8008bf6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008bf8:	693b      	ldr	r3, [r7, #16]
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3718      	adds	r7, #24
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008c02:	b480      	push	{r7}
 8008c04:	b085      	sub	sp, #20
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
 8008c0a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	881a      	ldrh	r2, [r3, #0]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	4413      	add	r3, r2
 8008c1c:	b29a      	uxth	r2, r3
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	461a      	mov	r2, r3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3714      	adds	r7, #20
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b087      	sub	sp, #28
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	3301      	adds	r3, #1
 8008c52:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008c5a:	8a3b      	ldrh	r3, [r7, #16]
 8008c5c:	021b      	lsls	r3, r3, #8
 8008c5e:	b21a      	sxth	r2, r3
 8008c60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	b21b      	sxth	r3, r3
 8008c68:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008c6a:	89fb      	ldrh	r3, [r7, #14]
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	371c      	adds	r7, #28
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c82:	2300      	movs	r3, #0
 8008c84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c8e:	2b40      	cmp	r3, #64	; 0x40
 8008c90:	d005      	beq.n	8008c9e <USBD_StdDevReq+0x26>
 8008c92:	2b40      	cmp	r3, #64	; 0x40
 8008c94:	d857      	bhi.n	8008d46 <USBD_StdDevReq+0xce>
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00f      	beq.n	8008cba <USBD_StdDevReq+0x42>
 8008c9a:	2b20      	cmp	r3, #32
 8008c9c:	d153      	bne.n	8008d46 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	32ae      	adds	r2, #174	; 0xae
 8008ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	6839      	ldr	r1, [r7, #0]
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	4798      	blx	r3
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8008cb8:	e04a      	b.n	8008d50 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	785b      	ldrb	r3, [r3, #1]
 8008cbe:	2b09      	cmp	r3, #9
 8008cc0:	d83b      	bhi.n	8008d3a <USBD_StdDevReq+0xc2>
 8008cc2:	a201      	add	r2, pc, #4	; (adr r2, 8008cc8 <USBD_StdDevReq+0x50>)
 8008cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc8:	08008d1d 	.word	0x08008d1d
 8008ccc:	08008d31 	.word	0x08008d31
 8008cd0:	08008d3b 	.word	0x08008d3b
 8008cd4:	08008d27 	.word	0x08008d27
 8008cd8:	08008d3b 	.word	0x08008d3b
 8008cdc:	08008cfb 	.word	0x08008cfb
 8008ce0:	08008cf1 	.word	0x08008cf1
 8008ce4:	08008d3b 	.word	0x08008d3b
 8008ce8:	08008d13 	.word	0x08008d13
 8008cec:	08008d05 	.word	0x08008d05
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008cf0:	6839      	ldr	r1, [r7, #0]
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 fa3c 	bl	8009170 <USBD_GetDescriptor>
          break;
 8008cf8:	e024      	b.n	8008d44 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008cfa:	6839      	ldr	r1, [r7, #0]
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 fba1 	bl	8009444 <USBD_SetAddress>
          break;
 8008d02:	e01f      	b.n	8008d44 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008d04:	6839      	ldr	r1, [r7, #0]
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 fbe0 	bl	80094cc <USBD_SetConfig>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	73fb      	strb	r3, [r7, #15]
          break;
 8008d10:	e018      	b.n	8008d44 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008d12:	6839      	ldr	r1, [r7, #0]
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 fc83 	bl	8009620 <USBD_GetConfig>
          break;
 8008d1a:	e013      	b.n	8008d44 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008d1c:	6839      	ldr	r1, [r7, #0]
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 fcb4 	bl	800968c <USBD_GetStatus>
          break;
 8008d24:	e00e      	b.n	8008d44 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008d26:	6839      	ldr	r1, [r7, #0]
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 fce3 	bl	80096f4 <USBD_SetFeature>
          break;
 8008d2e:	e009      	b.n	8008d44 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008d30:	6839      	ldr	r1, [r7, #0]
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fd07 	bl	8009746 <USBD_ClrFeature>
          break;
 8008d38:	e004      	b.n	8008d44 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008d3a:	6839      	ldr	r1, [r7, #0]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 fd5e 	bl	80097fe <USBD_CtlError>
          break;
 8008d42:	bf00      	nop
      }
      break;
 8008d44:	e004      	b.n	8008d50 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008d46:	6839      	ldr	r1, [r7, #0]
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 fd58 	bl	80097fe <USBD_CtlError>
      break;
 8008d4e:	bf00      	nop
  }

  return ret;
 8008d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop

08008d5c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d66:	2300      	movs	r3, #0
 8008d68:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d72:	2b40      	cmp	r3, #64	; 0x40
 8008d74:	d005      	beq.n	8008d82 <USBD_StdItfReq+0x26>
 8008d76:	2b40      	cmp	r3, #64	; 0x40
 8008d78:	d852      	bhi.n	8008e20 <USBD_StdItfReq+0xc4>
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d001      	beq.n	8008d82 <USBD_StdItfReq+0x26>
 8008d7e:	2b20      	cmp	r3, #32
 8008d80:	d14e      	bne.n	8008e20 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	d840      	bhi.n	8008e12 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	889b      	ldrh	r3, [r3, #4]
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d836      	bhi.n	8008e08 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	889b      	ldrh	r3, [r3, #4]
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	4619      	mov	r1, r3
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f7ff fed9 	bl	8008b5a <USBD_CoreFindIF>
 8008da8:	4603      	mov	r3, r0
 8008daa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008dac:	7bbb      	ldrb	r3, [r7, #14]
 8008dae:	2bff      	cmp	r3, #255	; 0xff
 8008db0:	d01d      	beq.n	8008dee <USBD_StdItfReq+0x92>
 8008db2:	7bbb      	ldrb	r3, [r7, #14]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d11a      	bne.n	8008dee <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008db8:	7bba      	ldrb	r2, [r7, #14]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	32ae      	adds	r2, #174	; 0xae
 8008dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00f      	beq.n	8008de8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008dc8:	7bba      	ldrb	r2, [r7, #14]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008dd0:	7bba      	ldrb	r2, [r7, #14]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	32ae      	adds	r2, #174	; 0xae
 8008dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	6839      	ldr	r1, [r7, #0]
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	4798      	blx	r3
 8008de2:	4603      	mov	r3, r0
 8008de4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008de6:	e004      	b.n	8008df2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008de8:	2303      	movs	r3, #3
 8008dea:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008dec:	e001      	b.n	8008df2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008dee:	2303      	movs	r3, #3
 8008df0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	88db      	ldrh	r3, [r3, #6]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d110      	bne.n	8008e1c <USBD_StdItfReq+0xc0>
 8008dfa:	7bfb      	ldrb	r3, [r7, #15]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d10d      	bne.n	8008e1c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 fdc7 	bl	8009994 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008e06:	e009      	b.n	8008e1c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008e08:	6839      	ldr	r1, [r7, #0]
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 fcf7 	bl	80097fe <USBD_CtlError>
          break;
 8008e10:	e004      	b.n	8008e1c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008e12:	6839      	ldr	r1, [r7, #0]
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 fcf2 	bl	80097fe <USBD_CtlError>
          break;
 8008e1a:	e000      	b.n	8008e1e <USBD_StdItfReq+0xc2>
          break;
 8008e1c:	bf00      	nop
      }
      break;
 8008e1e:	e004      	b.n	8008e2a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008e20:	6839      	ldr	r1, [r7, #0]
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 fceb 	bl	80097fe <USBD_CtlError>
      break;
 8008e28:	bf00      	nop
  }

  return ret;
 8008e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	889b      	ldrh	r3, [r3, #4]
 8008e46:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e50:	2b40      	cmp	r3, #64	; 0x40
 8008e52:	d007      	beq.n	8008e64 <USBD_StdEPReq+0x30>
 8008e54:	2b40      	cmp	r3, #64	; 0x40
 8008e56:	f200 817f 	bhi.w	8009158 <USBD_StdEPReq+0x324>
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d02a      	beq.n	8008eb4 <USBD_StdEPReq+0x80>
 8008e5e:	2b20      	cmp	r3, #32
 8008e60:	f040 817a 	bne.w	8009158 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008e64:	7bbb      	ldrb	r3, [r7, #14]
 8008e66:	4619      	mov	r1, r3
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f7ff fe83 	bl	8008b74 <USBD_CoreFindEP>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e72:	7b7b      	ldrb	r3, [r7, #13]
 8008e74:	2bff      	cmp	r3, #255	; 0xff
 8008e76:	f000 8174 	beq.w	8009162 <USBD_StdEPReq+0x32e>
 8008e7a:	7b7b      	ldrb	r3, [r7, #13]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f040 8170 	bne.w	8009162 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008e82:	7b7a      	ldrb	r2, [r7, #13]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008e8a:	7b7a      	ldrb	r2, [r7, #13]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	32ae      	adds	r2, #174	; 0xae
 8008e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	f000 8163 	beq.w	8009162 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008e9c:	7b7a      	ldrb	r2, [r7, #13]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	32ae      	adds	r2, #174	; 0xae
 8008ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	4798      	blx	r3
 8008eae:	4603      	mov	r3, r0
 8008eb0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008eb2:	e156      	b.n	8009162 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	785b      	ldrb	r3, [r3, #1]
 8008eb8:	2b03      	cmp	r3, #3
 8008eba:	d008      	beq.n	8008ece <USBD_StdEPReq+0x9a>
 8008ebc:	2b03      	cmp	r3, #3
 8008ebe:	f300 8145 	bgt.w	800914c <USBD_StdEPReq+0x318>
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f000 809b 	beq.w	8008ffe <USBD_StdEPReq+0x1ca>
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d03c      	beq.n	8008f46 <USBD_StdEPReq+0x112>
 8008ecc:	e13e      	b.n	800914c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d002      	beq.n	8008ee0 <USBD_StdEPReq+0xac>
 8008eda:	2b03      	cmp	r3, #3
 8008edc:	d016      	beq.n	8008f0c <USBD_StdEPReq+0xd8>
 8008ede:	e02c      	b.n	8008f3a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ee0:	7bbb      	ldrb	r3, [r7, #14]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d00d      	beq.n	8008f02 <USBD_StdEPReq+0xce>
 8008ee6:	7bbb      	ldrb	r3, [r7, #14]
 8008ee8:	2b80      	cmp	r3, #128	; 0x80
 8008eea:	d00a      	beq.n	8008f02 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008eec:	7bbb      	ldrb	r3, [r7, #14]
 8008eee:	4619      	mov	r1, r3
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f001 f95f 	bl	800a1b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ef6:	2180      	movs	r1, #128	; 0x80
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f001 f95b 	bl	800a1b4 <USBD_LL_StallEP>
 8008efe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f00:	e020      	b.n	8008f44 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008f02:	6839      	ldr	r1, [r7, #0]
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 fc7a 	bl	80097fe <USBD_CtlError>
              break;
 8008f0a:	e01b      	b.n	8008f44 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	885b      	ldrh	r3, [r3, #2]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d10e      	bne.n	8008f32 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f14:	7bbb      	ldrb	r3, [r7, #14]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00b      	beq.n	8008f32 <USBD_StdEPReq+0xfe>
 8008f1a:	7bbb      	ldrb	r3, [r7, #14]
 8008f1c:	2b80      	cmp	r3, #128	; 0x80
 8008f1e:	d008      	beq.n	8008f32 <USBD_StdEPReq+0xfe>
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	88db      	ldrh	r3, [r3, #6]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d104      	bne.n	8008f32 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f28:	7bbb      	ldrb	r3, [r7, #14]
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f001 f941 	bl	800a1b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 fd2e 	bl	8009994 <USBD_CtlSendStatus>

              break;
 8008f38:	e004      	b.n	8008f44 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008f3a:	6839      	ldr	r1, [r7, #0]
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 fc5e 	bl	80097fe <USBD_CtlError>
              break;
 8008f42:	bf00      	nop
          }
          break;
 8008f44:	e107      	b.n	8009156 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	2b02      	cmp	r3, #2
 8008f50:	d002      	beq.n	8008f58 <USBD_StdEPReq+0x124>
 8008f52:	2b03      	cmp	r3, #3
 8008f54:	d016      	beq.n	8008f84 <USBD_StdEPReq+0x150>
 8008f56:	e04b      	b.n	8008ff0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f58:	7bbb      	ldrb	r3, [r7, #14]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00d      	beq.n	8008f7a <USBD_StdEPReq+0x146>
 8008f5e:	7bbb      	ldrb	r3, [r7, #14]
 8008f60:	2b80      	cmp	r3, #128	; 0x80
 8008f62:	d00a      	beq.n	8008f7a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f64:	7bbb      	ldrb	r3, [r7, #14]
 8008f66:	4619      	mov	r1, r3
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f001 f923 	bl	800a1b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f6e:	2180      	movs	r1, #128	; 0x80
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f001 f91f 	bl	800a1b4 <USBD_LL_StallEP>
 8008f76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f78:	e040      	b.n	8008ffc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008f7a:	6839      	ldr	r1, [r7, #0]
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 fc3e 	bl	80097fe <USBD_CtlError>
              break;
 8008f82:	e03b      	b.n	8008ffc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	885b      	ldrh	r3, [r3, #2]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d136      	bne.n	8008ffa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008f8c:	7bbb      	ldrb	r3, [r7, #14]
 8008f8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d004      	beq.n	8008fa0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008f96:	7bbb      	ldrb	r3, [r7, #14]
 8008f98:	4619      	mov	r1, r3
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f001 f929 	bl	800a1f2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 fcf7 	bl	8009994 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008fa6:	7bbb      	ldrb	r3, [r7, #14]
 8008fa8:	4619      	mov	r1, r3
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f7ff fde2 	bl	8008b74 <USBD_CoreFindEP>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008fb4:	7b7b      	ldrb	r3, [r7, #13]
 8008fb6:	2bff      	cmp	r3, #255	; 0xff
 8008fb8:	d01f      	beq.n	8008ffa <USBD_StdEPReq+0x1c6>
 8008fba:	7b7b      	ldrb	r3, [r7, #13]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d11c      	bne.n	8008ffa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008fc0:	7b7a      	ldrb	r2, [r7, #13]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008fc8:	7b7a      	ldrb	r2, [r7, #13]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	32ae      	adds	r2, #174	; 0xae
 8008fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d010      	beq.n	8008ffa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008fd8:	7b7a      	ldrb	r2, [r7, #13]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	32ae      	adds	r2, #174	; 0xae
 8008fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	6839      	ldr	r1, [r7, #0]
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	4798      	blx	r3
 8008fea:	4603      	mov	r3, r0
 8008fec:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008fee:	e004      	b.n	8008ffa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008ff0:	6839      	ldr	r1, [r7, #0]
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 fc03 	bl	80097fe <USBD_CtlError>
              break;
 8008ff8:	e000      	b.n	8008ffc <USBD_StdEPReq+0x1c8>
              break;
 8008ffa:	bf00      	nop
          }
          break;
 8008ffc:	e0ab      	b.n	8009156 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009004:	b2db      	uxtb	r3, r3
 8009006:	2b02      	cmp	r3, #2
 8009008:	d002      	beq.n	8009010 <USBD_StdEPReq+0x1dc>
 800900a:	2b03      	cmp	r3, #3
 800900c:	d032      	beq.n	8009074 <USBD_StdEPReq+0x240>
 800900e:	e097      	b.n	8009140 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009010:	7bbb      	ldrb	r3, [r7, #14]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d007      	beq.n	8009026 <USBD_StdEPReq+0x1f2>
 8009016:	7bbb      	ldrb	r3, [r7, #14]
 8009018:	2b80      	cmp	r3, #128	; 0x80
 800901a:	d004      	beq.n	8009026 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800901c:	6839      	ldr	r1, [r7, #0]
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fbed 	bl	80097fe <USBD_CtlError>
                break;
 8009024:	e091      	b.n	800914a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009026:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800902a:	2b00      	cmp	r3, #0
 800902c:	da0b      	bge.n	8009046 <USBD_StdEPReq+0x212>
 800902e:	7bbb      	ldrb	r3, [r7, #14]
 8009030:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009034:	4613      	mov	r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	4413      	add	r3, r2
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	3310      	adds	r3, #16
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	4413      	add	r3, r2
 8009042:	3304      	adds	r3, #4
 8009044:	e00b      	b.n	800905e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009046:	7bbb      	ldrb	r3, [r7, #14]
 8009048:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800904c:	4613      	mov	r3, r2
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	4413      	add	r3, r2
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	4413      	add	r3, r2
 800905c:	3304      	adds	r3, #4
 800905e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	2200      	movs	r2, #0
 8009064:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	2202      	movs	r2, #2
 800906a:	4619      	mov	r1, r3
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 fc37 	bl	80098e0 <USBD_CtlSendData>
              break;
 8009072:	e06a      	b.n	800914a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009074:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009078:	2b00      	cmp	r3, #0
 800907a:	da11      	bge.n	80090a0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800907c:	7bbb      	ldrb	r3, [r7, #14]
 800907e:	f003 020f 	and.w	r2, r3, #15
 8009082:	6879      	ldr	r1, [r7, #4]
 8009084:	4613      	mov	r3, r2
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	4413      	add	r3, r2
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	440b      	add	r3, r1
 800908e:	3324      	adds	r3, #36	; 0x24
 8009090:	881b      	ldrh	r3, [r3, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d117      	bne.n	80090c6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009096:	6839      	ldr	r1, [r7, #0]
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fbb0 	bl	80097fe <USBD_CtlError>
                  break;
 800909e:	e054      	b.n	800914a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80090a0:	7bbb      	ldrb	r3, [r7, #14]
 80090a2:	f003 020f 	and.w	r2, r3, #15
 80090a6:	6879      	ldr	r1, [r7, #4]
 80090a8:	4613      	mov	r3, r2
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	4413      	add	r3, r2
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	440b      	add	r3, r1
 80090b2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80090b6:	881b      	ldrh	r3, [r3, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d104      	bne.n	80090c6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80090bc:	6839      	ldr	r1, [r7, #0]
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 fb9d 	bl	80097fe <USBD_CtlError>
                  break;
 80090c4:	e041      	b.n	800914a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	da0b      	bge.n	80090e6 <USBD_StdEPReq+0x2b2>
 80090ce:	7bbb      	ldrb	r3, [r7, #14]
 80090d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090d4:	4613      	mov	r3, r2
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	4413      	add	r3, r2
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	3310      	adds	r3, #16
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	4413      	add	r3, r2
 80090e2:	3304      	adds	r3, #4
 80090e4:	e00b      	b.n	80090fe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090e6:	7bbb      	ldrb	r3, [r7, #14]
 80090e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090ec:	4613      	mov	r3, r2
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	4413      	add	r3, r2
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	4413      	add	r3, r2
 80090fc:	3304      	adds	r3, #4
 80090fe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009100:	7bbb      	ldrb	r3, [r7, #14]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d002      	beq.n	800910c <USBD_StdEPReq+0x2d8>
 8009106:	7bbb      	ldrb	r3, [r7, #14]
 8009108:	2b80      	cmp	r3, #128	; 0x80
 800910a:	d103      	bne.n	8009114 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	2200      	movs	r2, #0
 8009110:	601a      	str	r2, [r3, #0]
 8009112:	e00e      	b.n	8009132 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009114:	7bbb      	ldrb	r3, [r7, #14]
 8009116:	4619      	mov	r1, r3
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f001 f889 	bl	800a230 <USBD_LL_IsStallEP>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d003      	beq.n	800912c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	2201      	movs	r2, #1
 8009128:	601a      	str	r2, [r3, #0]
 800912a:	e002      	b.n	8009132 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	2200      	movs	r2, #0
 8009130:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	2202      	movs	r2, #2
 8009136:	4619      	mov	r1, r3
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 fbd1 	bl	80098e0 <USBD_CtlSendData>
              break;
 800913e:	e004      	b.n	800914a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009140:	6839      	ldr	r1, [r7, #0]
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 fb5b 	bl	80097fe <USBD_CtlError>
              break;
 8009148:	bf00      	nop
          }
          break;
 800914a:	e004      	b.n	8009156 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800914c:	6839      	ldr	r1, [r7, #0]
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 fb55 	bl	80097fe <USBD_CtlError>
          break;
 8009154:	bf00      	nop
      }
      break;
 8009156:	e005      	b.n	8009164 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009158:	6839      	ldr	r1, [r7, #0]
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 fb4f 	bl	80097fe <USBD_CtlError>
      break;
 8009160:	e000      	b.n	8009164 <USBD_StdEPReq+0x330>
      break;
 8009162:	bf00      	nop
  }

  return ret;
 8009164:	7bfb      	ldrb	r3, [r7, #15]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
	...

08009170 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800917a:	2300      	movs	r3, #0
 800917c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800917e:	2300      	movs	r3, #0
 8009180:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009182:	2300      	movs	r3, #0
 8009184:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	885b      	ldrh	r3, [r3, #2]
 800918a:	0a1b      	lsrs	r3, r3, #8
 800918c:	b29b      	uxth	r3, r3
 800918e:	3b01      	subs	r3, #1
 8009190:	2b06      	cmp	r3, #6
 8009192:	f200 8128 	bhi.w	80093e6 <USBD_GetDescriptor+0x276>
 8009196:	a201      	add	r2, pc, #4	; (adr r2, 800919c <USBD_GetDescriptor+0x2c>)
 8009198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800919c:	080091b9 	.word	0x080091b9
 80091a0:	080091d1 	.word	0x080091d1
 80091a4:	08009211 	.word	0x08009211
 80091a8:	080093e7 	.word	0x080093e7
 80091ac:	080093e7 	.word	0x080093e7
 80091b0:	08009387 	.word	0x08009387
 80091b4:	080093b3 	.word	0x080093b3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	7c12      	ldrb	r2, [r2, #16]
 80091c4:	f107 0108 	add.w	r1, r7, #8
 80091c8:	4610      	mov	r0, r2
 80091ca:	4798      	blx	r3
 80091cc:	60f8      	str	r0, [r7, #12]
      break;
 80091ce:	e112      	b.n	80093f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	7c1b      	ldrb	r3, [r3, #16]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10d      	bne.n	80091f4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e0:	f107 0208 	add.w	r2, r7, #8
 80091e4:	4610      	mov	r0, r2
 80091e6:	4798      	blx	r3
 80091e8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	3301      	adds	r3, #1
 80091ee:	2202      	movs	r2, #2
 80091f0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80091f2:	e100      	b.n	80093f6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fc:	f107 0208 	add.w	r2, r7, #8
 8009200:	4610      	mov	r0, r2
 8009202:	4798      	blx	r3
 8009204:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	3301      	adds	r3, #1
 800920a:	2202      	movs	r2, #2
 800920c:	701a      	strb	r2, [r3, #0]
      break;
 800920e:	e0f2      	b.n	80093f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	885b      	ldrh	r3, [r3, #2]
 8009214:	b2db      	uxtb	r3, r3
 8009216:	2b05      	cmp	r3, #5
 8009218:	f200 80ac 	bhi.w	8009374 <USBD_GetDescriptor+0x204>
 800921c:	a201      	add	r2, pc, #4	; (adr r2, 8009224 <USBD_GetDescriptor+0xb4>)
 800921e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009222:	bf00      	nop
 8009224:	0800923d 	.word	0x0800923d
 8009228:	08009271 	.word	0x08009271
 800922c:	080092a5 	.word	0x080092a5
 8009230:	080092d9 	.word	0x080092d9
 8009234:	0800930d 	.word	0x0800930d
 8009238:	08009341 	.word	0x08009341
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00b      	beq.n	8009260 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	7c12      	ldrb	r2, [r2, #16]
 8009254:	f107 0108 	add.w	r1, r7, #8
 8009258:	4610      	mov	r0, r2
 800925a:	4798      	blx	r3
 800925c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800925e:	e091      	b.n	8009384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009260:	6839      	ldr	r1, [r7, #0]
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 facb 	bl	80097fe <USBD_CtlError>
            err++;
 8009268:	7afb      	ldrb	r3, [r7, #11]
 800926a:	3301      	adds	r3, #1
 800926c:	72fb      	strb	r3, [r7, #11]
          break;
 800926e:	e089      	b.n	8009384 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00b      	beq.n	8009294 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	7c12      	ldrb	r2, [r2, #16]
 8009288:	f107 0108 	add.w	r1, r7, #8
 800928c:	4610      	mov	r0, r2
 800928e:	4798      	blx	r3
 8009290:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009292:	e077      	b.n	8009384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009294:	6839      	ldr	r1, [r7, #0]
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fab1 	bl	80097fe <USBD_CtlError>
            err++;
 800929c:	7afb      	ldrb	r3, [r7, #11]
 800929e:	3301      	adds	r3, #1
 80092a0:	72fb      	strb	r3, [r7, #11]
          break;
 80092a2:	e06f      	b.n	8009384 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00b      	beq.n	80092c8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	7c12      	ldrb	r2, [r2, #16]
 80092bc:	f107 0108 	add.w	r1, r7, #8
 80092c0:	4610      	mov	r0, r2
 80092c2:	4798      	blx	r3
 80092c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092c6:	e05d      	b.n	8009384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092c8:	6839      	ldr	r1, [r7, #0]
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 fa97 	bl	80097fe <USBD_CtlError>
            err++;
 80092d0:	7afb      	ldrb	r3, [r7, #11]
 80092d2:	3301      	adds	r3, #1
 80092d4:	72fb      	strb	r3, [r7, #11]
          break;
 80092d6:	e055      	b.n	8009384 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092de:	691b      	ldr	r3, [r3, #16]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d00b      	beq.n	80092fc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ea:	691b      	ldr	r3, [r3, #16]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	7c12      	ldrb	r2, [r2, #16]
 80092f0:	f107 0108 	add.w	r1, r7, #8
 80092f4:	4610      	mov	r0, r2
 80092f6:	4798      	blx	r3
 80092f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092fa:	e043      	b.n	8009384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092fc:	6839      	ldr	r1, [r7, #0]
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 fa7d 	bl	80097fe <USBD_CtlError>
            err++;
 8009304:	7afb      	ldrb	r3, [r7, #11]
 8009306:	3301      	adds	r3, #1
 8009308:	72fb      	strb	r3, [r7, #11]
          break;
 800930a:	e03b      	b.n	8009384 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009312:	695b      	ldr	r3, [r3, #20]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d00b      	beq.n	8009330 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800931e:	695b      	ldr	r3, [r3, #20]
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	7c12      	ldrb	r2, [r2, #16]
 8009324:	f107 0108 	add.w	r1, r7, #8
 8009328:	4610      	mov	r0, r2
 800932a:	4798      	blx	r3
 800932c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800932e:	e029      	b.n	8009384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009330:	6839      	ldr	r1, [r7, #0]
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 fa63 	bl	80097fe <USBD_CtlError>
            err++;
 8009338:	7afb      	ldrb	r3, [r7, #11]
 800933a:	3301      	adds	r3, #1
 800933c:	72fb      	strb	r3, [r7, #11]
          break;
 800933e:	e021      	b.n	8009384 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009346:	699b      	ldr	r3, [r3, #24]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00b      	beq.n	8009364 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009352:	699b      	ldr	r3, [r3, #24]
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	7c12      	ldrb	r2, [r2, #16]
 8009358:	f107 0108 	add.w	r1, r7, #8
 800935c:	4610      	mov	r0, r2
 800935e:	4798      	blx	r3
 8009360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009362:	e00f      	b.n	8009384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009364:	6839      	ldr	r1, [r7, #0]
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fa49 	bl	80097fe <USBD_CtlError>
            err++;
 800936c:	7afb      	ldrb	r3, [r7, #11]
 800936e:	3301      	adds	r3, #1
 8009370:	72fb      	strb	r3, [r7, #11]
          break;
 8009372:	e007      	b.n	8009384 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009374:	6839      	ldr	r1, [r7, #0]
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 fa41 	bl	80097fe <USBD_CtlError>
          err++;
 800937c:	7afb      	ldrb	r3, [r7, #11]
 800937e:	3301      	adds	r3, #1
 8009380:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009382:	bf00      	nop
      }
      break;
 8009384:	e037      	b.n	80093f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	7c1b      	ldrb	r3, [r3, #16]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d109      	bne.n	80093a2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009396:	f107 0208 	add.w	r2, r7, #8
 800939a:	4610      	mov	r0, r2
 800939c:	4798      	blx	r3
 800939e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093a0:	e029      	b.n	80093f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80093a2:	6839      	ldr	r1, [r7, #0]
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 fa2a 	bl	80097fe <USBD_CtlError>
        err++;
 80093aa:	7afb      	ldrb	r3, [r7, #11]
 80093ac:	3301      	adds	r3, #1
 80093ae:	72fb      	strb	r3, [r7, #11]
      break;
 80093b0:	e021      	b.n	80093f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	7c1b      	ldrb	r3, [r3, #16]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d10d      	bne.n	80093d6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c2:	f107 0208 	add.w	r2, r7, #8
 80093c6:	4610      	mov	r0, r2
 80093c8:	4798      	blx	r3
 80093ca:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	3301      	adds	r3, #1
 80093d0:	2207      	movs	r2, #7
 80093d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093d4:	e00f      	b.n	80093f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80093d6:	6839      	ldr	r1, [r7, #0]
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 fa10 	bl	80097fe <USBD_CtlError>
        err++;
 80093de:	7afb      	ldrb	r3, [r7, #11]
 80093e0:	3301      	adds	r3, #1
 80093e2:	72fb      	strb	r3, [r7, #11]
      break;
 80093e4:	e007      	b.n	80093f6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80093e6:	6839      	ldr	r1, [r7, #0]
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 fa08 	bl	80097fe <USBD_CtlError>
      err++;
 80093ee:	7afb      	ldrb	r3, [r7, #11]
 80093f0:	3301      	adds	r3, #1
 80093f2:	72fb      	strb	r3, [r7, #11]
      break;
 80093f4:	bf00      	nop
  }

  if (err != 0U)
 80093f6:	7afb      	ldrb	r3, [r7, #11]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d11e      	bne.n	800943a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	88db      	ldrh	r3, [r3, #6]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d016      	beq.n	8009432 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009404:	893b      	ldrh	r3, [r7, #8]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00e      	beq.n	8009428 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	88da      	ldrh	r2, [r3, #6]
 800940e:	893b      	ldrh	r3, [r7, #8]
 8009410:	4293      	cmp	r3, r2
 8009412:	bf28      	it	cs
 8009414:	4613      	movcs	r3, r2
 8009416:	b29b      	uxth	r3, r3
 8009418:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800941a:	893b      	ldrh	r3, [r7, #8]
 800941c:	461a      	mov	r2, r3
 800941e:	68f9      	ldr	r1, [r7, #12]
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 fa5d 	bl	80098e0 <USBD_CtlSendData>
 8009426:	e009      	b.n	800943c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009428:	6839      	ldr	r1, [r7, #0]
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 f9e7 	bl	80097fe <USBD_CtlError>
 8009430:	e004      	b.n	800943c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 faae 	bl	8009994 <USBD_CtlSendStatus>
 8009438:	e000      	b.n	800943c <USBD_GetDescriptor+0x2cc>
    return;
 800943a:	bf00      	nop
  }
}
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop

08009444 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	889b      	ldrh	r3, [r3, #4]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d131      	bne.n	80094ba <USBD_SetAddress+0x76>
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	88db      	ldrh	r3, [r3, #6]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d12d      	bne.n	80094ba <USBD_SetAddress+0x76>
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	885b      	ldrh	r3, [r3, #2]
 8009462:	2b7f      	cmp	r3, #127	; 0x7f
 8009464:	d829      	bhi.n	80094ba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	885b      	ldrh	r3, [r3, #2]
 800946a:	b2db      	uxtb	r3, r3
 800946c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009470:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009478:	b2db      	uxtb	r3, r3
 800947a:	2b03      	cmp	r3, #3
 800947c:	d104      	bne.n	8009488 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800947e:	6839      	ldr	r1, [r7, #0]
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 f9bc 	bl	80097fe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009486:	e01d      	b.n	80094c4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	7bfa      	ldrb	r2, [r7, #15]
 800948c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009490:	7bfb      	ldrb	r3, [r7, #15]
 8009492:	4619      	mov	r1, r3
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 fef7 	bl	800a288 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 fa7a 	bl	8009994 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80094a0:	7bfb      	ldrb	r3, [r7, #15]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d004      	beq.n	80094b0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2202      	movs	r2, #2
 80094aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ae:	e009      	b.n	80094c4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094b8:	e004      	b.n	80094c4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80094ba:	6839      	ldr	r1, [r7, #0]
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 f99e 	bl	80097fe <USBD_CtlError>
  }
}
 80094c2:	bf00      	nop
 80094c4:	bf00      	nop
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094d6:	2300      	movs	r3, #0
 80094d8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	885b      	ldrh	r3, [r3, #2]
 80094de:	b2da      	uxtb	r2, r3
 80094e0:	4b4e      	ldr	r3, [pc, #312]	; (800961c <USBD_SetConfig+0x150>)
 80094e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80094e4:	4b4d      	ldr	r3, [pc, #308]	; (800961c <USBD_SetConfig+0x150>)
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d905      	bls.n	80094f8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80094ec:	6839      	ldr	r1, [r7, #0]
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 f985 	bl	80097fe <USBD_CtlError>
    return USBD_FAIL;
 80094f4:	2303      	movs	r3, #3
 80094f6:	e08c      	b.n	8009612 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	2b02      	cmp	r3, #2
 8009502:	d002      	beq.n	800950a <USBD_SetConfig+0x3e>
 8009504:	2b03      	cmp	r3, #3
 8009506:	d029      	beq.n	800955c <USBD_SetConfig+0x90>
 8009508:	e075      	b.n	80095f6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800950a:	4b44      	ldr	r3, [pc, #272]	; (800961c <USBD_SetConfig+0x150>)
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d020      	beq.n	8009554 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009512:	4b42      	ldr	r3, [pc, #264]	; (800961c <USBD_SetConfig+0x150>)
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	461a      	mov	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800951c:	4b3f      	ldr	r3, [pc, #252]	; (800961c <USBD_SetConfig+0x150>)
 800951e:	781b      	ldrb	r3, [r3, #0]
 8009520:	4619      	mov	r1, r3
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f7fe ffe7 	bl	80084f6 <USBD_SetClassConfig>
 8009528:	4603      	mov	r3, r0
 800952a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800952c:	7bfb      	ldrb	r3, [r7, #15]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d008      	beq.n	8009544 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009532:	6839      	ldr	r1, [r7, #0]
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 f962 	bl	80097fe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2202      	movs	r2, #2
 800953e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009542:	e065      	b.n	8009610 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 fa25 	bl	8009994 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2203      	movs	r2, #3
 800954e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009552:	e05d      	b.n	8009610 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 fa1d 	bl	8009994 <USBD_CtlSendStatus>
      break;
 800955a:	e059      	b.n	8009610 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800955c:	4b2f      	ldr	r3, [pc, #188]	; (800961c <USBD_SetConfig+0x150>)
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d112      	bne.n	800958a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2202      	movs	r2, #2
 8009568:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800956c:	4b2b      	ldr	r3, [pc, #172]	; (800961c <USBD_SetConfig+0x150>)
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	461a      	mov	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009576:	4b29      	ldr	r3, [pc, #164]	; (800961c <USBD_SetConfig+0x150>)
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	4619      	mov	r1, r3
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f7fe ffd6 	bl	800852e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 fa06 	bl	8009994 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009588:	e042      	b.n	8009610 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800958a:	4b24      	ldr	r3, [pc, #144]	; (800961c <USBD_SetConfig+0x150>)
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	461a      	mov	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	429a      	cmp	r2, r3
 8009596:	d02a      	beq.n	80095ee <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	b2db      	uxtb	r3, r3
 800959e:	4619      	mov	r1, r3
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f7fe ffc4 	bl	800852e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80095a6:	4b1d      	ldr	r3, [pc, #116]	; (800961c <USBD_SetConfig+0x150>)
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	461a      	mov	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80095b0:	4b1a      	ldr	r3, [pc, #104]	; (800961c <USBD_SetConfig+0x150>)
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	4619      	mov	r1, r3
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f7fe ff9d 	bl	80084f6 <USBD_SetClassConfig>
 80095bc:	4603      	mov	r3, r0
 80095be:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80095c0:	7bfb      	ldrb	r3, [r7, #15]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d00f      	beq.n	80095e6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80095c6:	6839      	ldr	r1, [r7, #0]
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 f918 	bl	80097fe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	4619      	mov	r1, r3
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f7fe ffa9 	bl	800852e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2202      	movs	r2, #2
 80095e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80095e4:	e014      	b.n	8009610 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 f9d4 	bl	8009994 <USBD_CtlSendStatus>
      break;
 80095ec:	e010      	b.n	8009610 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 f9d0 	bl	8009994 <USBD_CtlSendStatus>
      break;
 80095f4:	e00c      	b.n	8009610 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80095f6:	6839      	ldr	r1, [r7, #0]
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 f900 	bl	80097fe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80095fe:	4b07      	ldr	r3, [pc, #28]	; (800961c <USBD_SetConfig+0x150>)
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	4619      	mov	r1, r3
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f7fe ff92 	bl	800852e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800960a:	2303      	movs	r3, #3
 800960c:	73fb      	strb	r3, [r7, #15]
      break;
 800960e:	bf00      	nop
  }

  return ret;
 8009610:	7bfb      	ldrb	r3, [r7, #15]
}
 8009612:	4618      	mov	r0, r3
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	200003cc 	.word	0x200003cc

08009620 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	88db      	ldrh	r3, [r3, #6]
 800962e:	2b01      	cmp	r3, #1
 8009630:	d004      	beq.n	800963c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009632:	6839      	ldr	r1, [r7, #0]
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 f8e2 	bl	80097fe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800963a:	e023      	b.n	8009684 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009642:	b2db      	uxtb	r3, r3
 8009644:	2b02      	cmp	r3, #2
 8009646:	dc02      	bgt.n	800964e <USBD_GetConfig+0x2e>
 8009648:	2b00      	cmp	r3, #0
 800964a:	dc03      	bgt.n	8009654 <USBD_GetConfig+0x34>
 800964c:	e015      	b.n	800967a <USBD_GetConfig+0x5a>
 800964e:	2b03      	cmp	r3, #3
 8009650:	d00b      	beq.n	800966a <USBD_GetConfig+0x4a>
 8009652:	e012      	b.n	800967a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	3308      	adds	r3, #8
 800965e:	2201      	movs	r2, #1
 8009660:	4619      	mov	r1, r3
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 f93c 	bl	80098e0 <USBD_CtlSendData>
        break;
 8009668:	e00c      	b.n	8009684 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	3304      	adds	r3, #4
 800966e:	2201      	movs	r2, #1
 8009670:	4619      	mov	r1, r3
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 f934 	bl	80098e0 <USBD_CtlSendData>
        break;
 8009678:	e004      	b.n	8009684 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800967a:	6839      	ldr	r1, [r7, #0]
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 f8be 	bl	80097fe <USBD_CtlError>
        break;
 8009682:	bf00      	nop
}
 8009684:	bf00      	nop
 8009686:	3708      	adds	r7, #8
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800969c:	b2db      	uxtb	r3, r3
 800969e:	3b01      	subs	r3, #1
 80096a0:	2b02      	cmp	r3, #2
 80096a2:	d81e      	bhi.n	80096e2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	88db      	ldrh	r3, [r3, #6]
 80096a8:	2b02      	cmp	r3, #2
 80096aa:	d004      	beq.n	80096b6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80096ac:	6839      	ldr	r1, [r7, #0]
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 f8a5 	bl	80097fe <USBD_CtlError>
        break;
 80096b4:	e01a      	b.n	80096ec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2201      	movs	r2, #1
 80096ba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d005      	beq.n	80096d2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	f043 0202 	orr.w	r2, r3, #2
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	330c      	adds	r3, #12
 80096d6:	2202      	movs	r2, #2
 80096d8:	4619      	mov	r1, r3
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 f900 	bl	80098e0 <USBD_CtlSendData>
      break;
 80096e0:	e004      	b.n	80096ec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80096e2:	6839      	ldr	r1, [r7, #0]
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 f88a 	bl	80097fe <USBD_CtlError>
      break;
 80096ea:	bf00      	nop
  }
}
 80096ec:	bf00      	nop
 80096ee:	3708      	adds	r7, #8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	885b      	ldrh	r3, [r3, #2]
 8009702:	2b01      	cmp	r3, #1
 8009704:	d107      	bne.n	8009716 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2201      	movs	r2, #1
 800970a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 f940 	bl	8009994 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009714:	e013      	b.n	800973e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	885b      	ldrh	r3, [r3, #2]
 800971a:	2b02      	cmp	r3, #2
 800971c:	d10b      	bne.n	8009736 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	889b      	ldrh	r3, [r3, #4]
 8009722:	0a1b      	lsrs	r3, r3, #8
 8009724:	b29b      	uxth	r3, r3
 8009726:	b2da      	uxtb	r2, r3
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 f930 	bl	8009994 <USBD_CtlSendStatus>
}
 8009734:	e003      	b.n	800973e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009736:	6839      	ldr	r1, [r7, #0]
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 f860 	bl	80097fe <USBD_CtlError>
}
 800973e:	bf00      	nop
 8009740:	3708      	adds	r7, #8
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b082      	sub	sp, #8
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
 800974e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009756:	b2db      	uxtb	r3, r3
 8009758:	3b01      	subs	r3, #1
 800975a:	2b02      	cmp	r3, #2
 800975c:	d80b      	bhi.n	8009776 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	885b      	ldrh	r3, [r3, #2]
 8009762:	2b01      	cmp	r3, #1
 8009764:	d10c      	bne.n	8009780 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f910 	bl	8009994 <USBD_CtlSendStatus>
      }
      break;
 8009774:	e004      	b.n	8009780 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009776:	6839      	ldr	r1, [r7, #0]
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 f840 	bl	80097fe <USBD_CtlError>
      break;
 800977e:	e000      	b.n	8009782 <USBD_ClrFeature+0x3c>
      break;
 8009780:	bf00      	nop
  }
}
 8009782:	bf00      	nop
 8009784:	3708      	adds	r7, #8
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b084      	sub	sp, #16
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
 8009792:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	781a      	ldrb	r2, [r3, #0]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	3301      	adds	r3, #1
 80097a4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	781a      	ldrb	r2, [r3, #0]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	3301      	adds	r3, #1
 80097b2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80097b4:	68f8      	ldr	r0, [r7, #12]
 80097b6:	f7ff fa41 	bl	8008c3c <SWAPBYTE>
 80097ba:	4603      	mov	r3, r0
 80097bc:	461a      	mov	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	3301      	adds	r3, #1
 80097c6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	3301      	adds	r3, #1
 80097cc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	f7ff fa34 	bl	8008c3c <SWAPBYTE>
 80097d4:	4603      	mov	r3, r0
 80097d6:	461a      	mov	r2, r3
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	3301      	adds	r3, #1
 80097e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	3301      	adds	r3, #1
 80097e6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80097e8:	68f8      	ldr	r0, [r7, #12]
 80097ea:	f7ff fa27 	bl	8008c3c <SWAPBYTE>
 80097ee:	4603      	mov	r3, r0
 80097f0:	461a      	mov	r2, r3
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	80da      	strh	r2, [r3, #6]
}
 80097f6:	bf00      	nop
 80097f8:	3710      	adds	r7, #16
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b082      	sub	sp, #8
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
 8009806:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009808:	2180      	movs	r1, #128	; 0x80
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 fcd2 	bl	800a1b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009810:	2100      	movs	r1, #0
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fcce 	bl	800a1b4 <USBD_LL_StallEP>
}
 8009818:	bf00      	nop
 800981a:	3708      	adds	r7, #8
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b086      	sub	sp, #24
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800982c:	2300      	movs	r3, #0
 800982e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d036      	beq.n	80098a4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800983a:	6938      	ldr	r0, [r7, #16]
 800983c:	f000 f836 	bl	80098ac <USBD_GetLen>
 8009840:	4603      	mov	r3, r0
 8009842:	3301      	adds	r3, #1
 8009844:	b29b      	uxth	r3, r3
 8009846:	005b      	lsls	r3, r3, #1
 8009848:	b29a      	uxth	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800984e:	7dfb      	ldrb	r3, [r7, #23]
 8009850:	68ba      	ldr	r2, [r7, #8]
 8009852:	4413      	add	r3, r2
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	7812      	ldrb	r2, [r2, #0]
 8009858:	701a      	strb	r2, [r3, #0]
  idx++;
 800985a:	7dfb      	ldrb	r3, [r7, #23]
 800985c:	3301      	adds	r3, #1
 800985e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009860:	7dfb      	ldrb	r3, [r7, #23]
 8009862:	68ba      	ldr	r2, [r7, #8]
 8009864:	4413      	add	r3, r2
 8009866:	2203      	movs	r2, #3
 8009868:	701a      	strb	r2, [r3, #0]
  idx++;
 800986a:	7dfb      	ldrb	r3, [r7, #23]
 800986c:	3301      	adds	r3, #1
 800986e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009870:	e013      	b.n	800989a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009872:	7dfb      	ldrb	r3, [r7, #23]
 8009874:	68ba      	ldr	r2, [r7, #8]
 8009876:	4413      	add	r3, r2
 8009878:	693a      	ldr	r2, [r7, #16]
 800987a:	7812      	ldrb	r2, [r2, #0]
 800987c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	3301      	adds	r3, #1
 8009882:	613b      	str	r3, [r7, #16]
    idx++;
 8009884:	7dfb      	ldrb	r3, [r7, #23]
 8009886:	3301      	adds	r3, #1
 8009888:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800988a:	7dfb      	ldrb	r3, [r7, #23]
 800988c:	68ba      	ldr	r2, [r7, #8]
 800988e:	4413      	add	r3, r2
 8009890:	2200      	movs	r2, #0
 8009892:	701a      	strb	r2, [r3, #0]
    idx++;
 8009894:	7dfb      	ldrb	r3, [r7, #23]
 8009896:	3301      	adds	r3, #1
 8009898:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d1e7      	bne.n	8009872 <USBD_GetString+0x52>
 80098a2:	e000      	b.n	80098a6 <USBD_GetString+0x86>
    return;
 80098a4:	bf00      	nop
  }
}
 80098a6:	3718      	adds	r7, #24
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80098b4:	2300      	movs	r3, #0
 80098b6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80098bc:	e005      	b.n	80098ca <USBD_GetLen+0x1e>
  {
    len++;
 80098be:	7bfb      	ldrb	r3, [r7, #15]
 80098c0:	3301      	adds	r3, #1
 80098c2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	3301      	adds	r3, #1
 80098c8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d1f5      	bne.n	80098be <USBD_GetLen+0x12>
  }

  return len;
 80098d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3714      	adds	r7, #20
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2202      	movs	r2, #2
 80098f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	68ba      	ldr	r2, [r7, #8]
 8009904:	2100      	movs	r1, #0
 8009906:	68f8      	ldr	r0, [r7, #12]
 8009908:	f000 fcdd 	bl	800a2c6 <USBD_LL_Transmit>

  return USBD_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b084      	sub	sp, #16
 800991a:	af00      	add	r7, sp, #0
 800991c:	60f8      	str	r0, [r7, #12]
 800991e:	60b9      	str	r1, [r7, #8]
 8009920:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	68ba      	ldr	r2, [r7, #8]
 8009926:	2100      	movs	r1, #0
 8009928:	68f8      	ldr	r0, [r7, #12]
 800992a:	f000 fccc 	bl	800a2c6 <USBD_LL_Transmit>

  return USBD_OK;
 800992e:	2300      	movs	r3, #0
}
 8009930:	4618      	mov	r0, r3
 8009932:	3710      	adds	r7, #16
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2203      	movs	r2, #3
 8009948:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	2100      	movs	r1, #0
 8009962:	68f8      	ldr	r0, [r7, #12]
 8009964:	f000 fcd0 	bl	800a308 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b084      	sub	sp, #16
 8009976:	af00      	add	r7, sp, #0
 8009978:	60f8      	str	r0, [r7, #12]
 800997a:	60b9      	str	r1, [r7, #8]
 800997c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	68ba      	ldr	r2, [r7, #8]
 8009982:	2100      	movs	r1, #0
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f000 fcbf 	bl	800a308 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	3710      	adds	r7, #16
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2204      	movs	r2, #4
 80099a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80099a4:	2300      	movs	r3, #0
 80099a6:	2200      	movs	r2, #0
 80099a8:	2100      	movs	r1, #0
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 fc8b 	bl	800a2c6 <USBD_LL_Transmit>

  return USBD_OK;
 80099b0:	2300      	movs	r3, #0
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3708      	adds	r7, #8
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b082      	sub	sp, #8
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2205      	movs	r2, #5
 80099c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099ca:	2300      	movs	r3, #0
 80099cc:	2200      	movs	r2, #0
 80099ce:	2100      	movs	r1, #0
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 fc99 	bl	800a308 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099d6:	2300      	movs	r3, #0
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3708      	adds	r7, #8
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80099e4:	2201      	movs	r2, #1
 80099e6:	4912      	ldr	r1, [pc, #72]	; (8009a30 <MX_USB_DEVICE_Init+0x50>)
 80099e8:	4812      	ldr	r0, [pc, #72]	; (8009a34 <MX_USB_DEVICE_Init+0x54>)
 80099ea:	f7fe fd07 	bl	80083fc <USBD_Init>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d001      	beq.n	80099f8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80099f4:	f7f6 feda 	bl	80007ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80099f8:	490f      	ldr	r1, [pc, #60]	; (8009a38 <MX_USB_DEVICE_Init+0x58>)
 80099fa:	480e      	ldr	r0, [pc, #56]	; (8009a34 <MX_USB_DEVICE_Init+0x54>)
 80099fc:	f7fe fd2e 	bl	800845c <USBD_RegisterClass>
 8009a00:	4603      	mov	r3, r0
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d001      	beq.n	8009a0a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009a06:	f7f6 fed1 	bl	80007ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8009a0a:	490c      	ldr	r1, [pc, #48]	; (8009a3c <MX_USB_DEVICE_Init+0x5c>)
 8009a0c:	4809      	ldr	r0, [pc, #36]	; (8009a34 <MX_USB_DEVICE_Init+0x54>)
 8009a0e:	f7fe fc65 	bl	80082dc <USBD_CDC_RegisterInterface>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d001      	beq.n	8009a1c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009a18:	f7f6 fec8 	bl	80007ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8009a1c:	4805      	ldr	r0, [pc, #20]	; (8009a34 <MX_USB_DEVICE_Init+0x54>)
 8009a1e:	f7fe fd53 	bl	80084c8 <USBD_Start>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d001      	beq.n	8009a2c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009a28:	f7f6 fec0 	bl	80007ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009a2c:	bf00      	nop
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	200000f4 	.word	0x200000f4
 8009a34:	200003d0 	.word	0x200003d0
 8009a38:	20000060 	.word	0x20000060
 8009a3c:	200000e0 	.word	0x200000e0

08009a40 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8009a44:	2200      	movs	r2, #0
 8009a46:	4905      	ldr	r1, [pc, #20]	; (8009a5c <CDC_Init_HS+0x1c>)
 8009a48:	4805      	ldr	r0, [pc, #20]	; (8009a60 <CDC_Init_HS+0x20>)
 8009a4a:	f7fe fc61 	bl	8008310 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8009a4e:	4905      	ldr	r1, [pc, #20]	; (8009a64 <CDC_Init_HS+0x24>)
 8009a50:	4803      	ldr	r0, [pc, #12]	; (8009a60 <CDC_Init_HS+0x20>)
 8009a52:	f7fe fc7f 	bl	8008354 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009a56:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	20000eac 	.word	0x20000eac
 8009a60:	200003d0 	.word	0x200003d0
 8009a64:	200006ac 	.word	0x200006ac

08009a68 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8009a6c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	4603      	mov	r3, r0
 8009a80:	6039      	str	r1, [r7, #0]
 8009a82:	71fb      	strb	r3, [r7, #7]
 8009a84:	4613      	mov	r3, r2
 8009a86:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8009a88:	79fb      	ldrb	r3, [r7, #7]
 8009a8a:	2b23      	cmp	r3, #35	; 0x23
 8009a8c:	d84a      	bhi.n	8009b24 <CDC_Control_HS+0xac>
 8009a8e:	a201      	add	r2, pc, #4	; (adr r2, 8009a94 <CDC_Control_HS+0x1c>)
 8009a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a94:	08009b25 	.word	0x08009b25
 8009a98:	08009b25 	.word	0x08009b25
 8009a9c:	08009b25 	.word	0x08009b25
 8009aa0:	08009b25 	.word	0x08009b25
 8009aa4:	08009b25 	.word	0x08009b25
 8009aa8:	08009b25 	.word	0x08009b25
 8009aac:	08009b25 	.word	0x08009b25
 8009ab0:	08009b25 	.word	0x08009b25
 8009ab4:	08009b25 	.word	0x08009b25
 8009ab8:	08009b25 	.word	0x08009b25
 8009abc:	08009b25 	.word	0x08009b25
 8009ac0:	08009b25 	.word	0x08009b25
 8009ac4:	08009b25 	.word	0x08009b25
 8009ac8:	08009b25 	.word	0x08009b25
 8009acc:	08009b25 	.word	0x08009b25
 8009ad0:	08009b25 	.word	0x08009b25
 8009ad4:	08009b25 	.word	0x08009b25
 8009ad8:	08009b25 	.word	0x08009b25
 8009adc:	08009b25 	.word	0x08009b25
 8009ae0:	08009b25 	.word	0x08009b25
 8009ae4:	08009b25 	.word	0x08009b25
 8009ae8:	08009b25 	.word	0x08009b25
 8009aec:	08009b25 	.word	0x08009b25
 8009af0:	08009b25 	.word	0x08009b25
 8009af4:	08009b25 	.word	0x08009b25
 8009af8:	08009b25 	.word	0x08009b25
 8009afc:	08009b25 	.word	0x08009b25
 8009b00:	08009b25 	.word	0x08009b25
 8009b04:	08009b25 	.word	0x08009b25
 8009b08:	08009b25 	.word	0x08009b25
 8009b0c:	08009b25 	.word	0x08009b25
 8009b10:	08009b25 	.word	0x08009b25
 8009b14:	08009b25 	.word	0x08009b25
 8009b18:	08009b25 	.word	0x08009b25
 8009b1c:	08009b25 	.word	0x08009b25
 8009b20:	08009b25 	.word	0x08009b25
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009b24:	bf00      	nop
  }

  return (USBD_OK);
 8009b26:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr

08009b34 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8009b3e:	6879      	ldr	r1, [r7, #4]
 8009b40:	480f      	ldr	r0, [pc, #60]	; (8009b80 <CDC_Receive_HS+0x4c>)
 8009b42:	f7fe fc07 	bl	8008354 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8009b46:	480e      	ldr	r0, [pc, #56]	; (8009b80 <CDC_Receive_HS+0x4c>)
 8009b48:	f7fe fc22 	bl	8008390 <USBD_CDC_ReceivePacket>

  memset (data,'\0',64); //clear the buffer
 8009b4c:	2240      	movs	r2, #64	; 0x40
 8009b4e:	2100      	movs	r1, #0
 8009b50:	480c      	ldr	r0, [pc, #48]	; (8009b84 <CDC_Receive_HS+0x50>)
 8009b52:	f000 fc83 	bl	800a45c <memset>
  uint8_t len = (uint8_t)*Len;
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	73fb      	strb	r3, [r7, #15]
  memcpy(data, Buf,len);
 8009b5c:	7bfb      	ldrb	r3, [r7, #15]
 8009b5e:	461a      	mov	r2, r3
 8009b60:	6879      	ldr	r1, [r7, #4]
 8009b62:	4808      	ldr	r0, [pc, #32]	; (8009b84 <CDC_Receive_HS+0x50>)
 8009b64:	f000 fc6c 	bl	800a440 <memcpy>
  memset(Buf, '\0', len);
 8009b68:	7bfb      	ldrb	r3, [r7, #15]
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 fc74 	bl	800a45c <memset>
  //CDC_Transmit_HS(Buf,*Len);
  return (USBD_OK);
 8009b74:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3710      	adds	r7, #16
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	200003d0 	.word	0x200003d0
 8009b84:	20000160 	.word	0x20000160

08009b88 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b087      	sub	sp, #28
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	4613      	mov	r3, r2
 8009b94:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009b96:	2300      	movs	r3, #0
 8009b98:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8009b9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	371c      	adds	r7, #28
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr
	...

08009bac <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	6039      	str	r1, [r7, #0]
 8009bb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	2212      	movs	r2, #18
 8009bbc:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8009bbe:	4b03      	ldr	r3, [pc, #12]	; (8009bcc <USBD_HS_DeviceDescriptor+0x20>)
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	370c      	adds	r7, #12
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr
 8009bcc:	20000110 	.word	0x20000110

08009bd0 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b083      	sub	sp, #12
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	6039      	str	r1, [r7, #0]
 8009bda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	2204      	movs	r2, #4
 8009be0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009be2:	4b03      	ldr	r3, [pc, #12]	; (8009bf0 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	370c      	adds	r7, #12
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr
 8009bf0:	20000124 	.word	0x20000124

08009bf4 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	6039      	str	r1, [r7, #0]
 8009bfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c00:	79fb      	ldrb	r3, [r7, #7]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d105      	bne.n	8009c12 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009c06:	683a      	ldr	r2, [r7, #0]
 8009c08:	4907      	ldr	r1, [pc, #28]	; (8009c28 <USBD_HS_ProductStrDescriptor+0x34>)
 8009c0a:	4808      	ldr	r0, [pc, #32]	; (8009c2c <USBD_HS_ProductStrDescriptor+0x38>)
 8009c0c:	f7ff fe08 	bl	8009820 <USBD_GetString>
 8009c10:	e004      	b.n	8009c1c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009c12:	683a      	ldr	r2, [r7, #0]
 8009c14:	4904      	ldr	r1, [pc, #16]	; (8009c28 <USBD_HS_ProductStrDescriptor+0x34>)
 8009c16:	4805      	ldr	r0, [pc, #20]	; (8009c2c <USBD_HS_ProductStrDescriptor+0x38>)
 8009c18:	f7ff fe02 	bl	8009820 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c1c:	4b02      	ldr	r3, [pc, #8]	; (8009c28 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3708      	adds	r7, #8
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	200016ac 	.word	0x200016ac
 8009c2c:	0800a520 	.word	0x0800a520

08009c30 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	4603      	mov	r3, r0
 8009c38:	6039      	str	r1, [r7, #0]
 8009c3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009c3c:	683a      	ldr	r2, [r7, #0]
 8009c3e:	4904      	ldr	r1, [pc, #16]	; (8009c50 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8009c40:	4804      	ldr	r0, [pc, #16]	; (8009c54 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8009c42:	f7ff fded 	bl	8009820 <USBD_GetString>
  return USBD_StrDesc;
 8009c46:	4b02      	ldr	r3, [pc, #8]	; (8009c50 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3708      	adds	r7, #8
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	200016ac 	.word	0x200016ac
 8009c54:	0800a538 	.word	0x0800a538

08009c58 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	4603      	mov	r3, r0
 8009c60:	6039      	str	r1, [r7, #0]
 8009c62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	221a      	movs	r2, #26
 8009c68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009c6a:	f000 f843 	bl	8009cf4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009c6e:	4b02      	ldr	r3, [pc, #8]	; (8009c78 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3708      	adds	r7, #8
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	20000128 	.word	0x20000128

08009c7c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	4603      	mov	r3, r0
 8009c84:	6039      	str	r1, [r7, #0]
 8009c86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009c88:	79fb      	ldrb	r3, [r7, #7]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d105      	bne.n	8009c9a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009c8e:	683a      	ldr	r2, [r7, #0]
 8009c90:	4907      	ldr	r1, [pc, #28]	; (8009cb0 <USBD_HS_ConfigStrDescriptor+0x34>)
 8009c92:	4808      	ldr	r0, [pc, #32]	; (8009cb4 <USBD_HS_ConfigStrDescriptor+0x38>)
 8009c94:	f7ff fdc4 	bl	8009820 <USBD_GetString>
 8009c98:	e004      	b.n	8009ca4 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009c9a:	683a      	ldr	r2, [r7, #0]
 8009c9c:	4904      	ldr	r1, [pc, #16]	; (8009cb0 <USBD_HS_ConfigStrDescriptor+0x34>)
 8009c9e:	4805      	ldr	r0, [pc, #20]	; (8009cb4 <USBD_HS_ConfigStrDescriptor+0x38>)
 8009ca0:	f7ff fdbe 	bl	8009820 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ca4:	4b02      	ldr	r3, [pc, #8]	; (8009cb0 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3708      	adds	r7, #8
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	200016ac 	.word	0x200016ac
 8009cb4:	0800a54c 	.word	0x0800a54c

08009cb8 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	6039      	str	r1, [r7, #0]
 8009cc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009cc4:	79fb      	ldrb	r3, [r7, #7]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d105      	bne.n	8009cd6 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8009cca:	683a      	ldr	r2, [r7, #0]
 8009ccc:	4907      	ldr	r1, [pc, #28]	; (8009cec <USBD_HS_InterfaceStrDescriptor+0x34>)
 8009cce:	4808      	ldr	r0, [pc, #32]	; (8009cf0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8009cd0:	f7ff fda6 	bl	8009820 <USBD_GetString>
 8009cd4:	e004      	b.n	8009ce0 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8009cd6:	683a      	ldr	r2, [r7, #0]
 8009cd8:	4904      	ldr	r1, [pc, #16]	; (8009cec <USBD_HS_InterfaceStrDescriptor+0x34>)
 8009cda:	4805      	ldr	r0, [pc, #20]	; (8009cf0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8009cdc:	f7ff fda0 	bl	8009820 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ce0:	4b02      	ldr	r3, [pc, #8]	; (8009cec <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3708      	adds	r7, #8
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	200016ac 	.word	0x200016ac
 8009cf0:	0800a558 	.word	0x0800a558

08009cf4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009cfa:	4b0f      	ldr	r3, [pc, #60]	; (8009d38 <Get_SerialNum+0x44>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009d00:	4b0e      	ldr	r3, [pc, #56]	; (8009d3c <Get_SerialNum+0x48>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009d06:	4b0e      	ldr	r3, [pc, #56]	; (8009d40 <Get_SerialNum+0x4c>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	4413      	add	r3, r2
 8009d12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d009      	beq.n	8009d2e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009d1a:	2208      	movs	r2, #8
 8009d1c:	4909      	ldr	r1, [pc, #36]	; (8009d44 <Get_SerialNum+0x50>)
 8009d1e:	68f8      	ldr	r0, [r7, #12]
 8009d20:	f000 f814 	bl	8009d4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009d24:	2204      	movs	r2, #4
 8009d26:	4908      	ldr	r1, [pc, #32]	; (8009d48 <Get_SerialNum+0x54>)
 8009d28:	68b8      	ldr	r0, [r7, #8]
 8009d2a:	f000 f80f 	bl	8009d4c <IntToUnicode>
  }
}
 8009d2e:	bf00      	nop
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	1fff7a10 	.word	0x1fff7a10
 8009d3c:	1fff7a14 	.word	0x1fff7a14
 8009d40:	1fff7a18 	.word	0x1fff7a18
 8009d44:	2000012a 	.word	0x2000012a
 8009d48:	2000013a 	.word	0x2000013a

08009d4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b087      	sub	sp, #28
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	4613      	mov	r3, r2
 8009d58:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009d5e:	2300      	movs	r3, #0
 8009d60:	75fb      	strb	r3, [r7, #23]
 8009d62:	e027      	b.n	8009db4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	0f1b      	lsrs	r3, r3, #28
 8009d68:	2b09      	cmp	r3, #9
 8009d6a:	d80b      	bhi.n	8009d84 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	0f1b      	lsrs	r3, r3, #28
 8009d70:	b2da      	uxtb	r2, r3
 8009d72:	7dfb      	ldrb	r3, [r7, #23]
 8009d74:	005b      	lsls	r3, r3, #1
 8009d76:	4619      	mov	r1, r3
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	440b      	add	r3, r1
 8009d7c:	3230      	adds	r2, #48	; 0x30
 8009d7e:	b2d2      	uxtb	r2, r2
 8009d80:	701a      	strb	r2, [r3, #0]
 8009d82:	e00a      	b.n	8009d9a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	0f1b      	lsrs	r3, r3, #28
 8009d88:	b2da      	uxtb	r2, r3
 8009d8a:	7dfb      	ldrb	r3, [r7, #23]
 8009d8c:	005b      	lsls	r3, r3, #1
 8009d8e:	4619      	mov	r1, r3
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	440b      	add	r3, r1
 8009d94:	3237      	adds	r2, #55	; 0x37
 8009d96:	b2d2      	uxtb	r2, r2
 8009d98:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	011b      	lsls	r3, r3, #4
 8009d9e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009da0:	7dfb      	ldrb	r3, [r7, #23]
 8009da2:	005b      	lsls	r3, r3, #1
 8009da4:	3301      	adds	r3, #1
 8009da6:	68ba      	ldr	r2, [r7, #8]
 8009da8:	4413      	add	r3, r2
 8009daa:	2200      	movs	r2, #0
 8009dac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009dae:	7dfb      	ldrb	r3, [r7, #23]
 8009db0:	3301      	adds	r3, #1
 8009db2:	75fb      	strb	r3, [r7, #23]
 8009db4:	7dfa      	ldrb	r2, [r7, #23]
 8009db6:	79fb      	ldrb	r3, [r7, #7]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d3d3      	bcc.n	8009d64 <IntToUnicode+0x18>
  }
}
 8009dbc:	bf00      	nop
 8009dbe:	bf00      	nop
 8009dc0:	371c      	adds	r7, #28
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr
	...

08009dcc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b08a      	sub	sp, #40	; 0x28
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009dd4:	f107 0314 	add.w	r3, r7, #20
 8009dd8:	2200      	movs	r2, #0
 8009dda:	601a      	str	r2, [r3, #0]
 8009ddc:	605a      	str	r2, [r3, #4]
 8009dde:	609a      	str	r2, [r3, #8]
 8009de0:	60da      	str	r2, [r3, #12]
 8009de2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a1d      	ldr	r2, [pc, #116]	; (8009e60 <HAL_PCD_MspInit+0x94>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d134      	bne.n	8009e58 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009dee:	2300      	movs	r3, #0
 8009df0:	613b      	str	r3, [r7, #16]
 8009df2:	4b1c      	ldr	r3, [pc, #112]	; (8009e64 <HAL_PCD_MspInit+0x98>)
 8009df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df6:	4a1b      	ldr	r2, [pc, #108]	; (8009e64 <HAL_PCD_MspInit+0x98>)
 8009df8:	f043 0302 	orr.w	r3, r3, #2
 8009dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8009dfe:	4b19      	ldr	r3, [pc, #100]	; (8009e64 <HAL_PCD_MspInit+0x98>)
 8009e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e02:	f003 0302 	and.w	r3, r3, #2
 8009e06:	613b      	str	r3, [r7, #16]
 8009e08:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8009e0a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8009e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e10:	2302      	movs	r3, #2
 8009e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e14:	2300      	movs	r3, #0
 8009e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8009e1c:	230c      	movs	r3, #12
 8009e1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e20:	f107 0314 	add.w	r3, r7, #20
 8009e24:	4619      	mov	r1, r3
 8009e26:	4810      	ldr	r0, [pc, #64]	; (8009e68 <HAL_PCD_MspInit+0x9c>)
 8009e28:	f7f8 fd16 	bl	8002858 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	60fb      	str	r3, [r7, #12]
 8009e30:	4b0c      	ldr	r3, [pc, #48]	; (8009e64 <HAL_PCD_MspInit+0x98>)
 8009e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e34:	4a0b      	ldr	r2, [pc, #44]	; (8009e64 <HAL_PCD_MspInit+0x98>)
 8009e36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009e3a:	6313      	str	r3, [r2, #48]	; 0x30
 8009e3c:	4b09      	ldr	r3, [pc, #36]	; (8009e64 <HAL_PCD_MspInit+0x98>)
 8009e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e44:	60fb      	str	r3, [r7, #12]
 8009e46:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8009e48:	2200      	movs	r2, #0
 8009e4a:	2100      	movs	r1, #0
 8009e4c:	204d      	movs	r0, #77	; 0x4d
 8009e4e:	f7f8 f878 	bl	8001f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8009e52:	204d      	movs	r0, #77	; 0x4d
 8009e54:	f7f8 f891 	bl	8001f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8009e58:	bf00      	nop
 8009e5a:	3728      	adds	r7, #40	; 0x28
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	40040000 	.word	0x40040000
 8009e64:	40023800 	.word	0x40023800
 8009e68:	40020400 	.word	0x40020400

08009e6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009e80:	4619      	mov	r1, r3
 8009e82:	4610      	mov	r0, r2
 8009e84:	f7fe fb6d 	bl	8008562 <USBD_LL_SetupStage>
}
 8009e88:	bf00      	nop
 8009e8a:	3708      	adds	r7, #8
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	460b      	mov	r3, r1
 8009e9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009ea2:	78fa      	ldrb	r2, [r7, #3]
 8009ea4:	6879      	ldr	r1, [r7, #4]
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	00db      	lsls	r3, r3, #3
 8009eaa:	4413      	add	r3, r2
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	440b      	add	r3, r1
 8009eb0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	78fb      	ldrb	r3, [r7, #3]
 8009eb8:	4619      	mov	r1, r3
 8009eba:	f7fe fba7 	bl	800860c <USBD_LL_DataOutStage>
}
 8009ebe:	bf00      	nop
 8009ec0:	3708      	adds	r7, #8
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b082      	sub	sp, #8
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
 8009ece:	460b      	mov	r3, r1
 8009ed0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009ed8:	78fa      	ldrb	r2, [r7, #3]
 8009eda:	6879      	ldr	r1, [r7, #4]
 8009edc:	4613      	mov	r3, r2
 8009ede:	00db      	lsls	r3, r3, #3
 8009ee0:	4413      	add	r3, r2
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	440b      	add	r3, r1
 8009ee6:	334c      	adds	r3, #76	; 0x4c
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	78fb      	ldrb	r3, [r7, #3]
 8009eec:	4619      	mov	r1, r3
 8009eee:	f7fe fc40 	bl	8008772 <USBD_LL_DataInStage>
}
 8009ef2:	bf00      	nop
 8009ef4:	3708      	adds	r7, #8
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b082      	sub	sp, #8
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7fe fd74 	bl	80089f6 <USBD_LL_SOF>
}
 8009f0e:	bf00      	nop
 8009f10:	3708      	adds	r7, #8
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b084      	sub	sp, #16
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d102      	bne.n	8009f30 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	73fb      	strb	r3, [r7, #15]
 8009f2e:	e008      	b.n	8009f42 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	2b02      	cmp	r3, #2
 8009f36:	d102      	bne.n	8009f3e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	73fb      	strb	r3, [r7, #15]
 8009f3c:	e001      	b.n	8009f42 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009f3e:	f7f6 fc35 	bl	80007ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f48:	7bfa      	ldrb	r2, [r7, #15]
 8009f4a:	4611      	mov	r1, r2
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f7fe fd14 	bl	800897a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7fe fcbc 	bl	80088d6 <USBD_LL_Reset>
}
 8009f5e:	bf00      	nop
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
	...

08009f68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7fe fd0f 	bl	800899a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	6812      	ldr	r2, [r2, #0]
 8009f8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009f8e:	f043 0301 	orr.w	r3, r3, #1
 8009f92:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6a1b      	ldr	r3, [r3, #32]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d005      	beq.n	8009fa8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f9c:	4b04      	ldr	r3, [pc, #16]	; (8009fb0 <HAL_PCD_SuspendCallback+0x48>)
 8009f9e:	691b      	ldr	r3, [r3, #16]
 8009fa0:	4a03      	ldr	r2, [pc, #12]	; (8009fb0 <HAL_PCD_SuspendCallback+0x48>)
 8009fa2:	f043 0306 	orr.w	r3, r3, #6
 8009fa6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009fa8:	bf00      	nop
 8009faa:	3708      	adds	r7, #8
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	e000ed00 	.word	0xe000ed00

08009fb4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f7fe fcff 	bl	80089c6 <USBD_LL_Resume>
}
 8009fc8:	bf00      	nop
 8009fca:	3708      	adds	r7, #8
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	460b      	mov	r3, r1
 8009fda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009fe2:	78fa      	ldrb	r2, [r7, #3]
 8009fe4:	4611      	mov	r1, r2
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7fe fd57 	bl	8008a9a <USBD_LL_IsoOUTIncomplete>
}
 8009fec:	bf00      	nop
 8009fee:	3708      	adds	r7, #8
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a006:	78fa      	ldrb	r2, [r7, #3]
 800a008:	4611      	mov	r1, r2
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7fe fd13 	bl	8008a36 <USBD_LL_IsoINIncomplete>
}
 800a010:	bf00      	nop
 800a012:	3708      	adds	r7, #8
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a026:	4618      	mov	r0, r3
 800a028:	f7fe fd69 	bl	8008afe <USBD_LL_DevConnected>
}
 800a02c:	bf00      	nop
 800a02e:	3708      	adds	r7, #8
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a042:	4618      	mov	r0, r3
 800a044:	f7fe fd66 	bl	8008b14 <USBD_LL_DevDisconnected>
}
 800a048:	bf00      	nop
 800a04a:	3708      	adds	r7, #8
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d140      	bne.n	800a0e2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800a060:	4a22      	ldr	r2, [pc, #136]	; (800a0ec <USBD_LL_Init+0x9c>)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	4a20      	ldr	r2, [pc, #128]	; (800a0ec <USBD_LL_Init+0x9c>)
 800a06c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800a070:	4b1e      	ldr	r3, [pc, #120]	; (800a0ec <USBD_LL_Init+0x9c>)
 800a072:	4a1f      	ldr	r2, [pc, #124]	; (800a0f0 <USBD_LL_Init+0xa0>)
 800a074:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800a076:	4b1d      	ldr	r3, [pc, #116]	; (800a0ec <USBD_LL_Init+0x9c>)
 800a078:	2206      	movs	r2, #6
 800a07a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800a07c:	4b1b      	ldr	r3, [pc, #108]	; (800a0ec <USBD_LL_Init+0x9c>)
 800a07e:	2202      	movs	r2, #2
 800a080:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800a082:	4b1a      	ldr	r3, [pc, #104]	; (800a0ec <USBD_LL_Init+0x9c>)
 800a084:	2200      	movs	r2, #0
 800a086:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800a088:	4b18      	ldr	r3, [pc, #96]	; (800a0ec <USBD_LL_Init+0x9c>)
 800a08a:	2202      	movs	r2, #2
 800a08c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800a08e:	4b17      	ldr	r3, [pc, #92]	; (800a0ec <USBD_LL_Init+0x9c>)
 800a090:	2200      	movs	r2, #0
 800a092:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800a094:	4b15      	ldr	r3, [pc, #84]	; (800a0ec <USBD_LL_Init+0x9c>)
 800a096:	2200      	movs	r2, #0
 800a098:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800a09a:	4b14      	ldr	r3, [pc, #80]	; (800a0ec <USBD_LL_Init+0x9c>)
 800a09c:	2200      	movs	r2, #0
 800a09e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800a0a0:	4b12      	ldr	r3, [pc, #72]	; (800a0ec <USBD_LL_Init+0x9c>)
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800a0a6:	4b11      	ldr	r3, [pc, #68]	; (800a0ec <USBD_LL_Init+0x9c>)
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800a0ac:	4b0f      	ldr	r3, [pc, #60]	; (800a0ec <USBD_LL_Init+0x9c>)
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800a0b2:	480e      	ldr	r0, [pc, #56]	; (800a0ec <USBD_LL_Init+0x9c>)
 800a0b4:	f7f9 f86f 	bl	8003196 <HAL_PCD_Init>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d001      	beq.n	800a0c2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800a0be:	f7f6 fb75 	bl	80007ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800a0c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a0c6:	4809      	ldr	r0, [pc, #36]	; (800a0ec <USBD_LL_Init+0x9c>)
 800a0c8:	f7fa fac5 	bl	8004656 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800a0cc:	2280      	movs	r2, #128	; 0x80
 800a0ce:	2100      	movs	r1, #0
 800a0d0:	4806      	ldr	r0, [pc, #24]	; (800a0ec <USBD_LL_Init+0x9c>)
 800a0d2:	f7fa fa79 	bl	80045c8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800a0d6:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800a0da:	2101      	movs	r1, #1
 800a0dc:	4803      	ldr	r0, [pc, #12]	; (800a0ec <USBD_LL_Init+0x9c>)
 800a0de:	f7fa fa73 	bl	80045c8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a0e2:	2300      	movs	r3, #0
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3708      	adds	r7, #8
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	200018ac 	.word	0x200018ac
 800a0f0:	40040000 	.word	0x40040000

0800a0f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a100:	2300      	movs	r3, #0
 800a102:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7f9 f960 	bl	80033d0 <HAL_PCD_Start>
 800a110:	4603      	mov	r3, r0
 800a112:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a114:	7bfb      	ldrb	r3, [r7, #15]
 800a116:	4618      	mov	r0, r3
 800a118:	f000 f942 	bl	800a3a0 <USBD_Get_USB_Status>
 800a11c:	4603      	mov	r3, r0
 800a11e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a120:	7bbb      	ldrb	r3, [r7, #14]
}
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b084      	sub	sp, #16
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
 800a132:	4608      	mov	r0, r1
 800a134:	4611      	mov	r1, r2
 800a136:	461a      	mov	r2, r3
 800a138:	4603      	mov	r3, r0
 800a13a:	70fb      	strb	r3, [r7, #3]
 800a13c:	460b      	mov	r3, r1
 800a13e:	70bb      	strb	r3, [r7, #2]
 800a140:	4613      	mov	r3, r2
 800a142:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a144:	2300      	movs	r3, #0
 800a146:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a148:	2300      	movs	r3, #0
 800a14a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a152:	78bb      	ldrb	r3, [r7, #2]
 800a154:	883a      	ldrh	r2, [r7, #0]
 800a156:	78f9      	ldrb	r1, [r7, #3]
 800a158:	f7f9 fe31 	bl	8003dbe <HAL_PCD_EP_Open>
 800a15c:	4603      	mov	r3, r0
 800a15e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a160:	7bfb      	ldrb	r3, [r7, #15]
 800a162:	4618      	mov	r0, r3
 800a164:	f000 f91c 	bl	800a3a0 <USBD_Get_USB_Status>
 800a168:	4603      	mov	r3, r0
 800a16a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a16c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3710      	adds	r7, #16
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}

0800a176 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a176:	b580      	push	{r7, lr}
 800a178:	b084      	sub	sp, #16
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
 800a17e:	460b      	mov	r3, r1
 800a180:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a182:	2300      	movs	r3, #0
 800a184:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a186:	2300      	movs	r3, #0
 800a188:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a190:	78fa      	ldrb	r2, [r7, #3]
 800a192:	4611      	mov	r1, r2
 800a194:	4618      	mov	r0, r3
 800a196:	f7f9 fe7a 	bl	8003e8e <HAL_PCD_EP_Close>
 800a19a:	4603      	mov	r3, r0
 800a19c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a19e:	7bfb      	ldrb	r3, [r7, #15]
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f000 f8fd 	bl	800a3a0 <USBD_Get_USB_Status>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3710      	adds	r7, #16
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	460b      	mov	r3, r1
 800a1be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1ce:	78fa      	ldrb	r2, [r7, #3]
 800a1d0:	4611      	mov	r1, r2
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7f9 ff52 	bl	800407c <HAL_PCD_EP_SetStall>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1dc:	7bfb      	ldrb	r3, [r7, #15]
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f000 f8de 	bl	800a3a0 <USBD_Get_USB_Status>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b084      	sub	sp, #16
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1fe:	2300      	movs	r3, #0
 800a200:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a202:	2300      	movs	r3, #0
 800a204:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a20c:	78fa      	ldrb	r2, [r7, #3]
 800a20e:	4611      	mov	r1, r2
 800a210:	4618      	mov	r0, r3
 800a212:	f7f9 ff97 	bl	8004144 <HAL_PCD_EP_ClrStall>
 800a216:	4603      	mov	r3, r0
 800a218:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a21a:	7bfb      	ldrb	r3, [r7, #15]
 800a21c:	4618      	mov	r0, r3
 800a21e:	f000 f8bf 	bl	800a3a0 <USBD_Get_USB_Status>
 800a222:	4603      	mov	r3, r0
 800a224:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a226:	7bbb      	ldrb	r3, [r7, #14]
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3710      	adds	r7, #16
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a230:	b480      	push	{r7}
 800a232:	b085      	sub	sp, #20
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	460b      	mov	r3, r1
 800a23a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a242:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a244:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	da0b      	bge.n	800a264 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a24c:	78fb      	ldrb	r3, [r7, #3]
 800a24e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a252:	68f9      	ldr	r1, [r7, #12]
 800a254:	4613      	mov	r3, r2
 800a256:	00db      	lsls	r3, r3, #3
 800a258:	4413      	add	r3, r2
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	440b      	add	r3, r1
 800a25e:	333e      	adds	r3, #62	; 0x3e
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	e00b      	b.n	800a27c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a264:	78fb      	ldrb	r3, [r7, #3]
 800a266:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a26a:	68f9      	ldr	r1, [r7, #12]
 800a26c:	4613      	mov	r3, r2
 800a26e:	00db      	lsls	r3, r3, #3
 800a270:	4413      	add	r3, r2
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	440b      	add	r3, r1
 800a276:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a27a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3714      	adds	r7, #20
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	460b      	mov	r3, r1
 800a292:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a294:	2300      	movs	r3, #0
 800a296:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a298:	2300      	movs	r3, #0
 800a29a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a2a2:	78fa      	ldrb	r2, [r7, #3]
 800a2a4:	4611      	mov	r1, r2
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7f9 fd64 	bl	8003d74 <HAL_PCD_SetAddress>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2b0:	7bfb      	ldrb	r3, [r7, #15]
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f000 f874 	bl	800a3a0 <USBD_Get_USB_Status>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3710      	adds	r7, #16
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a2c6:	b580      	push	{r7, lr}
 800a2c8:	b086      	sub	sp, #24
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	60f8      	str	r0, [r7, #12]
 800a2ce:	607a      	str	r2, [r7, #4]
 800a2d0:	603b      	str	r3, [r7, #0]
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a2e4:	7af9      	ldrb	r1, [r7, #11]
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	f7f9 fe7d 	bl	8003fe8 <HAL_PCD_EP_Transmit>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2f2:	7dfb      	ldrb	r3, [r7, #23]
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f000 f853 	bl	800a3a0 <USBD_Get_USB_Status>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a2fe:	7dbb      	ldrb	r3, [r7, #22]
}
 800a300:	4618      	mov	r0, r3
 800a302:	3718      	adds	r7, #24
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b086      	sub	sp, #24
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	607a      	str	r2, [r7, #4]
 800a312:	603b      	str	r3, [r7, #0]
 800a314:	460b      	mov	r3, r1
 800a316:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a318:	2300      	movs	r3, #0
 800a31a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a31c:	2300      	movs	r3, #0
 800a31e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a326:	7af9      	ldrb	r1, [r7, #11]
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	f7f9 fdf9 	bl	8003f22 <HAL_PCD_EP_Receive>
 800a330:	4603      	mov	r3, r0
 800a332:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a334:	7dfb      	ldrb	r3, [r7, #23]
 800a336:	4618      	mov	r0, r3
 800a338:	f000 f832 	bl	800a3a0 <USBD_Get_USB_Status>
 800a33c:	4603      	mov	r3, r0
 800a33e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a340:	7dbb      	ldrb	r3, [r7, #22]
}
 800a342:	4618      	mov	r0, r3
 800a344:	3718      	adds	r7, #24
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}

0800a34a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a34a:	b580      	push	{r7, lr}
 800a34c:	b082      	sub	sp, #8
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
 800a352:	460b      	mov	r3, r1
 800a354:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a35c:	78fa      	ldrb	r2, [r7, #3]
 800a35e:	4611      	mov	r1, r2
 800a360:	4618      	mov	r0, r3
 800a362:	f7f9 fe29 	bl	8003fb8 <HAL_PCD_EP_GetRxCount>
 800a366:	4603      	mov	r3, r0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3708      	adds	r7, #8
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a378:	4b03      	ldr	r3, [pc, #12]	; (800a388 <USBD_static_malloc+0x18>)
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	370c      	adds	r7, #12
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr
 800a386:	bf00      	nop
 800a388:	20001db8 	.word	0x20001db8

0800a38c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]

}
 800a394:	bf00      	nop
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b085      	sub	sp, #20
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a3ae:	79fb      	ldrb	r3, [r7, #7]
 800a3b0:	2b03      	cmp	r3, #3
 800a3b2:	d817      	bhi.n	800a3e4 <USBD_Get_USB_Status+0x44>
 800a3b4:	a201      	add	r2, pc, #4	; (adr r2, 800a3bc <USBD_Get_USB_Status+0x1c>)
 800a3b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ba:	bf00      	nop
 800a3bc:	0800a3cd 	.word	0x0800a3cd
 800a3c0:	0800a3d3 	.word	0x0800a3d3
 800a3c4:	0800a3d9 	.word	0x0800a3d9
 800a3c8:	0800a3df 	.word	0x0800a3df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a3d0:	e00b      	b.n	800a3ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a3d2:	2303      	movs	r3, #3
 800a3d4:	73fb      	strb	r3, [r7, #15]
    break;
 800a3d6:	e008      	b.n	800a3ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	73fb      	strb	r3, [r7, #15]
    break;
 800a3dc:	e005      	b.n	800a3ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a3de:	2303      	movs	r3, #3
 800a3e0:	73fb      	strb	r3, [r7, #15]
    break;
 800a3e2:	e002      	b.n	800a3ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a3e4:	2303      	movs	r3, #3
 800a3e6:	73fb      	strb	r3, [r7, #15]
    break;
 800a3e8:	bf00      	nop
  }
  return usb_status;
 800a3ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3714      	adds	r7, #20
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr

0800a3f8 <__libc_init_array>:
 800a3f8:	b570      	push	{r4, r5, r6, lr}
 800a3fa:	4d0d      	ldr	r5, [pc, #52]	; (800a430 <__libc_init_array+0x38>)
 800a3fc:	4c0d      	ldr	r4, [pc, #52]	; (800a434 <__libc_init_array+0x3c>)
 800a3fe:	1b64      	subs	r4, r4, r5
 800a400:	10a4      	asrs	r4, r4, #2
 800a402:	2600      	movs	r6, #0
 800a404:	42a6      	cmp	r6, r4
 800a406:	d109      	bne.n	800a41c <__libc_init_array+0x24>
 800a408:	4d0b      	ldr	r5, [pc, #44]	; (800a438 <__libc_init_array+0x40>)
 800a40a:	4c0c      	ldr	r4, [pc, #48]	; (800a43c <__libc_init_array+0x44>)
 800a40c:	f000 f82e 	bl	800a46c <_init>
 800a410:	1b64      	subs	r4, r4, r5
 800a412:	10a4      	asrs	r4, r4, #2
 800a414:	2600      	movs	r6, #0
 800a416:	42a6      	cmp	r6, r4
 800a418:	d105      	bne.n	800a426 <__libc_init_array+0x2e>
 800a41a:	bd70      	pop	{r4, r5, r6, pc}
 800a41c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a420:	4798      	blx	r3
 800a422:	3601      	adds	r6, #1
 800a424:	e7ee      	b.n	800a404 <__libc_init_array+0xc>
 800a426:	f855 3b04 	ldr.w	r3, [r5], #4
 800a42a:	4798      	blx	r3
 800a42c:	3601      	adds	r6, #1
 800a42e:	e7f2      	b.n	800a416 <__libc_init_array+0x1e>
 800a430:	0800c040 	.word	0x0800c040
 800a434:	0800c040 	.word	0x0800c040
 800a438:	0800c040 	.word	0x0800c040
 800a43c:	0800c044 	.word	0x0800c044

0800a440 <memcpy>:
 800a440:	440a      	add	r2, r1
 800a442:	4291      	cmp	r1, r2
 800a444:	f100 33ff 	add.w	r3, r0, #4294967295
 800a448:	d100      	bne.n	800a44c <memcpy+0xc>
 800a44a:	4770      	bx	lr
 800a44c:	b510      	push	{r4, lr}
 800a44e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a452:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a456:	4291      	cmp	r1, r2
 800a458:	d1f9      	bne.n	800a44e <memcpy+0xe>
 800a45a:	bd10      	pop	{r4, pc}

0800a45c <memset>:
 800a45c:	4402      	add	r2, r0
 800a45e:	4603      	mov	r3, r0
 800a460:	4293      	cmp	r3, r2
 800a462:	d100      	bne.n	800a466 <memset+0xa>
 800a464:	4770      	bx	lr
 800a466:	f803 1b01 	strb.w	r1, [r3], #1
 800a46a:	e7f9      	b.n	800a460 <memset+0x4>

0800a46c <_init>:
 800a46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a46e:	bf00      	nop
 800a470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a472:	bc08      	pop	{r3}
 800a474:	469e      	mov	lr, r3
 800a476:	4770      	bx	lr

0800a478 <_fini>:
 800a478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a47a:	bf00      	nop
 800a47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a47e:	bc08      	pop	{r3}
 800a480:	469e      	mov	lr, r3
 800a482:	4770      	bx	lr
